
RPM_Speed_Sensor_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08003a78  08003a78  00013a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ad4  08003ad4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ad4  08003ad4  00013ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003adc  08003adc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003adc  08003adc  00013adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ae0  08003ae0  00013ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003ae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  2000005c  08003b40  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08003b40  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bc7e  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019a5  00000000  00000000  0002bd4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba0  00000000  00000000  0002d6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000921  00000000  00000000  0002e298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001624e  00000000  00000000  0002ebb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d281  00000000  00000000  00044e07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d052  00000000  00000000  00052088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003618  00000000  00000000  000df0dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000e26f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003a60 	.word	0x08003a60

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08003a60 	.word	0x08003a60

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b090      	sub	sp, #64	; 0x40
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t txd_msg_buffer[64] = {0};
 8000592:	2300      	movs	r3, #0
 8000594:	603b      	str	r3, [r7, #0]
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	223c      	movs	r2, #60	; 0x3c
 800059a:	2100      	movs	r1, #0
 800059c:	4618      	mov	r0, r3
 800059e:	f002 fddb 	bl	8003158 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 fbef 	bl	8000d84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f839 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 f96f 	bl	800088c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ae:	f000 f919 	bl	80007e4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80005b2:	f000 f893 	bl	80006dc <MX_TIM3_Init>
  MX_USART6_UART_Init();
 80005b6:	f000 f93f 	bl	8000838 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Init(&htim3);
 80005ba:	4813      	ldr	r0, [pc, #76]	; (8000608 <main+0x7c>)
 80005bc:	f001 fbce 	bl	8001d5c <HAL_TIM_Base_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80005c0:	2100      	movs	r1, #0
 80005c2:	4811      	ldr	r0, [pc, #68]	; (8000608 <main+0x7c>)
 80005c4:	f001 fc72 	bl	8001eac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80005c8:	2108      	movs	r1, #8
 80005ca:	480f      	ldr	r0, [pc, #60]	; (8000608 <main+0x7c>)
 80005cc:	f001 fc6e 	bl	8001eac <HAL_TIM_PWM_Start>
  //start motor
  TIM3->CCR1 = 600;
 80005d0:	4b0e      	ldr	r3, [pc, #56]	; (800060c <main+0x80>)
 80005d2:	f44f 7216 	mov.w	r2, #600	; 0x258
 80005d6:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3->CCR3 = 0;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <main+0x80>)
 80005da:	2200      	movs	r2, #0
 80005dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    sprintf((char*)txd_msg_buffer, "Motor RPM: %u\r\n", rpm_tick_count);
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <main+0x84>)
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	463b      	mov	r3, r7
 80005e4:	490b      	ldr	r1, [pc, #44]	; (8000614 <main+0x88>)
 80005e6:	4618      	mov	r0, r3
 80005e8:	f002 fd96 	bl	8003118 <siprintf>
    HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char *)txd_msg_buffer), 1000);
 80005ec:	463b      	mov	r3, r7
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff fdf6 	bl	80001e0 <strlen>
 80005f4:	4603      	mov	r3, r0
 80005f6:	b29a      	uxth	r2, r3
 80005f8:	4639      	mov	r1, r7
 80005fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fe:	4806      	ldr	r0, [pc, #24]	; (8000618 <main+0x8c>)
 8000600:	f002 fa15 	bl	8002a2e <HAL_UART_Transmit>
    sprintf((char*)txd_msg_buffer, "Motor RPM: %u\r\n", rpm_tick_count);
 8000604:	e7eb      	b.n	80005de <main+0x52>
 8000606:	bf00      	nop
 8000608:	2000007c 	.word	0x2000007c
 800060c:	40000400 	.word	0x40000400
 8000610:	20000078 	.word	0x20000078
 8000614:	08003a78 	.word	0x08003a78
 8000618:	20000108 	.word	0x20000108

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f002 fd94 	bl	8003158 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <SystemClock_Config+0xb8>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a22      	ldr	r2, [pc, #136]	; (80006d4 <SystemClock_Config+0xb8>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <SystemClock_Config+0xb8>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <SystemClock_Config+0xbc>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000668:	4a1b      	ldr	r2, [pc, #108]	; (80006d8 <SystemClock_Config+0xbc>)
 800066a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b19      	ldr	r3, [pc, #100]	; (80006d8 <SystemClock_Config+0xbc>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067c:	2302      	movs	r3, #2
 800067e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000680:	2301      	movs	r3, #1
 8000682:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000684:	2310      	movs	r3, #16
 8000686:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000688:	2300      	movs	r3, #0
 800068a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068c:	f107 0320 	add.w	r3, r7, #32
 8000690:	4618      	mov	r0, r3
 8000692:	f000 fecb 	bl	800142c <HAL_RCC_OscConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800069c:	f000 f99e 	bl	80009dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a0:	230f      	movs	r3, #15
 80006a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006a4:	2300      	movs	r3, #0
 80006a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 f92e 	bl	800191c <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006c6:	f000 f989 	bl	80009dc <Error_Handler>
  }
}
 80006ca:	bf00      	nop
 80006cc:	3750      	adds	r7, #80	; 0x50
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08e      	sub	sp, #56	; 0x38
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f0:	f107 0320 	add.w	r3, r7, #32
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]
 8000708:	615a      	str	r2, [r3, #20]
 800070a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800070c:	4b33      	ldr	r3, [pc, #204]	; (80007dc <MX_TIM3_Init+0x100>)
 800070e:	4a34      	ldr	r2, [pc, #208]	; (80007e0 <MX_TIM3_Init+0x104>)
 8000710:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8000712:	4b32      	ldr	r3, [pc, #200]	; (80007dc <MX_TIM3_Init+0x100>)
 8000714:	220f      	movs	r2, #15
 8000716:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000718:	4b30      	ldr	r3, [pc, #192]	; (80007dc <MX_TIM3_Init+0x100>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 800071e:	4b2f      	ldr	r3, [pc, #188]	; (80007dc <MX_TIM3_Init+0x100>)
 8000720:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000724:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000726:	4b2d      	ldr	r3, [pc, #180]	; (80007dc <MX_TIM3_Init+0x100>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800072c:	4b2b      	ldr	r3, [pc, #172]	; (80007dc <MX_TIM3_Init+0x100>)
 800072e:	2280      	movs	r2, #128	; 0x80
 8000730:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000732:	482a      	ldr	r0, [pc, #168]	; (80007dc <MX_TIM3_Init+0x100>)
 8000734:	f001 fb12 	bl	8001d5c <HAL_TIM_Base_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800073e:	f000 f94d 	bl	80009dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000746:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000748:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800074c:	4619      	mov	r1, r3
 800074e:	4823      	ldr	r0, [pc, #140]	; (80007dc <MX_TIM3_Init+0x100>)
 8000750:	f001 fd1e 	bl	8002190 <HAL_TIM_ConfigClockSource>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800075a:	f000 f93f 	bl	80009dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800075e:	481f      	ldr	r0, [pc, #124]	; (80007dc <MX_TIM3_Init+0x100>)
 8000760:	f001 fb4b 	bl	8001dfa <HAL_TIM_PWM_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800076a:	f000 f937 	bl	80009dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800076e:	2300      	movs	r3, #0
 8000770:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000772:	2300      	movs	r3, #0
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000776:	f107 0320 	add.w	r3, r7, #32
 800077a:	4619      	mov	r1, r3
 800077c:	4817      	ldr	r0, [pc, #92]	; (80007dc <MX_TIM3_Init+0x100>)
 800077e:	f002 f89b 	bl	80028b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000788:	f000 f928 	bl	80009dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800078c:	2360      	movs	r3, #96	; 0x60
 800078e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1200-1;
 8000790:	f240 43af 	movw	r3, #1199	; 0x4af
 8000794:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2200      	movs	r2, #0
 80007a2:	4619      	mov	r1, r3
 80007a4:	480d      	ldr	r0, [pc, #52]	; (80007dc <MX_TIM3_Init+0x100>)
 80007a6:	f001 fc31 	bl	800200c <HAL_TIM_PWM_ConfigChannel>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80007b0:	f000 f914 	bl	80009dc <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2208      	movs	r2, #8
 80007bc:	4619      	mov	r1, r3
 80007be:	4807      	ldr	r0, [pc, #28]	; (80007dc <MX_TIM3_Init+0x100>)
 80007c0:	f001 fc24 	bl	800200c <HAL_TIM_PWM_ConfigChannel>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 80007ca:	f000 f907 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007ce:	4803      	ldr	r0, [pc, #12]	; (80007dc <MX_TIM3_Init+0x100>)
 80007d0:	f000 f954 	bl	8000a7c <HAL_TIM_MspPostInit>

}
 80007d4:	bf00      	nop
 80007d6:	3738      	adds	r7, #56	; 0x38
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	2000007c 	.word	0x2000007c
 80007e0:	40000400 	.word	0x40000400

080007e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 80007ea:	4a12      	ldr	r2, [pc, #72]	; (8000834 <MX_USART2_UART_Init+0x50>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 80007f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 800080a:	220c      	movs	r2, #12
 800080c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 800081c:	f002 f8ba 	bl	8002994 <HAL_UART_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000826:	f000 f8d9 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200000c4 	.word	0x200000c4
 8000834:	40004400 	.word	0x40004400

08000838 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800083c:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_USART6_UART_Init+0x4c>)
 800083e:	4a12      	ldr	r2, [pc, #72]	; (8000888 <MX_USART6_UART_Init+0x50>)
 8000840:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <MX_USART6_UART_Init+0x4c>)
 8000844:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000848:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_USART6_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_USART6_UART_Init+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <MX_USART6_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX;
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_USART6_UART_Init+0x4c>)
 800085e:	2208      	movs	r2, #8
 8000860:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <MX_USART6_UART_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_USART6_UART_Init+0x4c>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800086e:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_USART6_UART_Init+0x4c>)
 8000870:	f002 f890 	bl	8002994 <HAL_UART_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800087a:	f000 f8af 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000108 	.word	0x20000108
 8000888:	40011400 	.word	0x40011400

0800088c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	; 0x28
 8000890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	4b3c      	ldr	r3, [pc, #240]	; (8000998 <MX_GPIO_Init+0x10c>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a3b      	ldr	r2, [pc, #236]	; (8000998 <MX_GPIO_Init+0x10c>)
 80008ac:	f043 0304 	orr.w	r3, r3, #4
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b39      	ldr	r3, [pc, #228]	; (8000998 <MX_GPIO_Init+0x10c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0304 	and.w	r3, r3, #4
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	4b35      	ldr	r3, [pc, #212]	; (8000998 <MX_GPIO_Init+0x10c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a34      	ldr	r2, [pc, #208]	; (8000998 <MX_GPIO_Init+0x10c>)
 80008c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b32      	ldr	r3, [pc, #200]	; (8000998 <MX_GPIO_Init+0x10c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	4b2e      	ldr	r3, [pc, #184]	; (8000998 <MX_GPIO_Init+0x10c>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a2d      	ldr	r2, [pc, #180]	; (8000998 <MX_GPIO_Init+0x10c>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b2b      	ldr	r3, [pc, #172]	; (8000998 <MX_GPIO_Init+0x10c>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	4b27      	ldr	r3, [pc, #156]	; (8000998 <MX_GPIO_Init+0x10c>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a26      	ldr	r2, [pc, #152]	; (8000998 <MX_GPIO_Init+0x10c>)
 8000900:	f043 0302 	orr.w	r3, r3, #2
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b24      	ldr	r3, [pc, #144]	; (8000998 <MX_GPIO_Init+0x10c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2120      	movs	r1, #32
 8000916:	4821      	ldr	r0, [pc, #132]	; (800099c <MX_GPIO_Init+0x110>)
 8000918:	f000 fd3c 	bl	8001394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800091c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000922:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000926:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	4619      	mov	r1, r3
 8000932:	481b      	ldr	r0, [pc, #108]	; (80009a0 <MX_GPIO_Init+0x114>)
 8000934:	f000 fbaa 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000938:	2320      	movs	r3, #32
 800093a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093c:	2301      	movs	r3, #1
 800093e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	4619      	mov	r1, r3
 800094e:	4813      	ldr	r0, [pc, #76]	; (800099c <MX_GPIO_Init+0x110>)
 8000950:	f000 fb9c 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pin : RPM_TICK_Pin */
  GPIO_InitStruct.Pin = RPM_TICK_Pin;
 8000954:	2304      	movs	r3, #4
 8000956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000958:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800095c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RPM_TICK_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	4619      	mov	r1, r3
 8000968:	480e      	ldr	r0, [pc, #56]	; (80009a4 <MX_GPIO_Init+0x118>)
 800096a:	f000 fb8f 	bl	800108c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2100      	movs	r1, #0
 8000972:	2008      	movs	r0, #8
 8000974:	f000 fb53 	bl	800101e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000978:	2008      	movs	r0, #8
 800097a:	f000 fb6c 	bl	8001056 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2100      	movs	r1, #0
 8000982:	2028      	movs	r0, #40	; 0x28
 8000984:	f000 fb4b 	bl	800101e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000988:	2028      	movs	r0, #40	; 0x28
 800098a:	f000 fb64 	bl	8001056 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800098e:	bf00      	nop
 8000990:	3728      	adds	r7, #40	; 0x28
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800
 800099c:	40020000 	.word	0x40020000
 80009a0:	40020800 	.word	0x40020800
 80009a4:	40020400 	.word	0x40020400

080009a8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	80fb      	strh	r3, [r7, #6]
	if( GPIO_Pin == RPM_TICK_Pin )
 80009b2:	88fb      	ldrh	r3, [r7, #6]
 80009b4:	2b04      	cmp	r3, #4
 80009b6:	d108      	bne.n	80009ca <HAL_GPIO_EXTI_Callback+0x22>
	{
		rpm_tick_count += 1;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_GPIO_EXTI_Callback+0x2c>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	3301      	adds	r3, #1
 80009be:	4a05      	ldr	r2, [pc, #20]	; (80009d4 <HAL_GPIO_EXTI_Callback+0x2c>)
 80009c0:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80009c2:	2120      	movs	r1, #32
 80009c4:	4804      	ldr	r0, [pc, #16]	; (80009d8 <HAL_GPIO_EXTI_Callback+0x30>)
 80009c6:	f000 fcfe 	bl	80013c6 <HAL_GPIO_TogglePin>
	}
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000078 	.word	0x20000078
 80009d8:	40020000 	.word	0x40020000

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <Error_Handler+0x8>
	...

080009e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <HAL_MspInit+0x4c>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	4a0f      	ldr	r2, [pc, #60]	; (8000a34 <HAL_MspInit+0x4c>)
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009fc:	6453      	str	r3, [r2, #68]	; 0x44
 80009fe:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	4a08      	ldr	r2, [pc, #32]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a18:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a26:	2007      	movs	r0, #7
 8000a28:	f000 faee 	bl	8001008 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40023800 	.word	0x40023800

08000a38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a0b      	ldr	r2, [pc, #44]	; (8000a74 <HAL_TIM_Base_MspInit+0x3c>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d10d      	bne.n	8000a66 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <HAL_TIM_Base_MspInit+0x40>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	4a09      	ldr	r2, [pc, #36]	; (8000a78 <HAL_TIM_Base_MspInit+0x40>)
 8000a54:	f043 0302 	orr.w	r3, r3, #2
 8000a58:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5a:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <HAL_TIM_Base_MspInit+0x40>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a66:	bf00      	nop
 8000a68:	3714      	adds	r7, #20
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	40000400 	.word	0x40000400
 8000a78:	40023800 	.word	0x40023800

08000a7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	; 0x28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a21      	ldr	r2, [pc, #132]	; (8000b20 <HAL_TIM_MspPostInit+0xa4>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d13b      	bne.n	8000b16 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	4b20      	ldr	r3, [pc, #128]	; (8000b24 <HAL_TIM_MspPostInit+0xa8>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a1f      	ldr	r2, [pc, #124]	; (8000b24 <HAL_TIM_MspPostInit+0xa8>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b1d      	ldr	r3, [pc, #116]	; (8000b24 <HAL_TIM_MspPostInit+0xa8>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <HAL_TIM_MspPostInit+0xa8>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a18      	ldr	r2, [pc, #96]	; (8000b24 <HAL_TIM_MspPostInit+0xa8>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <HAL_TIM_MspPostInit+0xa8>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ad6:	2340      	movs	r3, #64	; 0x40
 8000ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	480d      	ldr	r0, [pc, #52]	; (8000b28 <HAL_TIM_MspPostInit+0xac>)
 8000af2:	f000 facb 	bl	800108c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000af6:	2301      	movs	r3, #1
 8000af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afa:	2302      	movs	r3, #2
 8000afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b06:	2302      	movs	r3, #2
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4806      	ldr	r0, [pc, #24]	; (8000b2c <HAL_TIM_MspPostInit+0xb0>)
 8000b12:	f000 fabb 	bl	800108c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000b16:	bf00      	nop
 8000b18:	3728      	adds	r7, #40	; 0x28
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40000400 	.word	0x40000400
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40020000 	.word	0x40020000
 8000b2c:	40020400 	.word	0x40020400

08000b30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08c      	sub	sp, #48	; 0x30
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a32      	ldr	r2, [pc, #200]	; (8000c18 <HAL_UART_MspInit+0xe8>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d12c      	bne.n	8000bac <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	61bb      	str	r3, [r7, #24]
 8000b56:	4b31      	ldr	r3, [pc, #196]	; (8000c1c <HAL_UART_MspInit+0xec>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	4a30      	ldr	r2, [pc, #192]	; (8000c1c <HAL_UART_MspInit+0xec>)
 8000b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b60:	6413      	str	r3, [r2, #64]	; 0x40
 8000b62:	4b2e      	ldr	r3, [pc, #184]	; (8000c1c <HAL_UART_MspInit+0xec>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b6a:	61bb      	str	r3, [r7, #24]
 8000b6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
 8000b72:	4b2a      	ldr	r3, [pc, #168]	; (8000c1c <HAL_UART_MspInit+0xec>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a29      	ldr	r2, [pc, #164]	; (8000c1c <HAL_UART_MspInit+0xec>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b27      	ldr	r3, [pc, #156]	; (8000c1c <HAL_UART_MspInit+0xec>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b8a:	230c      	movs	r3, #12
 8000b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b9a:	2307      	movs	r3, #7
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9e:	f107 031c 	add.w	r3, r7, #28
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	481e      	ldr	r0, [pc, #120]	; (8000c20 <HAL_UART_MspInit+0xf0>)
 8000ba6:	f000 fa71 	bl	800108c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000baa:	e030      	b.n	8000c0e <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a1c      	ldr	r2, [pc, #112]	; (8000c24 <HAL_UART_MspInit+0xf4>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d12b      	bne.n	8000c0e <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <HAL_UART_MspInit+0xec>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbe:	4a17      	ldr	r2, [pc, #92]	; (8000c1c <HAL_UART_MspInit+0xec>)
 8000bc0:	f043 0320 	orr.w	r3, r3, #32
 8000bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <HAL_UART_MspInit+0xec>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	f003 0320 	and.w	r3, r3, #32
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <HAL_UART_MspInit+0xec>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a10      	ldr	r2, [pc, #64]	; (8000c1c <HAL_UART_MspInit+0xec>)
 8000bdc:	f043 0304 	orr.w	r3, r3, #4
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <HAL_UART_MspInit+0xec>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0304 	and.w	r3, r3, #4
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bee:	23c0      	movs	r3, #192	; 0xc0
 8000bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000bfe:	2308      	movs	r3, #8
 8000c00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c02:	f107 031c 	add.w	r3, r7, #28
 8000c06:	4619      	mov	r1, r3
 8000c08:	4807      	ldr	r0, [pc, #28]	; (8000c28 <HAL_UART_MspInit+0xf8>)
 8000c0a:	f000 fa3f 	bl	800108c <HAL_GPIO_Init>
}
 8000c0e:	bf00      	nop
 8000c10:	3730      	adds	r7, #48	; 0x30
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40004400 	.word	0x40004400
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020000 	.word	0x40020000
 8000c24:	40011400 	.word	0x40011400
 8000c28:	40020800 	.word	0x40020800

08000c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <NMI_Handler+0x4>

08000c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <HardFault_Handler+0x4>

08000c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <MemManage_Handler+0x4>

08000c3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <BusFault_Handler+0x4>

08000c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <UsageFault_Handler+0x4>

08000c4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c78:	f000 f8d6 	bl	8000e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RPM_TICK_Pin);
 8000c84:	2004      	movs	r0, #4
 8000c86:	f000 fbb9 	bl	80013fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c92:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c96:	f000 fbb1 	bl	80013fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca8:	4a14      	ldr	r2, [pc, #80]	; (8000cfc <_sbrk+0x5c>)
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <_sbrk+0x60>)
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb4:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <_sbrk+0x64>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d102      	bne.n	8000cc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cbc:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <_sbrk+0x64>)
 8000cbe:	4a12      	ldr	r2, [pc, #72]	; (8000d08 <_sbrk+0x68>)
 8000cc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cc2:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <_sbrk+0x64>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4413      	add	r3, r2
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d207      	bcs.n	8000ce0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cd0:	f002 fa4a 	bl	8003168 <__errno>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	220c      	movs	r2, #12
 8000cd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cda:	f04f 33ff 	mov.w	r3, #4294967295
 8000cde:	e009      	b.n	8000cf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <_sbrk+0x64>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ce6:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <_sbrk+0x64>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	4a05      	ldr	r2, [pc, #20]	; (8000d04 <_sbrk+0x64>)
 8000cf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20018000 	.word	0x20018000
 8000d00:	00000400 	.word	0x00000400
 8000d04:	2000014c 	.word	0x2000014c
 8000d08:	200002a0 	.word	0x200002a0

08000d0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <SystemInit+0x20>)
 8000d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d16:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <SystemInit+0x20>)
 8000d18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d34:	480d      	ldr	r0, [pc, #52]	; (8000d6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d36:	490e      	ldr	r1, [pc, #56]	; (8000d70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d38:	4a0e      	ldr	r2, [pc, #56]	; (8000d74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d3c:	e002      	b.n	8000d44 <LoopCopyDataInit>

08000d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d42:	3304      	adds	r3, #4

08000d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d48:	d3f9      	bcc.n	8000d3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4a:	4a0b      	ldr	r2, [pc, #44]	; (8000d78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d4c:	4c0b      	ldr	r4, [pc, #44]	; (8000d7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d50:	e001      	b.n	8000d56 <LoopFillZerobss>

08000d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d54:	3204      	adds	r2, #4

08000d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d58:	d3fb      	bcc.n	8000d52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d5a:	f7ff ffd7 	bl	8000d0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d5e:	f002 fa09 	bl	8003174 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d62:	f7ff fc13 	bl	800058c <main>
  bx  lr    
 8000d66:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d68:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d70:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d74:	08003ae4 	.word	0x08003ae4
  ldr r2, =_sbss
 8000d78:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d7c:	2000029c 	.word	0x2000029c

08000d80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d80:	e7fe      	b.n	8000d80 <ADC_IRQHandler>
	...

08000d84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d88:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <HAL_Init+0x40>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	; (8000dc4 <HAL_Init+0x40>)
 8000d8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d94:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <HAL_Init+0x40>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <HAL_Init+0x40>)
 8000d9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <HAL_Init+0x40>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a07      	ldr	r2, [pc, #28]	; (8000dc4 <HAL_Init+0x40>)
 8000da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000daa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dac:	2003      	movs	r0, #3
 8000dae:	f000 f92b 	bl	8001008 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000db2:	2000      	movs	r0, #0
 8000db4:	f000 f808 	bl	8000dc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db8:	f7ff fe16 	bl	80009e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40023c00 	.word	0x40023c00

08000dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <HAL_InitTick+0x54>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <HAL_InitTick+0x58>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 f943 	bl	8001072 <HAL_SYSTICK_Config>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00e      	b.n	8000e14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b0f      	cmp	r3, #15
 8000dfa:	d80a      	bhi.n	8000e12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295
 8000e04:	f000 f90b 	bl	800101e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e08:	4a06      	ldr	r2, [pc, #24]	; (8000e24 <HAL_InitTick+0x5c>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e000      	b.n	8000e14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000000 	.word	0x20000000
 8000e20:	20000008 	.word	0x20000008
 8000e24:	20000004 	.word	0x20000004

08000e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_IncTick+0x20>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_IncTick+0x24>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4413      	add	r3, r2
 8000e38:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <HAL_IncTick+0x24>)
 8000e3a:	6013      	str	r3, [r2, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	20000150 	.word	0x20000150

08000e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return uwTick;
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <HAL_GetTick+0x14>)
 8000e56:	681b      	ldr	r3, [r3, #0]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	20000150 	.word	0x20000150

08000e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e84:	4013      	ands	r3, r2
 8000e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9a:	4a04      	ldr	r2, [pc, #16]	; (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	60d3      	str	r3, [r2, #12]
}
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb4:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	f003 0307 	and.w	r3, r3, #7
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	db0b      	blt.n	8000ef6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	f003 021f 	and.w	r2, r3, #31
 8000ee4:	4907      	ldr	r1, [pc, #28]	; (8000f04 <__NVIC_EnableIRQ+0x38>)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	095b      	lsrs	r3, r3, #5
 8000eec:	2001      	movs	r0, #1
 8000eee:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000e100 	.word	0xe000e100

08000f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	db0a      	blt.n	8000f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	490c      	ldr	r1, [pc, #48]	; (8000f54 <__NVIC_SetPriority+0x4c>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	0112      	lsls	r2, r2, #4
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f30:	e00a      	b.n	8000f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4908      	ldr	r1, [pc, #32]	; (8000f58 <__NVIC_SetPriority+0x50>)
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	3b04      	subs	r3, #4
 8000f40:	0112      	lsls	r2, r2, #4
 8000f42:	b2d2      	uxtb	r2, r2
 8000f44:	440b      	add	r3, r1
 8000f46:	761a      	strb	r2, [r3, #24]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000e100 	.word	0xe000e100
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	; 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f1c3 0307 	rsb	r3, r3, #7
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	bf28      	it	cs
 8000f7a:	2304      	movcs	r3, #4
 8000f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3304      	adds	r3, #4
 8000f82:	2b06      	cmp	r3, #6
 8000f84:	d902      	bls.n	8000f8c <NVIC_EncodePriority+0x30>
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3b03      	subs	r3, #3
 8000f8a:	e000      	b.n	8000f8e <NVIC_EncodePriority+0x32>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	f04f 32ff 	mov.w	r2, #4294967295
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43da      	mvns	r2, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	43d9      	mvns	r1, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	4313      	orrs	r3, r2
         );
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3724      	adds	r7, #36	; 0x24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fd4:	d301      	bcc.n	8000fda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e00f      	b.n	8000ffa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fda:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <SysTick_Config+0x40>)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe2:	210f      	movs	r1, #15
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe8:	f7ff ff8e 	bl	8000f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <SysTick_Config+0x40>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff2:	4b04      	ldr	r3, [pc, #16]	; (8001004 <SysTick_Config+0x40>)
 8000ff4:	2207      	movs	r2, #7
 8000ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	e000e010 	.word	0xe000e010

08001008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff ff29 	bl	8000e68 <__NVIC_SetPriorityGrouping>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800101e:	b580      	push	{r7, lr}
 8001020:	b086      	sub	sp, #24
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	60b9      	str	r1, [r7, #8]
 8001028:	607a      	str	r2, [r7, #4]
 800102a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001030:	f7ff ff3e 	bl	8000eb0 <__NVIC_GetPriorityGrouping>
 8001034:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	68b9      	ldr	r1, [r7, #8]
 800103a:	6978      	ldr	r0, [r7, #20]
 800103c:	f7ff ff8e 	bl	8000f5c <NVIC_EncodePriority>
 8001040:	4602      	mov	r2, r0
 8001042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff5d 	bl	8000f08 <__NVIC_SetPriority>
}
 800104e:	bf00      	nop
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff31 	bl	8000ecc <__NVIC_EnableIRQ>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ffa2 	bl	8000fc4 <SysTick_Config>
 8001080:	4603      	mov	r3, r0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800108c:	b480      	push	{r7}
 800108e:	b089      	sub	sp, #36	; 0x24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800109e:	2300      	movs	r3, #0
 80010a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
 80010a6:	e159      	b.n	800135c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010a8:	2201      	movs	r2, #1
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	697a      	ldr	r2, [r7, #20]
 80010b8:	4013      	ands	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	f040 8148 	bne.w	8001356 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f003 0303 	and.w	r3, r3, #3
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d005      	beq.n	80010de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d130      	bne.n	8001140 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	2203      	movs	r2, #3
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4013      	ands	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	68da      	ldr	r2, [r3, #12]
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4313      	orrs	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001114:	2201      	movs	r2, #1
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	091b      	lsrs	r3, r3, #4
 800112a:	f003 0201 	and.w	r2, r3, #1
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	2b03      	cmp	r3, #3
 800114a:	d017      	beq.n	800117c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	2203      	movs	r2, #3
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	689a      	ldr	r2, [r3, #8]
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 0303 	and.w	r3, r3, #3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d123      	bne.n	80011d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	08da      	lsrs	r2, r3, #3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3208      	adds	r2, #8
 8001190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001194:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	f003 0307 	and.w	r3, r3, #7
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	220f      	movs	r2, #15
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	691a      	ldr	r2, [r3, #16]
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	08da      	lsrs	r2, r3, #3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	3208      	adds	r2, #8
 80011ca:	69b9      	ldr	r1, [r7, #24]
 80011cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	2203      	movs	r2, #3
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 0203 	and.w	r2, r3, #3
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800120c:	2b00      	cmp	r3, #0
 800120e:	f000 80a2 	beq.w	8001356 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	4b57      	ldr	r3, [pc, #348]	; (8001374 <HAL_GPIO_Init+0x2e8>)
 8001218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121a:	4a56      	ldr	r2, [pc, #344]	; (8001374 <HAL_GPIO_Init+0x2e8>)
 800121c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001220:	6453      	str	r3, [r2, #68]	; 0x44
 8001222:	4b54      	ldr	r3, [pc, #336]	; (8001374 <HAL_GPIO_Init+0x2e8>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800122e:	4a52      	ldr	r2, [pc, #328]	; (8001378 <HAL_GPIO_Init+0x2ec>)
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	089b      	lsrs	r3, r3, #2
 8001234:	3302      	adds	r3, #2
 8001236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800123a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f003 0303 	and.w	r3, r3, #3
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	220f      	movs	r2, #15
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a49      	ldr	r2, [pc, #292]	; (800137c <HAL_GPIO_Init+0x2f0>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d019      	beq.n	800128e <HAL_GPIO_Init+0x202>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a48      	ldr	r2, [pc, #288]	; (8001380 <HAL_GPIO_Init+0x2f4>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d013      	beq.n	800128a <HAL_GPIO_Init+0x1fe>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a47      	ldr	r2, [pc, #284]	; (8001384 <HAL_GPIO_Init+0x2f8>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d00d      	beq.n	8001286 <HAL_GPIO_Init+0x1fa>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a46      	ldr	r2, [pc, #280]	; (8001388 <HAL_GPIO_Init+0x2fc>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d007      	beq.n	8001282 <HAL_GPIO_Init+0x1f6>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a45      	ldr	r2, [pc, #276]	; (800138c <HAL_GPIO_Init+0x300>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d101      	bne.n	800127e <HAL_GPIO_Init+0x1f2>
 800127a:	2304      	movs	r3, #4
 800127c:	e008      	b.n	8001290 <HAL_GPIO_Init+0x204>
 800127e:	2307      	movs	r3, #7
 8001280:	e006      	b.n	8001290 <HAL_GPIO_Init+0x204>
 8001282:	2303      	movs	r3, #3
 8001284:	e004      	b.n	8001290 <HAL_GPIO_Init+0x204>
 8001286:	2302      	movs	r3, #2
 8001288:	e002      	b.n	8001290 <HAL_GPIO_Init+0x204>
 800128a:	2301      	movs	r3, #1
 800128c:	e000      	b.n	8001290 <HAL_GPIO_Init+0x204>
 800128e:	2300      	movs	r3, #0
 8001290:	69fa      	ldr	r2, [r7, #28]
 8001292:	f002 0203 	and.w	r2, r2, #3
 8001296:	0092      	lsls	r2, r2, #2
 8001298:	4093      	lsls	r3, r2
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012a0:	4935      	ldr	r1, [pc, #212]	; (8001378 <HAL_GPIO_Init+0x2ec>)
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	089b      	lsrs	r3, r3, #2
 80012a6:	3302      	adds	r3, #2
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ae:	4b38      	ldr	r3, [pc, #224]	; (8001390 <HAL_GPIO_Init+0x304>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012d2:	4a2f      	ldr	r2, [pc, #188]	; (8001390 <HAL_GPIO_Init+0x304>)
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012d8:	4b2d      	ldr	r3, [pc, #180]	; (8001390 <HAL_GPIO_Init+0x304>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d003      	beq.n	80012fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012fc:	4a24      	ldr	r2, [pc, #144]	; (8001390 <HAL_GPIO_Init+0x304>)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001302:	4b23      	ldr	r3, [pc, #140]	; (8001390 <HAL_GPIO_Init+0x304>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	43db      	mvns	r3, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4013      	ands	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001326:	4a1a      	ldr	r2, [pc, #104]	; (8001390 <HAL_GPIO_Init+0x304>)
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800132c:	4b18      	ldr	r3, [pc, #96]	; (8001390 <HAL_GPIO_Init+0x304>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	43db      	mvns	r3, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001350:	4a0f      	ldr	r2, [pc, #60]	; (8001390 <HAL_GPIO_Init+0x304>)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3301      	adds	r3, #1
 800135a:	61fb      	str	r3, [r7, #28]
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	2b0f      	cmp	r3, #15
 8001360:	f67f aea2 	bls.w	80010a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001364:	bf00      	nop
 8001366:	bf00      	nop
 8001368:	3724      	adds	r7, #36	; 0x24
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800
 8001378:	40013800 	.word	0x40013800
 800137c:	40020000 	.word	0x40020000
 8001380:	40020400 	.word	0x40020400
 8001384:	40020800 	.word	0x40020800
 8001388:	40020c00 	.word	0x40020c00
 800138c:	40021000 	.word	0x40021000
 8001390:	40013c00 	.word	0x40013c00

08001394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	807b      	strh	r3, [r7, #2]
 80013a0:	4613      	mov	r3, r2
 80013a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013a4:	787b      	ldrb	r3, [r7, #1]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013aa:	887a      	ldrh	r2, [r7, #2]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013b0:	e003      	b.n	80013ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013b2:	887b      	ldrh	r3, [r7, #2]
 80013b4:	041a      	lsls	r2, r3, #16
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	619a      	str	r2, [r3, #24]
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b085      	sub	sp, #20
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
 80013ce:	460b      	mov	r3, r1
 80013d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013d8:	887a      	ldrh	r2, [r7, #2]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4013      	ands	r3, r2
 80013de:	041a      	lsls	r2, r3, #16
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	43d9      	mvns	r1, r3
 80013e4:	887b      	ldrh	r3, [r7, #2]
 80013e6:	400b      	ands	r3, r1
 80013e8:	431a      	orrs	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	619a      	str	r2, [r3, #24]
}
 80013ee:	bf00      	nop
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001408:	695a      	ldr	r2, [r3, #20]
 800140a:	88fb      	ldrh	r3, [r7, #6]
 800140c:	4013      	ands	r3, r2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d006      	beq.n	8001420 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001412:	4a05      	ldr	r2, [pc, #20]	; (8001428 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001414:	88fb      	ldrh	r3, [r7, #6]
 8001416:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001418:	88fb      	ldrh	r3, [r7, #6]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff fac4 	bl	80009a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40013c00 	.word	0x40013c00

0800142c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d101      	bne.n	800143e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e267      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	2b00      	cmp	r3, #0
 8001448:	d075      	beq.n	8001536 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800144a:	4b88      	ldr	r3, [pc, #544]	; (800166c <HAL_RCC_OscConfig+0x240>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 030c 	and.w	r3, r3, #12
 8001452:	2b04      	cmp	r3, #4
 8001454:	d00c      	beq.n	8001470 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001456:	4b85      	ldr	r3, [pc, #532]	; (800166c <HAL_RCC_OscConfig+0x240>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800145e:	2b08      	cmp	r3, #8
 8001460:	d112      	bne.n	8001488 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001462:	4b82      	ldr	r3, [pc, #520]	; (800166c <HAL_RCC_OscConfig+0x240>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800146a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800146e:	d10b      	bne.n	8001488 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001470:	4b7e      	ldr	r3, [pc, #504]	; (800166c <HAL_RCC_OscConfig+0x240>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d05b      	beq.n	8001534 <HAL_RCC_OscConfig+0x108>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d157      	bne.n	8001534 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e242      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001490:	d106      	bne.n	80014a0 <HAL_RCC_OscConfig+0x74>
 8001492:	4b76      	ldr	r3, [pc, #472]	; (800166c <HAL_RCC_OscConfig+0x240>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a75      	ldr	r2, [pc, #468]	; (800166c <HAL_RCC_OscConfig+0x240>)
 8001498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	e01d      	b.n	80014dc <HAL_RCC_OscConfig+0xb0>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014a8:	d10c      	bne.n	80014c4 <HAL_RCC_OscConfig+0x98>
 80014aa:	4b70      	ldr	r3, [pc, #448]	; (800166c <HAL_RCC_OscConfig+0x240>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a6f      	ldr	r2, [pc, #444]	; (800166c <HAL_RCC_OscConfig+0x240>)
 80014b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014b4:	6013      	str	r3, [r2, #0]
 80014b6:	4b6d      	ldr	r3, [pc, #436]	; (800166c <HAL_RCC_OscConfig+0x240>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a6c      	ldr	r2, [pc, #432]	; (800166c <HAL_RCC_OscConfig+0x240>)
 80014bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	e00b      	b.n	80014dc <HAL_RCC_OscConfig+0xb0>
 80014c4:	4b69      	ldr	r3, [pc, #420]	; (800166c <HAL_RCC_OscConfig+0x240>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a68      	ldr	r2, [pc, #416]	; (800166c <HAL_RCC_OscConfig+0x240>)
 80014ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	4b66      	ldr	r3, [pc, #408]	; (800166c <HAL_RCC_OscConfig+0x240>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a65      	ldr	r2, [pc, #404]	; (800166c <HAL_RCC_OscConfig+0x240>)
 80014d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d013      	beq.n	800150c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e4:	f7ff fcb4 	bl	8000e50 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014ec:	f7ff fcb0 	bl	8000e50 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b64      	cmp	r3, #100	; 0x64
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e207      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fe:	4b5b      	ldr	r3, [pc, #364]	; (800166c <HAL_RCC_OscConfig+0x240>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0f0      	beq.n	80014ec <HAL_RCC_OscConfig+0xc0>
 800150a:	e014      	b.n	8001536 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150c:	f7ff fca0 	bl	8000e50 <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001514:	f7ff fc9c 	bl	8000e50 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b64      	cmp	r3, #100	; 0x64
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e1f3      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001526:	4b51      	ldr	r3, [pc, #324]	; (800166c <HAL_RCC_OscConfig+0x240>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f0      	bne.n	8001514 <HAL_RCC_OscConfig+0xe8>
 8001532:	e000      	b.n	8001536 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d063      	beq.n	800160a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001542:	4b4a      	ldr	r3, [pc, #296]	; (800166c <HAL_RCC_OscConfig+0x240>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 030c 	and.w	r3, r3, #12
 800154a:	2b00      	cmp	r3, #0
 800154c:	d00b      	beq.n	8001566 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800154e:	4b47      	ldr	r3, [pc, #284]	; (800166c <HAL_RCC_OscConfig+0x240>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001556:	2b08      	cmp	r3, #8
 8001558:	d11c      	bne.n	8001594 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800155a:	4b44      	ldr	r3, [pc, #272]	; (800166c <HAL_RCC_OscConfig+0x240>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d116      	bne.n	8001594 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001566:	4b41      	ldr	r3, [pc, #260]	; (800166c <HAL_RCC_OscConfig+0x240>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d005      	beq.n	800157e <HAL_RCC_OscConfig+0x152>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d001      	beq.n	800157e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e1c7      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157e:	4b3b      	ldr	r3, [pc, #236]	; (800166c <HAL_RCC_OscConfig+0x240>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	4937      	ldr	r1, [pc, #220]	; (800166c <HAL_RCC_OscConfig+0x240>)
 800158e:	4313      	orrs	r3, r2
 8001590:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001592:	e03a      	b.n	800160a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d020      	beq.n	80015de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800159c:	4b34      	ldr	r3, [pc, #208]	; (8001670 <HAL_RCC_OscConfig+0x244>)
 800159e:	2201      	movs	r2, #1
 80015a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a2:	f7ff fc55 	bl	8000e50 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015aa:	f7ff fc51 	bl	8000e50 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e1a8      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015bc:	4b2b      	ldr	r3, [pc, #172]	; (800166c <HAL_RCC_OscConfig+0x240>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0f0      	beq.n	80015aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c8:	4b28      	ldr	r3, [pc, #160]	; (800166c <HAL_RCC_OscConfig+0x240>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	4925      	ldr	r1, [pc, #148]	; (800166c <HAL_RCC_OscConfig+0x240>)
 80015d8:	4313      	orrs	r3, r2
 80015da:	600b      	str	r3, [r1, #0]
 80015dc:	e015      	b.n	800160a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015de:	4b24      	ldr	r3, [pc, #144]	; (8001670 <HAL_RCC_OscConfig+0x244>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e4:	f7ff fc34 	bl	8000e50 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ec:	f7ff fc30 	bl	8000e50 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e187      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015fe:	4b1b      	ldr	r3, [pc, #108]	; (800166c <HAL_RCC_OscConfig+0x240>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1f0      	bne.n	80015ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	2b00      	cmp	r3, #0
 8001614:	d036      	beq.n	8001684 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d016      	beq.n	800164c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800161e:	4b15      	ldr	r3, [pc, #84]	; (8001674 <HAL_RCC_OscConfig+0x248>)
 8001620:	2201      	movs	r2, #1
 8001622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001624:	f7ff fc14 	bl	8000e50 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800162c:	f7ff fc10 	bl	8000e50 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e167      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800163e:	4b0b      	ldr	r3, [pc, #44]	; (800166c <HAL_RCC_OscConfig+0x240>)
 8001640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0f0      	beq.n	800162c <HAL_RCC_OscConfig+0x200>
 800164a:	e01b      	b.n	8001684 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800164c:	4b09      	ldr	r3, [pc, #36]	; (8001674 <HAL_RCC_OscConfig+0x248>)
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001652:	f7ff fbfd 	bl	8000e50 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001658:	e00e      	b.n	8001678 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800165a:	f7ff fbf9 	bl	8000e50 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d907      	bls.n	8001678 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e150      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
 800166c:	40023800 	.word	0x40023800
 8001670:	42470000 	.word	0x42470000
 8001674:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001678:	4b88      	ldr	r3, [pc, #544]	; (800189c <HAL_RCC_OscConfig+0x470>)
 800167a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1ea      	bne.n	800165a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 8097 	beq.w	80017c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001692:	2300      	movs	r3, #0
 8001694:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001696:	4b81      	ldr	r3, [pc, #516]	; (800189c <HAL_RCC_OscConfig+0x470>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10f      	bne.n	80016c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	4b7d      	ldr	r3, [pc, #500]	; (800189c <HAL_RCC_OscConfig+0x470>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	4a7c      	ldr	r2, [pc, #496]	; (800189c <HAL_RCC_OscConfig+0x470>)
 80016ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b0:	6413      	str	r3, [r2, #64]	; 0x40
 80016b2:	4b7a      	ldr	r3, [pc, #488]	; (800189c <HAL_RCC_OscConfig+0x470>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016be:	2301      	movs	r3, #1
 80016c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c2:	4b77      	ldr	r3, [pc, #476]	; (80018a0 <HAL_RCC_OscConfig+0x474>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d118      	bne.n	8001700 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ce:	4b74      	ldr	r3, [pc, #464]	; (80018a0 <HAL_RCC_OscConfig+0x474>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a73      	ldr	r2, [pc, #460]	; (80018a0 <HAL_RCC_OscConfig+0x474>)
 80016d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016da:	f7ff fbb9 	bl	8000e50 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e2:	f7ff fbb5 	bl	8000e50 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e10c      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f4:	4b6a      	ldr	r3, [pc, #424]	; (80018a0 <HAL_RCC_OscConfig+0x474>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0f0      	beq.n	80016e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d106      	bne.n	8001716 <HAL_RCC_OscConfig+0x2ea>
 8001708:	4b64      	ldr	r3, [pc, #400]	; (800189c <HAL_RCC_OscConfig+0x470>)
 800170a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800170c:	4a63      	ldr	r2, [pc, #396]	; (800189c <HAL_RCC_OscConfig+0x470>)
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	6713      	str	r3, [r2, #112]	; 0x70
 8001714:	e01c      	b.n	8001750 <HAL_RCC_OscConfig+0x324>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	2b05      	cmp	r3, #5
 800171c:	d10c      	bne.n	8001738 <HAL_RCC_OscConfig+0x30c>
 800171e:	4b5f      	ldr	r3, [pc, #380]	; (800189c <HAL_RCC_OscConfig+0x470>)
 8001720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001722:	4a5e      	ldr	r2, [pc, #376]	; (800189c <HAL_RCC_OscConfig+0x470>)
 8001724:	f043 0304 	orr.w	r3, r3, #4
 8001728:	6713      	str	r3, [r2, #112]	; 0x70
 800172a:	4b5c      	ldr	r3, [pc, #368]	; (800189c <HAL_RCC_OscConfig+0x470>)
 800172c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172e:	4a5b      	ldr	r2, [pc, #364]	; (800189c <HAL_RCC_OscConfig+0x470>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6713      	str	r3, [r2, #112]	; 0x70
 8001736:	e00b      	b.n	8001750 <HAL_RCC_OscConfig+0x324>
 8001738:	4b58      	ldr	r3, [pc, #352]	; (800189c <HAL_RCC_OscConfig+0x470>)
 800173a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800173c:	4a57      	ldr	r2, [pc, #348]	; (800189c <HAL_RCC_OscConfig+0x470>)
 800173e:	f023 0301 	bic.w	r3, r3, #1
 8001742:	6713      	str	r3, [r2, #112]	; 0x70
 8001744:	4b55      	ldr	r3, [pc, #340]	; (800189c <HAL_RCC_OscConfig+0x470>)
 8001746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001748:	4a54      	ldr	r2, [pc, #336]	; (800189c <HAL_RCC_OscConfig+0x470>)
 800174a:	f023 0304 	bic.w	r3, r3, #4
 800174e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d015      	beq.n	8001784 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001758:	f7ff fb7a 	bl	8000e50 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800175e:	e00a      	b.n	8001776 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001760:	f7ff fb76 	bl	8000e50 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	f241 3288 	movw	r2, #5000	; 0x1388
 800176e:	4293      	cmp	r3, r2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e0cb      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001776:	4b49      	ldr	r3, [pc, #292]	; (800189c <HAL_RCC_OscConfig+0x470>)
 8001778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d0ee      	beq.n	8001760 <HAL_RCC_OscConfig+0x334>
 8001782:	e014      	b.n	80017ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001784:	f7ff fb64 	bl	8000e50 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800178a:	e00a      	b.n	80017a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800178c:	f7ff fb60 	bl	8000e50 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	f241 3288 	movw	r2, #5000	; 0x1388
 800179a:	4293      	cmp	r3, r2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e0b5      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a2:	4b3e      	ldr	r3, [pc, #248]	; (800189c <HAL_RCC_OscConfig+0x470>)
 80017a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1ee      	bne.n	800178c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017ae:	7dfb      	ldrb	r3, [r7, #23]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d105      	bne.n	80017c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017b4:	4b39      	ldr	r3, [pc, #228]	; (800189c <HAL_RCC_OscConfig+0x470>)
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	4a38      	ldr	r2, [pc, #224]	; (800189c <HAL_RCC_OscConfig+0x470>)
 80017ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f000 80a1 	beq.w	800190c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017ca:	4b34      	ldr	r3, [pc, #208]	; (800189c <HAL_RCC_OscConfig+0x470>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 030c 	and.w	r3, r3, #12
 80017d2:	2b08      	cmp	r3, #8
 80017d4:	d05c      	beq.n	8001890 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d141      	bne.n	8001862 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017de:	4b31      	ldr	r3, [pc, #196]	; (80018a4 <HAL_RCC_OscConfig+0x478>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e4:	f7ff fb34 	bl	8000e50 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ec:	f7ff fb30 	bl	8000e50 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e087      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fe:	4b27      	ldr	r3, [pc, #156]	; (800189c <HAL_RCC_OscConfig+0x470>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f0      	bne.n	80017ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69da      	ldr	r2, [r3, #28]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a1b      	ldr	r3, [r3, #32]
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001818:	019b      	lsls	r3, r3, #6
 800181a:	431a      	orrs	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001820:	085b      	lsrs	r3, r3, #1
 8001822:	3b01      	subs	r3, #1
 8001824:	041b      	lsls	r3, r3, #16
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182c:	061b      	lsls	r3, r3, #24
 800182e:	491b      	ldr	r1, [pc, #108]	; (800189c <HAL_RCC_OscConfig+0x470>)
 8001830:	4313      	orrs	r3, r2
 8001832:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001834:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <HAL_RCC_OscConfig+0x478>)
 8001836:	2201      	movs	r2, #1
 8001838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183a:	f7ff fb09 	bl	8000e50 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001842:	f7ff fb05 	bl	8000e50 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e05c      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001854:	4b11      	ldr	r3, [pc, #68]	; (800189c <HAL_RCC_OscConfig+0x470>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0f0      	beq.n	8001842 <HAL_RCC_OscConfig+0x416>
 8001860:	e054      	b.n	800190c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001862:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <HAL_RCC_OscConfig+0x478>)
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001868:	f7ff faf2 	bl	8000e50 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001870:	f7ff faee 	bl	8000e50 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e045      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_RCC_OscConfig+0x470>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f0      	bne.n	8001870 <HAL_RCC_OscConfig+0x444>
 800188e:	e03d      	b.n	800190c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d107      	bne.n	80018a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e038      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
 800189c:	40023800 	.word	0x40023800
 80018a0:	40007000 	.word	0x40007000
 80018a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018a8:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <HAL_RCC_OscConfig+0x4ec>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d028      	beq.n	8001908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d121      	bne.n	8001908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d11a      	bne.n	8001908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018d8:	4013      	ands	r3, r2
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d111      	bne.n	8001908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ee:	085b      	lsrs	r3, r3, #1
 80018f0:	3b01      	subs	r3, #1
 80018f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d107      	bne.n	8001908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001902:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001904:	429a      	cmp	r2, r3
 8001906:	d001      	beq.n	800190c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e000      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800

0800191c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e0cc      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001930:	4b68      	ldr	r3, [pc, #416]	; (8001ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	429a      	cmp	r2, r3
 800193c:	d90c      	bls.n	8001958 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193e:	4b65      	ldr	r3, [pc, #404]	; (8001ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001946:	4b63      	ldr	r3, [pc, #396]	; (8001ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	429a      	cmp	r2, r3
 8001952:	d001      	beq.n	8001958 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e0b8      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d020      	beq.n	80019a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	d005      	beq.n	800197c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001970:	4b59      	ldr	r3, [pc, #356]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	4a58      	ldr	r2, [pc, #352]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800197a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0308 	and.w	r3, r3, #8
 8001984:	2b00      	cmp	r3, #0
 8001986:	d005      	beq.n	8001994 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001988:	4b53      	ldr	r3, [pc, #332]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	4a52      	ldr	r2, [pc, #328]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001992:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001994:	4b50      	ldr	r3, [pc, #320]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	494d      	ldr	r1, [pc, #308]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d044      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d107      	bne.n	80019ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ba:	4b47      	ldr	r3, [pc, #284]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d119      	bne.n	80019fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e07f      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d003      	beq.n	80019da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019d6:	2b03      	cmp	r3, #3
 80019d8:	d107      	bne.n	80019ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019da:	4b3f      	ldr	r3, [pc, #252]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d109      	bne.n	80019fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e06f      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ea:	4b3b      	ldr	r3, [pc, #236]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e067      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019fa:	4b37      	ldr	r3, [pc, #220]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f023 0203 	bic.w	r2, r3, #3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	4934      	ldr	r1, [pc, #208]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a0c:	f7ff fa20 	bl	8000e50 <HAL_GetTick>
 8001a10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a12:	e00a      	b.n	8001a2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a14:	f7ff fa1c 	bl	8000e50 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e04f      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a2a:	4b2b      	ldr	r3, [pc, #172]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 020c 	and.w	r2, r3, #12
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d1eb      	bne.n	8001a14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a3c:	4b25      	ldr	r3, [pc, #148]	; (8001ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d20c      	bcs.n	8001a64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4a:	4b22      	ldr	r3, [pc, #136]	; (8001ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a52:	4b20      	ldr	r3, [pc, #128]	; (8001ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d001      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e032      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d008      	beq.n	8001a82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a70:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	4916      	ldr	r1, [pc, #88]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0308 	and.w	r3, r3, #8
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d009      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a8e:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	490e      	ldr	r1, [pc, #56]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001aa2:	f000 f821 	bl	8001ae8 <HAL_RCC_GetSysClockFreq>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	091b      	lsrs	r3, r3, #4
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	490a      	ldr	r1, [pc, #40]	; (8001adc <HAL_RCC_ClockConfig+0x1c0>)
 8001ab4:	5ccb      	ldrb	r3, [r1, r3]
 8001ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aba:	4a09      	ldr	r2, [pc, #36]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8001abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001abe:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff f980 	bl	8000dc8 <HAL_InitTick>

  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40023c00 	.word	0x40023c00
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	08003a88 	.word	0x08003a88
 8001ae0:	20000000 	.word	0x20000000
 8001ae4:	20000004 	.word	0x20000004

08001ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001aec:	b094      	sub	sp, #80	; 0x50
 8001aee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	647b      	str	r3, [r7, #68]	; 0x44
 8001af4:	2300      	movs	r3, #0
 8001af6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001af8:	2300      	movs	r3, #0
 8001afa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b00:	4b79      	ldr	r3, [pc, #484]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 030c 	and.w	r3, r3, #12
 8001b08:	2b08      	cmp	r3, #8
 8001b0a:	d00d      	beq.n	8001b28 <HAL_RCC_GetSysClockFreq+0x40>
 8001b0c:	2b08      	cmp	r3, #8
 8001b0e:	f200 80e1 	bhi.w	8001cd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d002      	beq.n	8001b1c <HAL_RCC_GetSysClockFreq+0x34>
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	d003      	beq.n	8001b22 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b1a:	e0db      	b.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b1c:	4b73      	ldr	r3, [pc, #460]	; (8001cec <HAL_RCC_GetSysClockFreq+0x204>)
 8001b1e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b20:	e0db      	b.n	8001cda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b22:	4b73      	ldr	r3, [pc, #460]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b26:	e0d8      	b.n	8001cda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b28:	4b6f      	ldr	r3, [pc, #444]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b30:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b32:	4b6d      	ldr	r3, [pc, #436]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d063      	beq.n	8001c06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b3e:	4b6a      	ldr	r3, [pc, #424]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	099b      	lsrs	r3, r3, #6
 8001b44:	2200      	movs	r2, #0
 8001b46:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b50:	633b      	str	r3, [r7, #48]	; 0x30
 8001b52:	2300      	movs	r3, #0
 8001b54:	637b      	str	r3, [r7, #52]	; 0x34
 8001b56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b5a:	4622      	mov	r2, r4
 8001b5c:	462b      	mov	r3, r5
 8001b5e:	f04f 0000 	mov.w	r0, #0
 8001b62:	f04f 0100 	mov.w	r1, #0
 8001b66:	0159      	lsls	r1, r3, #5
 8001b68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b6c:	0150      	lsls	r0, r2, #5
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	4621      	mov	r1, r4
 8001b74:	1a51      	subs	r1, r2, r1
 8001b76:	6139      	str	r1, [r7, #16]
 8001b78:	4629      	mov	r1, r5
 8001b7a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b8c:	4659      	mov	r1, fp
 8001b8e:	018b      	lsls	r3, r1, #6
 8001b90:	4651      	mov	r1, sl
 8001b92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b96:	4651      	mov	r1, sl
 8001b98:	018a      	lsls	r2, r1, #6
 8001b9a:	4651      	mov	r1, sl
 8001b9c:	ebb2 0801 	subs.w	r8, r2, r1
 8001ba0:	4659      	mov	r1, fp
 8001ba2:	eb63 0901 	sbc.w	r9, r3, r1
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	f04f 0300 	mov.w	r3, #0
 8001bae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bba:	4690      	mov	r8, r2
 8001bbc:	4699      	mov	r9, r3
 8001bbe:	4623      	mov	r3, r4
 8001bc0:	eb18 0303 	adds.w	r3, r8, r3
 8001bc4:	60bb      	str	r3, [r7, #8]
 8001bc6:	462b      	mov	r3, r5
 8001bc8:	eb49 0303 	adc.w	r3, r9, r3
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	f04f 0300 	mov.w	r3, #0
 8001bd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bda:	4629      	mov	r1, r5
 8001bdc:	024b      	lsls	r3, r1, #9
 8001bde:	4621      	mov	r1, r4
 8001be0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001be4:	4621      	mov	r1, r4
 8001be6:	024a      	lsls	r2, r1, #9
 8001be8:	4610      	mov	r0, r2
 8001bea:	4619      	mov	r1, r3
 8001bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bee:	2200      	movs	r2, #0
 8001bf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bf4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001bf8:	f7fe fb4a 	bl	8000290 <__aeabi_uldivmod>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4613      	mov	r3, r2
 8001c02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c04:	e058      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c06:	4b38      	ldr	r3, [pc, #224]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	099b      	lsrs	r3, r3, #6
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	4618      	mov	r0, r3
 8001c10:	4611      	mov	r1, r2
 8001c12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c16:	623b      	str	r3, [r7, #32]
 8001c18:	2300      	movs	r3, #0
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c20:	4642      	mov	r2, r8
 8001c22:	464b      	mov	r3, r9
 8001c24:	f04f 0000 	mov.w	r0, #0
 8001c28:	f04f 0100 	mov.w	r1, #0
 8001c2c:	0159      	lsls	r1, r3, #5
 8001c2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c32:	0150      	lsls	r0, r2, #5
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4641      	mov	r1, r8
 8001c3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c3e:	4649      	mov	r1, r9
 8001c40:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c44:	f04f 0200 	mov.w	r2, #0
 8001c48:	f04f 0300 	mov.w	r3, #0
 8001c4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c58:	ebb2 040a 	subs.w	r4, r2, sl
 8001c5c:	eb63 050b 	sbc.w	r5, r3, fp
 8001c60:	f04f 0200 	mov.w	r2, #0
 8001c64:	f04f 0300 	mov.w	r3, #0
 8001c68:	00eb      	lsls	r3, r5, #3
 8001c6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c6e:	00e2      	lsls	r2, r4, #3
 8001c70:	4614      	mov	r4, r2
 8001c72:	461d      	mov	r5, r3
 8001c74:	4643      	mov	r3, r8
 8001c76:	18e3      	adds	r3, r4, r3
 8001c78:	603b      	str	r3, [r7, #0]
 8001c7a:	464b      	mov	r3, r9
 8001c7c:	eb45 0303 	adc.w	r3, r5, r3
 8001c80:	607b      	str	r3, [r7, #4]
 8001c82:	f04f 0200 	mov.w	r2, #0
 8001c86:	f04f 0300 	mov.w	r3, #0
 8001c8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c8e:	4629      	mov	r1, r5
 8001c90:	028b      	lsls	r3, r1, #10
 8001c92:	4621      	mov	r1, r4
 8001c94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c98:	4621      	mov	r1, r4
 8001c9a:	028a      	lsls	r2, r1, #10
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	61bb      	str	r3, [r7, #24]
 8001ca6:	61fa      	str	r2, [r7, #28]
 8001ca8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cac:	f7fe faf0 	bl	8000290 <__aeabi_uldivmod>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	0c1b      	lsrs	r3, r3, #16
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001cc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cd2:	e002      	b.n	8001cda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cd4:	4b05      	ldr	r3, [pc, #20]	; (8001cec <HAL_RCC_GetSysClockFreq+0x204>)
 8001cd6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3750      	adds	r7, #80	; 0x50
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	00f42400 	.word	0x00f42400
 8001cf0:	007a1200 	.word	0x007a1200

08001cf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cf8:	4b03      	ldr	r3, [pc, #12]	; (8001d08 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	20000000 	.word	0x20000000

08001d0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d10:	f7ff fff0 	bl	8001cf4 <HAL_RCC_GetHCLKFreq>
 8001d14:	4602      	mov	r2, r0
 8001d16:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	0a9b      	lsrs	r3, r3, #10
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	4903      	ldr	r1, [pc, #12]	; (8001d30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d22:	5ccb      	ldrb	r3, [r1, r3]
 8001d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	08003a98 	.word	0x08003a98

08001d34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d38:	f7ff ffdc 	bl	8001cf4 <HAL_RCC_GetHCLKFreq>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	0b5b      	lsrs	r3, r3, #13
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	4903      	ldr	r1, [pc, #12]	; (8001d58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d4a:	5ccb      	ldrb	r3, [r1, r3]
 8001d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40023800 	.word	0x40023800
 8001d58:	08003a98 	.word	0x08003a98

08001d5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e041      	b.n	8001df2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d106      	bne.n	8001d88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7fe fe58 	bl	8000a38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3304      	adds	r3, #4
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	f000 fac0 	bl	8002320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e041      	b.n	8001e90 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d106      	bne.n	8001e26 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f839 	bl	8001e98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2202      	movs	r2, #2
 8001e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	3304      	adds	r3, #4
 8001e36:	4619      	mov	r1, r3
 8001e38:	4610      	mov	r0, r2
 8001e3a:	f000 fa71 	bl	8002320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d109      	bne.n	8001ed0 <HAL_TIM_PWM_Start+0x24>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	bf14      	ite	ne
 8001ec8:	2301      	movne	r3, #1
 8001eca:	2300      	moveq	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	e022      	b.n	8001f16 <HAL_TIM_PWM_Start+0x6a>
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	d109      	bne.n	8001eea <HAL_TIM_PWM_Start+0x3e>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	bf14      	ite	ne
 8001ee2:	2301      	movne	r3, #1
 8001ee4:	2300      	moveq	r3, #0
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	e015      	b.n	8001f16 <HAL_TIM_PWM_Start+0x6a>
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	2b08      	cmp	r3, #8
 8001eee:	d109      	bne.n	8001f04 <HAL_TIM_PWM_Start+0x58>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	bf14      	ite	ne
 8001efc:	2301      	movne	r3, #1
 8001efe:	2300      	moveq	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	e008      	b.n	8001f16 <HAL_TIM_PWM_Start+0x6a>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	bf14      	ite	ne
 8001f10:	2301      	movne	r3, #1
 8001f12:	2300      	moveq	r3, #0
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e068      	b.n	8001ff0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d104      	bne.n	8001f2e <HAL_TIM_PWM_Start+0x82>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2202      	movs	r2, #2
 8001f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f2c:	e013      	b.n	8001f56 <HAL_TIM_PWM_Start+0xaa>
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	2b04      	cmp	r3, #4
 8001f32:	d104      	bne.n	8001f3e <HAL_TIM_PWM_Start+0x92>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2202      	movs	r2, #2
 8001f38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f3c:	e00b      	b.n	8001f56 <HAL_TIM_PWM_Start+0xaa>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	2b08      	cmp	r3, #8
 8001f42:	d104      	bne.n	8001f4e <HAL_TIM_PWM_Start+0xa2>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2202      	movs	r2, #2
 8001f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f4c:	e003      	b.n	8001f56 <HAL_TIM_PWM_Start+0xaa>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2202      	movs	r2, #2
 8001f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	6839      	ldr	r1, [r7, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f000 fc84 	bl	800286c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a23      	ldr	r2, [pc, #140]	; (8001ff8 <HAL_TIM_PWM_Start+0x14c>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d107      	bne.n	8001f7e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a1d      	ldr	r2, [pc, #116]	; (8001ff8 <HAL_TIM_PWM_Start+0x14c>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d018      	beq.n	8001fba <HAL_TIM_PWM_Start+0x10e>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f90:	d013      	beq.n	8001fba <HAL_TIM_PWM_Start+0x10e>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a19      	ldr	r2, [pc, #100]	; (8001ffc <HAL_TIM_PWM_Start+0x150>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d00e      	beq.n	8001fba <HAL_TIM_PWM_Start+0x10e>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a17      	ldr	r2, [pc, #92]	; (8002000 <HAL_TIM_PWM_Start+0x154>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d009      	beq.n	8001fba <HAL_TIM_PWM_Start+0x10e>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a16      	ldr	r2, [pc, #88]	; (8002004 <HAL_TIM_PWM_Start+0x158>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d004      	beq.n	8001fba <HAL_TIM_PWM_Start+0x10e>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a14      	ldr	r2, [pc, #80]	; (8002008 <HAL_TIM_PWM_Start+0x15c>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d111      	bne.n	8001fde <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2b06      	cmp	r3, #6
 8001fca:	d010      	beq.n	8001fee <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0201 	orr.w	r2, r2, #1
 8001fda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fdc:	e007      	b.n	8001fee <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f042 0201 	orr.w	r2, r2, #1
 8001fec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40010000 	.word	0x40010000
 8001ffc:	40000400 	.word	0x40000400
 8002000:	40000800 	.word	0x40000800
 8002004:	40000c00 	.word	0x40000c00
 8002008:	40014000 	.word	0x40014000

0800200c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002018:	2300      	movs	r3, #0
 800201a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002022:	2b01      	cmp	r3, #1
 8002024:	d101      	bne.n	800202a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002026:	2302      	movs	r3, #2
 8002028:	e0ae      	b.n	8002188 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b0c      	cmp	r3, #12
 8002036:	f200 809f 	bhi.w	8002178 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800203a:	a201      	add	r2, pc, #4	; (adr r2, 8002040 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800203c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002040:	08002075 	.word	0x08002075
 8002044:	08002179 	.word	0x08002179
 8002048:	08002179 	.word	0x08002179
 800204c:	08002179 	.word	0x08002179
 8002050:	080020b5 	.word	0x080020b5
 8002054:	08002179 	.word	0x08002179
 8002058:	08002179 	.word	0x08002179
 800205c:	08002179 	.word	0x08002179
 8002060:	080020f7 	.word	0x080020f7
 8002064:	08002179 	.word	0x08002179
 8002068:	08002179 	.word	0x08002179
 800206c:	08002179 	.word	0x08002179
 8002070:	08002137 	.word	0x08002137
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68b9      	ldr	r1, [r7, #8]
 800207a:	4618      	mov	r0, r3
 800207c:	f000 f9d0 	bl	8002420 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	699a      	ldr	r2, [r3, #24]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0208 	orr.w	r2, r2, #8
 800208e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	699a      	ldr	r2, [r3, #24]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 0204 	bic.w	r2, r2, #4
 800209e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6999      	ldr	r1, [r3, #24]
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	691a      	ldr	r2, [r3, #16]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	619a      	str	r2, [r3, #24]
      break;
 80020b2:	e064      	b.n	800217e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68b9      	ldr	r1, [r7, #8]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f000 fa16 	bl	80024ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	699a      	ldr	r2, [r3, #24]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	699a      	ldr	r2, [r3, #24]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6999      	ldr	r1, [r3, #24]
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	021a      	lsls	r2, r3, #8
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	619a      	str	r2, [r3, #24]
      break;
 80020f4:	e043      	b.n	800217e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68b9      	ldr	r1, [r7, #8]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f000 fa61 	bl	80025c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	69da      	ldr	r2, [r3, #28]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f042 0208 	orr.w	r2, r2, #8
 8002110:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	69da      	ldr	r2, [r3, #28]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0204 	bic.w	r2, r2, #4
 8002120:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	69d9      	ldr	r1, [r3, #28]
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	691a      	ldr	r2, [r3, #16]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	61da      	str	r2, [r3, #28]
      break;
 8002134:	e023      	b.n	800217e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68b9      	ldr	r1, [r7, #8]
 800213c:	4618      	mov	r0, r3
 800213e:	f000 faab 	bl	8002698 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	69da      	ldr	r2, [r3, #28]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002150:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	69da      	ldr	r2, [r3, #28]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002160:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	69d9      	ldr	r1, [r3, #28]
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	021a      	lsls	r2, r3, #8
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	61da      	str	r2, [r3, #28]
      break;
 8002176:	e002      	b.n	800217e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	75fb      	strb	r3, [r7, #23]
      break;
 800217c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002186:	7dfb      	ldrb	r3, [r7, #23]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d101      	bne.n	80021ac <HAL_TIM_ConfigClockSource+0x1c>
 80021a8:	2302      	movs	r3, #2
 80021aa:	e0b4      	b.n	8002316 <HAL_TIM_ConfigClockSource+0x186>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2202      	movs	r2, #2
 80021b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80021ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68ba      	ldr	r2, [r7, #8]
 80021da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021e4:	d03e      	beq.n	8002264 <HAL_TIM_ConfigClockSource+0xd4>
 80021e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021ea:	f200 8087 	bhi.w	80022fc <HAL_TIM_ConfigClockSource+0x16c>
 80021ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021f2:	f000 8086 	beq.w	8002302 <HAL_TIM_ConfigClockSource+0x172>
 80021f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021fa:	d87f      	bhi.n	80022fc <HAL_TIM_ConfigClockSource+0x16c>
 80021fc:	2b70      	cmp	r3, #112	; 0x70
 80021fe:	d01a      	beq.n	8002236 <HAL_TIM_ConfigClockSource+0xa6>
 8002200:	2b70      	cmp	r3, #112	; 0x70
 8002202:	d87b      	bhi.n	80022fc <HAL_TIM_ConfigClockSource+0x16c>
 8002204:	2b60      	cmp	r3, #96	; 0x60
 8002206:	d050      	beq.n	80022aa <HAL_TIM_ConfigClockSource+0x11a>
 8002208:	2b60      	cmp	r3, #96	; 0x60
 800220a:	d877      	bhi.n	80022fc <HAL_TIM_ConfigClockSource+0x16c>
 800220c:	2b50      	cmp	r3, #80	; 0x50
 800220e:	d03c      	beq.n	800228a <HAL_TIM_ConfigClockSource+0xfa>
 8002210:	2b50      	cmp	r3, #80	; 0x50
 8002212:	d873      	bhi.n	80022fc <HAL_TIM_ConfigClockSource+0x16c>
 8002214:	2b40      	cmp	r3, #64	; 0x40
 8002216:	d058      	beq.n	80022ca <HAL_TIM_ConfigClockSource+0x13a>
 8002218:	2b40      	cmp	r3, #64	; 0x40
 800221a:	d86f      	bhi.n	80022fc <HAL_TIM_ConfigClockSource+0x16c>
 800221c:	2b30      	cmp	r3, #48	; 0x30
 800221e:	d064      	beq.n	80022ea <HAL_TIM_ConfigClockSource+0x15a>
 8002220:	2b30      	cmp	r3, #48	; 0x30
 8002222:	d86b      	bhi.n	80022fc <HAL_TIM_ConfigClockSource+0x16c>
 8002224:	2b20      	cmp	r3, #32
 8002226:	d060      	beq.n	80022ea <HAL_TIM_ConfigClockSource+0x15a>
 8002228:	2b20      	cmp	r3, #32
 800222a:	d867      	bhi.n	80022fc <HAL_TIM_ConfigClockSource+0x16c>
 800222c:	2b00      	cmp	r3, #0
 800222e:	d05c      	beq.n	80022ea <HAL_TIM_ConfigClockSource+0x15a>
 8002230:	2b10      	cmp	r3, #16
 8002232:	d05a      	beq.n	80022ea <HAL_TIM_ConfigClockSource+0x15a>
 8002234:	e062      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6818      	ldr	r0, [r3, #0]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	6899      	ldr	r1, [r3, #8]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	f000 faf1 	bl	800282c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002258:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	609a      	str	r2, [r3, #8]
      break;
 8002262:	e04f      	b.n	8002304 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6818      	ldr	r0, [r3, #0]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	6899      	ldr	r1, [r3, #8]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	f000 fada 	bl	800282c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002286:	609a      	str	r2, [r3, #8]
      break;
 8002288:	e03c      	b.n	8002304 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6818      	ldr	r0, [r3, #0]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	6859      	ldr	r1, [r3, #4]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	461a      	mov	r2, r3
 8002298:	f000 fa4e 	bl	8002738 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2150      	movs	r1, #80	; 0x50
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 faa7 	bl	80027f6 <TIM_ITRx_SetConfig>
      break;
 80022a8:	e02c      	b.n	8002304 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6818      	ldr	r0, [r3, #0]
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	6859      	ldr	r1, [r3, #4]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	461a      	mov	r2, r3
 80022b8:	f000 fa6d 	bl	8002796 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2160      	movs	r1, #96	; 0x60
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 fa97 	bl	80027f6 <TIM_ITRx_SetConfig>
      break;
 80022c8:	e01c      	b.n	8002304 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6818      	ldr	r0, [r3, #0]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	6859      	ldr	r1, [r3, #4]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	461a      	mov	r2, r3
 80022d8:	f000 fa2e 	bl	8002738 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2140      	movs	r1, #64	; 0x40
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 fa87 	bl	80027f6 <TIM_ITRx_SetConfig>
      break;
 80022e8:	e00c      	b.n	8002304 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4619      	mov	r1, r3
 80022f4:	4610      	mov	r0, r2
 80022f6:	f000 fa7e 	bl	80027f6 <TIM_ITRx_SetConfig>
      break;
 80022fa:	e003      	b.n	8002304 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002300:	e000      	b.n	8002304 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002302:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002314:	7bfb      	ldrb	r3, [r7, #15]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
	...

08002320 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a34      	ldr	r2, [pc, #208]	; (8002404 <TIM_Base_SetConfig+0xe4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d00f      	beq.n	8002358 <TIM_Base_SetConfig+0x38>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800233e:	d00b      	beq.n	8002358 <TIM_Base_SetConfig+0x38>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a31      	ldr	r2, [pc, #196]	; (8002408 <TIM_Base_SetConfig+0xe8>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d007      	beq.n	8002358 <TIM_Base_SetConfig+0x38>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a30      	ldr	r2, [pc, #192]	; (800240c <TIM_Base_SetConfig+0xec>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d003      	beq.n	8002358 <TIM_Base_SetConfig+0x38>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a2f      	ldr	r2, [pc, #188]	; (8002410 <TIM_Base_SetConfig+0xf0>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d108      	bne.n	800236a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800235e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	4313      	orrs	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a25      	ldr	r2, [pc, #148]	; (8002404 <TIM_Base_SetConfig+0xe4>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d01b      	beq.n	80023aa <TIM_Base_SetConfig+0x8a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002378:	d017      	beq.n	80023aa <TIM_Base_SetConfig+0x8a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a22      	ldr	r2, [pc, #136]	; (8002408 <TIM_Base_SetConfig+0xe8>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d013      	beq.n	80023aa <TIM_Base_SetConfig+0x8a>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a21      	ldr	r2, [pc, #132]	; (800240c <TIM_Base_SetConfig+0xec>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d00f      	beq.n	80023aa <TIM_Base_SetConfig+0x8a>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a20      	ldr	r2, [pc, #128]	; (8002410 <TIM_Base_SetConfig+0xf0>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d00b      	beq.n	80023aa <TIM_Base_SetConfig+0x8a>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a1f      	ldr	r2, [pc, #124]	; (8002414 <TIM_Base_SetConfig+0xf4>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d007      	beq.n	80023aa <TIM_Base_SetConfig+0x8a>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a1e      	ldr	r2, [pc, #120]	; (8002418 <TIM_Base_SetConfig+0xf8>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d003      	beq.n	80023aa <TIM_Base_SetConfig+0x8a>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a1d      	ldr	r2, [pc, #116]	; (800241c <TIM_Base_SetConfig+0xfc>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d108      	bne.n	80023bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a08      	ldr	r2, [pc, #32]	; (8002404 <TIM_Base_SetConfig+0xe4>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d103      	bne.n	80023f0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	691a      	ldr	r2, [r3, #16]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	615a      	str	r2, [r3, #20]
}
 80023f6:	bf00      	nop
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	40010000 	.word	0x40010000
 8002408:	40000400 	.word	0x40000400
 800240c:	40000800 	.word	0x40000800
 8002410:	40000c00 	.word	0x40000c00
 8002414:	40014000 	.word	0x40014000
 8002418:	40014400 	.word	0x40014400
 800241c:	40014800 	.word	0x40014800

08002420 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002420:	b480      	push	{r7}
 8002422:	b087      	sub	sp, #28
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	f023 0201 	bic.w	r2, r3, #1
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800244e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f023 0303 	bic.w	r3, r3, #3
 8002456:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	4313      	orrs	r3, r2
 8002460:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	f023 0302 	bic.w	r3, r3, #2
 8002468:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	4313      	orrs	r3, r2
 8002472:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a1c      	ldr	r2, [pc, #112]	; (80024e8 <TIM_OC1_SetConfig+0xc8>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d10c      	bne.n	8002496 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	f023 0308 	bic.w	r3, r3, #8
 8002482:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	4313      	orrs	r3, r2
 800248c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	f023 0304 	bic.w	r3, r3, #4
 8002494:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a13      	ldr	r2, [pc, #76]	; (80024e8 <TIM_OC1_SetConfig+0xc8>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d111      	bne.n	80024c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	4313      	orrs	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	697a      	ldr	r2, [r7, #20]
 80024da:	621a      	str	r2, [r3, #32]
}
 80024dc:	bf00      	nop
 80024de:	371c      	adds	r7, #28
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	40010000 	.word	0x40010000

080024ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b087      	sub	sp, #28
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	f023 0210 	bic.w	r2, r3, #16
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800251a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002522:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	021b      	lsls	r3, r3, #8
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	4313      	orrs	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f023 0320 	bic.w	r3, r3, #32
 8002536:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	011b      	lsls	r3, r3, #4
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	4313      	orrs	r3, r2
 8002542:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a1e      	ldr	r2, [pc, #120]	; (80025c0 <TIM_OC2_SetConfig+0xd4>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d10d      	bne.n	8002568 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002552:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	011b      	lsls	r3, r3, #4
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	4313      	orrs	r3, r2
 800255e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002566:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a15      	ldr	r2, [pc, #84]	; (80025c0 <TIM_OC2_SetConfig+0xd4>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d113      	bne.n	8002598 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002576:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800257e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	4313      	orrs	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	621a      	str	r2, [r3, #32]
}
 80025b2:	bf00      	nop
 80025b4:	371c      	adds	r7, #28
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	40010000 	.word	0x40010000

080025c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b087      	sub	sp, #28
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f023 0303 	bic.w	r3, r3, #3
 80025fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	4313      	orrs	r3, r2
 8002604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800260c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	021b      	lsls	r3, r3, #8
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	4313      	orrs	r3, r2
 8002618:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a1d      	ldr	r2, [pc, #116]	; (8002694 <TIM_OC3_SetConfig+0xd0>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d10d      	bne.n	800263e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002628:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	021b      	lsls	r3, r3, #8
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	4313      	orrs	r3, r2
 8002634:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800263c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a14      	ldr	r2, [pc, #80]	; (8002694 <TIM_OC3_SetConfig+0xd0>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d113      	bne.n	800266e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800264c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002654:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	011b      	lsls	r3, r3, #4
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	4313      	orrs	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	621a      	str	r2, [r3, #32]
}
 8002688:	bf00      	nop
 800268a:	371c      	adds	r7, #28
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	40010000 	.word	0x40010000

08002698 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002698:	b480      	push	{r7}
 800269a:	b087      	sub	sp, #28
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	021b      	lsls	r3, r3, #8
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	4313      	orrs	r3, r2
 80026da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	031b      	lsls	r3, r3, #12
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a10      	ldr	r2, [pc, #64]	; (8002734 <TIM_OC4_SetConfig+0x9c>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d109      	bne.n	800270c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	019b      	lsls	r3, r3, #6
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	4313      	orrs	r3, r2
 800270a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	621a      	str	r2, [r3, #32]
}
 8002726:	bf00      	nop
 8002728:	371c      	adds	r7, #28
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	40010000 	.word	0x40010000

08002738 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002738:	b480      	push	{r7}
 800273a:	b087      	sub	sp, #28
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	f023 0201 	bic.w	r2, r3, #1
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002762:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	011b      	lsls	r3, r3, #4
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	4313      	orrs	r3, r2
 800276c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f023 030a 	bic.w	r3, r3, #10
 8002774:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	4313      	orrs	r3, r2
 800277c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	621a      	str	r2, [r3, #32]
}
 800278a:	bf00      	nop
 800278c:	371c      	adds	r7, #28
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002796:	b480      	push	{r7}
 8002798:	b087      	sub	sp, #28
 800279a:	af00      	add	r7, sp, #0
 800279c:	60f8      	str	r0, [r7, #12]
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	f023 0210 	bic.w	r2, r3, #16
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	031b      	lsls	r3, r3, #12
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	4313      	orrs	r3, r2
 80027dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	621a      	str	r2, [r3, #32]
}
 80027ea:	bf00      	nop
 80027ec:	371c      	adds	r7, #28
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b085      	sub	sp, #20
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
 80027fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800280c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4313      	orrs	r3, r2
 8002814:	f043 0307 	orr.w	r3, r3, #7
 8002818:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	609a      	str	r2, [r3, #8]
}
 8002820:	bf00      	nop
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800282c:	b480      	push	{r7}
 800282e:	b087      	sub	sp, #28
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
 8002838:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002846:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	021a      	lsls	r2, r3, #8
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	431a      	orrs	r2, r3
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	4313      	orrs	r3, r2
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	4313      	orrs	r3, r2
 8002858:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	609a      	str	r2, [r3, #8]
}
 8002860:	bf00      	nop
 8002862:	371c      	adds	r7, #28
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800286c:	b480      	push	{r7}
 800286e:	b087      	sub	sp, #28
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f003 031f 	and.w	r3, r3, #31
 800287e:	2201      	movs	r2, #1
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6a1a      	ldr	r2, [r3, #32]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	43db      	mvns	r3, r3
 800288e:	401a      	ands	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6a1a      	ldr	r2, [r3, #32]
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	f003 031f 	and.w	r3, r3, #31
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	fa01 f303 	lsl.w	r3, r1, r3
 80028a4:	431a      	orrs	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	621a      	str	r2, [r3, #32]
}
 80028aa:	bf00      	nop
 80028ac:	371c      	adds	r7, #28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
	...

080028b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d101      	bne.n	80028d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028cc:	2302      	movs	r3, #2
 80028ce:	e050      	b.n	8002972 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2202      	movs	r2, #2
 80028dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	4313      	orrs	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a1c      	ldr	r2, [pc, #112]	; (8002980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d018      	beq.n	8002946 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800291c:	d013      	beq.n	8002946 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a18      	ldr	r2, [pc, #96]	; (8002984 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d00e      	beq.n	8002946 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a16      	ldr	r2, [pc, #88]	; (8002988 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d009      	beq.n	8002946 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a15      	ldr	r2, [pc, #84]	; (800298c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d004      	beq.n	8002946 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a13      	ldr	r2, [pc, #76]	; (8002990 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d10c      	bne.n	8002960 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800294c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	4313      	orrs	r3, r2
 8002956:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40010000 	.word	0x40010000
 8002984:	40000400 	.word	0x40000400
 8002988:	40000800 	.word	0x40000800
 800298c:	40000c00 	.word	0x40000c00
 8002990:	40014000 	.word	0x40014000

08002994 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e03f      	b.n	8002a26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d106      	bne.n	80029c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7fe f8b8 	bl	8000b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2224      	movs	r2, #36	; 0x24
 80029c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f929 	bl	8002c30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	691a      	ldr	r2, [r3, #16]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	695a      	ldr	r2, [r3, #20]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68da      	ldr	r2, [r3, #12]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2220      	movs	r2, #32
 8002a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b08a      	sub	sp, #40	; 0x28
 8002a32:	af02      	add	r7, sp, #8
 8002a34:	60f8      	str	r0, [r7, #12]
 8002a36:	60b9      	str	r1, [r7, #8]
 8002a38:	603b      	str	r3, [r7, #0]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b20      	cmp	r3, #32
 8002a4c:	d17c      	bne.n	8002b48 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d002      	beq.n	8002a5a <HAL_UART_Transmit+0x2c>
 8002a54:	88fb      	ldrh	r3, [r7, #6]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e075      	b.n	8002b4a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d101      	bne.n	8002a6c <HAL_UART_Transmit+0x3e>
 8002a68:	2302      	movs	r3, #2
 8002a6a:	e06e      	b.n	8002b4a <HAL_UART_Transmit+0x11c>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2221      	movs	r2, #33	; 0x21
 8002a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a82:	f7fe f9e5 	bl	8000e50 <HAL_GetTick>
 8002a86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	88fa      	ldrh	r2, [r7, #6]
 8002a8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	88fa      	ldrh	r2, [r7, #6]
 8002a92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a9c:	d108      	bne.n	8002ab0 <HAL_UART_Transmit+0x82>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d104      	bne.n	8002ab0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	61bb      	str	r3, [r7, #24]
 8002aae:	e003      	b.n	8002ab8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ac0:	e02a      	b.n	8002b18 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	2180      	movs	r1, #128	; 0x80
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f000 f840 	bl	8002b52 <UART_WaitOnFlagUntilTimeout>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e036      	b.n	8002b4a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10b      	bne.n	8002afa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002af0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	3302      	adds	r3, #2
 8002af6:	61bb      	str	r3, [r7, #24]
 8002af8:	e007      	b.n	8002b0a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	781a      	ldrb	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	3301      	adds	r3, #1
 8002b08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	3b01      	subs	r3, #1
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1cf      	bne.n	8002ac2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2140      	movs	r1, #64	; 0x40
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 f810 	bl	8002b52 <UART_WaitOnFlagUntilTimeout>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e006      	b.n	8002b4a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b44:	2300      	movs	r3, #0
 8002b46:	e000      	b.n	8002b4a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b48:	2302      	movs	r3, #2
  }
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3720      	adds	r7, #32
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b090      	sub	sp, #64	; 0x40
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	60f8      	str	r0, [r7, #12]
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	603b      	str	r3, [r7, #0]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b62:	e050      	b.n	8002c06 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b6a:	d04c      	beq.n	8002c06 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d007      	beq.n	8002b82 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b72:	f7fe f96d 	bl	8000e50 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d241      	bcs.n	8002c06 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	330c      	adds	r3, #12
 8002b88:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8c:	e853 3f00 	ldrex	r3, [r3]
 8002b90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	330c      	adds	r3, #12
 8002ba0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ba2:	637a      	str	r2, [r7, #52]	; 0x34
 8002ba4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ba8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002baa:	e841 2300 	strex	r3, r2, [r1]
 8002bae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1e5      	bne.n	8002b82 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	3314      	adds	r3, #20
 8002bbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	e853 3f00 	ldrex	r3, [r3]
 8002bc4:	613b      	str	r3, [r7, #16]
   return(result);
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	f023 0301 	bic.w	r3, r3, #1
 8002bcc:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	3314      	adds	r3, #20
 8002bd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bd6:	623a      	str	r2, [r7, #32]
 8002bd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bda:	69f9      	ldr	r1, [r7, #28]
 8002bdc:	6a3a      	ldr	r2, [r7, #32]
 8002bde:	e841 2300 	strex	r3, r2, [r1]
 8002be2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1e5      	bne.n	8002bb6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2220      	movs	r2, #32
 8002bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e00f      	b.n	8002c26 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	bf0c      	ite	eq
 8002c16:	2301      	moveq	r3, #1
 8002c18:	2300      	movne	r3, #0
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	79fb      	ldrb	r3, [r7, #7]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d09f      	beq.n	8002b64 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3740      	adds	r7, #64	; 0x40
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c34:	b0c0      	sub	sp, #256	; 0x100
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c4c:	68d9      	ldr	r1, [r3, #12]
 8002c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	ea40 0301 	orr.w	r3, r0, r1
 8002c58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	431a      	orrs	r2, r3
 8002c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c88:	f021 010c 	bic.w	r1, r1, #12
 8002c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c96:	430b      	orrs	r3, r1
 8002c98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002caa:	6999      	ldr	r1, [r3, #24]
 8002cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	ea40 0301 	orr.w	r3, r0, r1
 8002cb6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	4b8f      	ldr	r3, [pc, #572]	; (8002efc <UART_SetConfig+0x2cc>)
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d005      	beq.n	8002cd0 <UART_SetConfig+0xa0>
 8002cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	4b8d      	ldr	r3, [pc, #564]	; (8002f00 <UART_SetConfig+0x2d0>)
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d104      	bne.n	8002cda <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cd0:	f7ff f830 	bl	8001d34 <HAL_RCC_GetPCLK2Freq>
 8002cd4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002cd8:	e003      	b.n	8002ce2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cda:	f7ff f817 	bl	8001d0c <HAL_RCC_GetPCLK1Freq>
 8002cde:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cec:	f040 810c 	bne.w	8002f08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002cfa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002cfe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002d02:	4622      	mov	r2, r4
 8002d04:	462b      	mov	r3, r5
 8002d06:	1891      	adds	r1, r2, r2
 8002d08:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d0a:	415b      	adcs	r3, r3
 8002d0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d12:	4621      	mov	r1, r4
 8002d14:	eb12 0801 	adds.w	r8, r2, r1
 8002d18:	4629      	mov	r1, r5
 8002d1a:	eb43 0901 	adc.w	r9, r3, r1
 8002d1e:	f04f 0200 	mov.w	r2, #0
 8002d22:	f04f 0300 	mov.w	r3, #0
 8002d26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d32:	4690      	mov	r8, r2
 8002d34:	4699      	mov	r9, r3
 8002d36:	4623      	mov	r3, r4
 8002d38:	eb18 0303 	adds.w	r3, r8, r3
 8002d3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002d40:	462b      	mov	r3, r5
 8002d42:	eb49 0303 	adc.w	r3, r9, r3
 8002d46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d56:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002d5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002d5e:	460b      	mov	r3, r1
 8002d60:	18db      	adds	r3, r3, r3
 8002d62:	653b      	str	r3, [r7, #80]	; 0x50
 8002d64:	4613      	mov	r3, r2
 8002d66:	eb42 0303 	adc.w	r3, r2, r3
 8002d6a:	657b      	str	r3, [r7, #84]	; 0x54
 8002d6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002d74:	f7fd fa8c 	bl	8000290 <__aeabi_uldivmod>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	4b61      	ldr	r3, [pc, #388]	; (8002f04 <UART_SetConfig+0x2d4>)
 8002d7e:	fba3 2302 	umull	r2, r3, r3, r2
 8002d82:	095b      	lsrs	r3, r3, #5
 8002d84:	011c      	lsls	r4, r3, #4
 8002d86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d90:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002d94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002d98:	4642      	mov	r2, r8
 8002d9a:	464b      	mov	r3, r9
 8002d9c:	1891      	adds	r1, r2, r2
 8002d9e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002da0:	415b      	adcs	r3, r3
 8002da2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002da4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002da8:	4641      	mov	r1, r8
 8002daa:	eb12 0a01 	adds.w	sl, r2, r1
 8002dae:	4649      	mov	r1, r9
 8002db0:	eb43 0b01 	adc.w	fp, r3, r1
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	f04f 0300 	mov.w	r3, #0
 8002dbc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002dc0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002dc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dc8:	4692      	mov	sl, r2
 8002dca:	469b      	mov	fp, r3
 8002dcc:	4643      	mov	r3, r8
 8002dce:	eb1a 0303 	adds.w	r3, sl, r3
 8002dd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002dd6:	464b      	mov	r3, r9
 8002dd8:	eb4b 0303 	adc.w	r3, fp, r3
 8002ddc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002dec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002df0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002df4:	460b      	mov	r3, r1
 8002df6:	18db      	adds	r3, r3, r3
 8002df8:	643b      	str	r3, [r7, #64]	; 0x40
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	eb42 0303 	adc.w	r3, r2, r3
 8002e00:	647b      	str	r3, [r7, #68]	; 0x44
 8002e02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002e0a:	f7fd fa41 	bl	8000290 <__aeabi_uldivmod>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4611      	mov	r1, r2
 8002e14:	4b3b      	ldr	r3, [pc, #236]	; (8002f04 <UART_SetConfig+0x2d4>)
 8002e16:	fba3 2301 	umull	r2, r3, r3, r1
 8002e1a:	095b      	lsrs	r3, r3, #5
 8002e1c:	2264      	movs	r2, #100	; 0x64
 8002e1e:	fb02 f303 	mul.w	r3, r2, r3
 8002e22:	1acb      	subs	r3, r1, r3
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002e2a:	4b36      	ldr	r3, [pc, #216]	; (8002f04 <UART_SetConfig+0x2d4>)
 8002e2c:	fba3 2302 	umull	r2, r3, r3, r2
 8002e30:	095b      	lsrs	r3, r3, #5
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e38:	441c      	add	r4, r3
 8002e3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e44:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002e48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002e4c:	4642      	mov	r2, r8
 8002e4e:	464b      	mov	r3, r9
 8002e50:	1891      	adds	r1, r2, r2
 8002e52:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e54:	415b      	adcs	r3, r3
 8002e56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e5c:	4641      	mov	r1, r8
 8002e5e:	1851      	adds	r1, r2, r1
 8002e60:	6339      	str	r1, [r7, #48]	; 0x30
 8002e62:	4649      	mov	r1, r9
 8002e64:	414b      	adcs	r3, r1
 8002e66:	637b      	str	r3, [r7, #52]	; 0x34
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	f04f 0300 	mov.w	r3, #0
 8002e70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002e74:	4659      	mov	r1, fp
 8002e76:	00cb      	lsls	r3, r1, #3
 8002e78:	4651      	mov	r1, sl
 8002e7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e7e:	4651      	mov	r1, sl
 8002e80:	00ca      	lsls	r2, r1, #3
 8002e82:	4610      	mov	r0, r2
 8002e84:	4619      	mov	r1, r3
 8002e86:	4603      	mov	r3, r0
 8002e88:	4642      	mov	r2, r8
 8002e8a:	189b      	adds	r3, r3, r2
 8002e8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e90:	464b      	mov	r3, r9
 8002e92:	460a      	mov	r2, r1
 8002e94:	eb42 0303 	adc.w	r3, r2, r3
 8002e98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ea8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002eac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	18db      	adds	r3, r3, r3
 8002eb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	eb42 0303 	adc.w	r3, r2, r3
 8002ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ebe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ec2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002ec6:	f7fd f9e3 	bl	8000290 <__aeabi_uldivmod>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4b0d      	ldr	r3, [pc, #52]	; (8002f04 <UART_SetConfig+0x2d4>)
 8002ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ed4:	095b      	lsrs	r3, r3, #5
 8002ed6:	2164      	movs	r1, #100	; 0x64
 8002ed8:	fb01 f303 	mul.w	r3, r1, r3
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	3332      	adds	r3, #50	; 0x32
 8002ee2:	4a08      	ldr	r2, [pc, #32]	; (8002f04 <UART_SetConfig+0x2d4>)
 8002ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee8:	095b      	lsrs	r3, r3, #5
 8002eea:	f003 0207 	and.w	r2, r3, #7
 8002eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4422      	add	r2, r4
 8002ef6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ef8:	e106      	b.n	8003108 <UART_SetConfig+0x4d8>
 8002efa:	bf00      	nop
 8002efc:	40011000 	.word	0x40011000
 8002f00:	40011400 	.word	0x40011400
 8002f04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f12:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002f16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002f1a:	4642      	mov	r2, r8
 8002f1c:	464b      	mov	r3, r9
 8002f1e:	1891      	adds	r1, r2, r2
 8002f20:	6239      	str	r1, [r7, #32]
 8002f22:	415b      	adcs	r3, r3
 8002f24:	627b      	str	r3, [r7, #36]	; 0x24
 8002f26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f2a:	4641      	mov	r1, r8
 8002f2c:	1854      	adds	r4, r2, r1
 8002f2e:	4649      	mov	r1, r9
 8002f30:	eb43 0501 	adc.w	r5, r3, r1
 8002f34:	f04f 0200 	mov.w	r2, #0
 8002f38:	f04f 0300 	mov.w	r3, #0
 8002f3c:	00eb      	lsls	r3, r5, #3
 8002f3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f42:	00e2      	lsls	r2, r4, #3
 8002f44:	4614      	mov	r4, r2
 8002f46:	461d      	mov	r5, r3
 8002f48:	4643      	mov	r3, r8
 8002f4a:	18e3      	adds	r3, r4, r3
 8002f4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f50:	464b      	mov	r3, r9
 8002f52:	eb45 0303 	adc.w	r3, r5, r3
 8002f56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	f04f 0300 	mov.w	r3, #0
 8002f72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f76:	4629      	mov	r1, r5
 8002f78:	008b      	lsls	r3, r1, #2
 8002f7a:	4621      	mov	r1, r4
 8002f7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f80:	4621      	mov	r1, r4
 8002f82:	008a      	lsls	r2, r1, #2
 8002f84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002f88:	f7fd f982 	bl	8000290 <__aeabi_uldivmod>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4b60      	ldr	r3, [pc, #384]	; (8003114 <UART_SetConfig+0x4e4>)
 8002f92:	fba3 2302 	umull	r2, r3, r3, r2
 8002f96:	095b      	lsrs	r3, r3, #5
 8002f98:	011c      	lsls	r4, r3, #4
 8002f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002fa4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002fa8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002fac:	4642      	mov	r2, r8
 8002fae:	464b      	mov	r3, r9
 8002fb0:	1891      	adds	r1, r2, r2
 8002fb2:	61b9      	str	r1, [r7, #24]
 8002fb4:	415b      	adcs	r3, r3
 8002fb6:	61fb      	str	r3, [r7, #28]
 8002fb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fbc:	4641      	mov	r1, r8
 8002fbe:	1851      	adds	r1, r2, r1
 8002fc0:	6139      	str	r1, [r7, #16]
 8002fc2:	4649      	mov	r1, r9
 8002fc4:	414b      	adcs	r3, r1
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	f04f 0200 	mov.w	r2, #0
 8002fcc:	f04f 0300 	mov.w	r3, #0
 8002fd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fd4:	4659      	mov	r1, fp
 8002fd6:	00cb      	lsls	r3, r1, #3
 8002fd8:	4651      	mov	r1, sl
 8002fda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fde:	4651      	mov	r1, sl
 8002fe0:	00ca      	lsls	r2, r1, #3
 8002fe2:	4610      	mov	r0, r2
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	4642      	mov	r2, r8
 8002fea:	189b      	adds	r3, r3, r2
 8002fec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ff0:	464b      	mov	r3, r9
 8002ff2:	460a      	mov	r2, r1
 8002ff4:	eb42 0303 	adc.w	r3, r2, r3
 8002ff8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	67bb      	str	r3, [r7, #120]	; 0x78
 8003006:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003008:	f04f 0200 	mov.w	r2, #0
 800300c:	f04f 0300 	mov.w	r3, #0
 8003010:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003014:	4649      	mov	r1, r9
 8003016:	008b      	lsls	r3, r1, #2
 8003018:	4641      	mov	r1, r8
 800301a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800301e:	4641      	mov	r1, r8
 8003020:	008a      	lsls	r2, r1, #2
 8003022:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003026:	f7fd f933 	bl	8000290 <__aeabi_uldivmod>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	4611      	mov	r1, r2
 8003030:	4b38      	ldr	r3, [pc, #224]	; (8003114 <UART_SetConfig+0x4e4>)
 8003032:	fba3 2301 	umull	r2, r3, r3, r1
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	2264      	movs	r2, #100	; 0x64
 800303a:	fb02 f303 	mul.w	r3, r2, r3
 800303e:	1acb      	subs	r3, r1, r3
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	3332      	adds	r3, #50	; 0x32
 8003044:	4a33      	ldr	r2, [pc, #204]	; (8003114 <UART_SetConfig+0x4e4>)
 8003046:	fba2 2303 	umull	r2, r3, r2, r3
 800304a:	095b      	lsrs	r3, r3, #5
 800304c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003050:	441c      	add	r4, r3
 8003052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003056:	2200      	movs	r2, #0
 8003058:	673b      	str	r3, [r7, #112]	; 0x70
 800305a:	677a      	str	r2, [r7, #116]	; 0x74
 800305c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003060:	4642      	mov	r2, r8
 8003062:	464b      	mov	r3, r9
 8003064:	1891      	adds	r1, r2, r2
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	415b      	adcs	r3, r3
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003070:	4641      	mov	r1, r8
 8003072:	1851      	adds	r1, r2, r1
 8003074:	6039      	str	r1, [r7, #0]
 8003076:	4649      	mov	r1, r9
 8003078:	414b      	adcs	r3, r1
 800307a:	607b      	str	r3, [r7, #4]
 800307c:	f04f 0200 	mov.w	r2, #0
 8003080:	f04f 0300 	mov.w	r3, #0
 8003084:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003088:	4659      	mov	r1, fp
 800308a:	00cb      	lsls	r3, r1, #3
 800308c:	4651      	mov	r1, sl
 800308e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003092:	4651      	mov	r1, sl
 8003094:	00ca      	lsls	r2, r1, #3
 8003096:	4610      	mov	r0, r2
 8003098:	4619      	mov	r1, r3
 800309a:	4603      	mov	r3, r0
 800309c:	4642      	mov	r2, r8
 800309e:	189b      	adds	r3, r3, r2
 80030a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80030a2:	464b      	mov	r3, r9
 80030a4:	460a      	mov	r2, r1
 80030a6:	eb42 0303 	adc.w	r3, r2, r3
 80030aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	663b      	str	r3, [r7, #96]	; 0x60
 80030b6:	667a      	str	r2, [r7, #100]	; 0x64
 80030b8:	f04f 0200 	mov.w	r2, #0
 80030bc:	f04f 0300 	mov.w	r3, #0
 80030c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80030c4:	4649      	mov	r1, r9
 80030c6:	008b      	lsls	r3, r1, #2
 80030c8:	4641      	mov	r1, r8
 80030ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030ce:	4641      	mov	r1, r8
 80030d0:	008a      	lsls	r2, r1, #2
 80030d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80030d6:	f7fd f8db 	bl	8000290 <__aeabi_uldivmod>
 80030da:	4602      	mov	r2, r0
 80030dc:	460b      	mov	r3, r1
 80030de:	4b0d      	ldr	r3, [pc, #52]	; (8003114 <UART_SetConfig+0x4e4>)
 80030e0:	fba3 1302 	umull	r1, r3, r3, r2
 80030e4:	095b      	lsrs	r3, r3, #5
 80030e6:	2164      	movs	r1, #100	; 0x64
 80030e8:	fb01 f303 	mul.w	r3, r1, r3
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	011b      	lsls	r3, r3, #4
 80030f0:	3332      	adds	r3, #50	; 0x32
 80030f2:	4a08      	ldr	r2, [pc, #32]	; (8003114 <UART_SetConfig+0x4e4>)
 80030f4:	fba2 2303 	umull	r2, r3, r2, r3
 80030f8:	095b      	lsrs	r3, r3, #5
 80030fa:	f003 020f 	and.w	r2, r3, #15
 80030fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4422      	add	r2, r4
 8003106:	609a      	str	r2, [r3, #8]
}
 8003108:	bf00      	nop
 800310a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800310e:	46bd      	mov	sp, r7
 8003110:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003114:	51eb851f 	.word	0x51eb851f

08003118 <siprintf>:
 8003118:	b40e      	push	{r1, r2, r3}
 800311a:	b500      	push	{lr}
 800311c:	b09c      	sub	sp, #112	; 0x70
 800311e:	ab1d      	add	r3, sp, #116	; 0x74
 8003120:	9002      	str	r0, [sp, #8]
 8003122:	9006      	str	r0, [sp, #24]
 8003124:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003128:	4809      	ldr	r0, [pc, #36]	; (8003150 <siprintf+0x38>)
 800312a:	9107      	str	r1, [sp, #28]
 800312c:	9104      	str	r1, [sp, #16]
 800312e:	4909      	ldr	r1, [pc, #36]	; (8003154 <siprintf+0x3c>)
 8003130:	f853 2b04 	ldr.w	r2, [r3], #4
 8003134:	9105      	str	r1, [sp, #20]
 8003136:	6800      	ldr	r0, [r0, #0]
 8003138:	9301      	str	r3, [sp, #4]
 800313a:	a902      	add	r1, sp, #8
 800313c:	f000 f992 	bl	8003464 <_svfiprintf_r>
 8003140:	9b02      	ldr	r3, [sp, #8]
 8003142:	2200      	movs	r2, #0
 8003144:	701a      	strb	r2, [r3, #0]
 8003146:	b01c      	add	sp, #112	; 0x70
 8003148:	f85d eb04 	ldr.w	lr, [sp], #4
 800314c:	b003      	add	sp, #12
 800314e:	4770      	bx	lr
 8003150:	20000058 	.word	0x20000058
 8003154:	ffff0208 	.word	0xffff0208

08003158 <memset>:
 8003158:	4402      	add	r2, r0
 800315a:	4603      	mov	r3, r0
 800315c:	4293      	cmp	r3, r2
 800315e:	d100      	bne.n	8003162 <memset+0xa>
 8003160:	4770      	bx	lr
 8003162:	f803 1b01 	strb.w	r1, [r3], #1
 8003166:	e7f9      	b.n	800315c <memset+0x4>

08003168 <__errno>:
 8003168:	4b01      	ldr	r3, [pc, #4]	; (8003170 <__errno+0x8>)
 800316a:	6818      	ldr	r0, [r3, #0]
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	20000058 	.word	0x20000058

08003174 <__libc_init_array>:
 8003174:	b570      	push	{r4, r5, r6, lr}
 8003176:	4d0d      	ldr	r5, [pc, #52]	; (80031ac <__libc_init_array+0x38>)
 8003178:	4c0d      	ldr	r4, [pc, #52]	; (80031b0 <__libc_init_array+0x3c>)
 800317a:	1b64      	subs	r4, r4, r5
 800317c:	10a4      	asrs	r4, r4, #2
 800317e:	2600      	movs	r6, #0
 8003180:	42a6      	cmp	r6, r4
 8003182:	d109      	bne.n	8003198 <__libc_init_array+0x24>
 8003184:	4d0b      	ldr	r5, [pc, #44]	; (80031b4 <__libc_init_array+0x40>)
 8003186:	4c0c      	ldr	r4, [pc, #48]	; (80031b8 <__libc_init_array+0x44>)
 8003188:	f000 fc6a 	bl	8003a60 <_init>
 800318c:	1b64      	subs	r4, r4, r5
 800318e:	10a4      	asrs	r4, r4, #2
 8003190:	2600      	movs	r6, #0
 8003192:	42a6      	cmp	r6, r4
 8003194:	d105      	bne.n	80031a2 <__libc_init_array+0x2e>
 8003196:	bd70      	pop	{r4, r5, r6, pc}
 8003198:	f855 3b04 	ldr.w	r3, [r5], #4
 800319c:	4798      	blx	r3
 800319e:	3601      	adds	r6, #1
 80031a0:	e7ee      	b.n	8003180 <__libc_init_array+0xc>
 80031a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80031a6:	4798      	blx	r3
 80031a8:	3601      	adds	r6, #1
 80031aa:	e7f2      	b.n	8003192 <__libc_init_array+0x1e>
 80031ac:	08003adc 	.word	0x08003adc
 80031b0:	08003adc 	.word	0x08003adc
 80031b4:	08003adc 	.word	0x08003adc
 80031b8:	08003ae0 	.word	0x08003ae0

080031bc <__retarget_lock_acquire_recursive>:
 80031bc:	4770      	bx	lr

080031be <__retarget_lock_release_recursive>:
 80031be:	4770      	bx	lr

080031c0 <_free_r>:
 80031c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80031c2:	2900      	cmp	r1, #0
 80031c4:	d044      	beq.n	8003250 <_free_r+0x90>
 80031c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031ca:	9001      	str	r0, [sp, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f1a1 0404 	sub.w	r4, r1, #4
 80031d2:	bfb8      	it	lt
 80031d4:	18e4      	addlt	r4, r4, r3
 80031d6:	f000 f8df 	bl	8003398 <__malloc_lock>
 80031da:	4a1e      	ldr	r2, [pc, #120]	; (8003254 <_free_r+0x94>)
 80031dc:	9801      	ldr	r0, [sp, #4]
 80031de:	6813      	ldr	r3, [r2, #0]
 80031e0:	b933      	cbnz	r3, 80031f0 <_free_r+0x30>
 80031e2:	6063      	str	r3, [r4, #4]
 80031e4:	6014      	str	r4, [r2, #0]
 80031e6:	b003      	add	sp, #12
 80031e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80031ec:	f000 b8da 	b.w	80033a4 <__malloc_unlock>
 80031f0:	42a3      	cmp	r3, r4
 80031f2:	d908      	bls.n	8003206 <_free_r+0x46>
 80031f4:	6825      	ldr	r5, [r4, #0]
 80031f6:	1961      	adds	r1, r4, r5
 80031f8:	428b      	cmp	r3, r1
 80031fa:	bf01      	itttt	eq
 80031fc:	6819      	ldreq	r1, [r3, #0]
 80031fe:	685b      	ldreq	r3, [r3, #4]
 8003200:	1949      	addeq	r1, r1, r5
 8003202:	6021      	streq	r1, [r4, #0]
 8003204:	e7ed      	b.n	80031e2 <_free_r+0x22>
 8003206:	461a      	mov	r2, r3
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	b10b      	cbz	r3, 8003210 <_free_r+0x50>
 800320c:	42a3      	cmp	r3, r4
 800320e:	d9fa      	bls.n	8003206 <_free_r+0x46>
 8003210:	6811      	ldr	r1, [r2, #0]
 8003212:	1855      	adds	r5, r2, r1
 8003214:	42a5      	cmp	r5, r4
 8003216:	d10b      	bne.n	8003230 <_free_r+0x70>
 8003218:	6824      	ldr	r4, [r4, #0]
 800321a:	4421      	add	r1, r4
 800321c:	1854      	adds	r4, r2, r1
 800321e:	42a3      	cmp	r3, r4
 8003220:	6011      	str	r1, [r2, #0]
 8003222:	d1e0      	bne.n	80031e6 <_free_r+0x26>
 8003224:	681c      	ldr	r4, [r3, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	6053      	str	r3, [r2, #4]
 800322a:	440c      	add	r4, r1
 800322c:	6014      	str	r4, [r2, #0]
 800322e:	e7da      	b.n	80031e6 <_free_r+0x26>
 8003230:	d902      	bls.n	8003238 <_free_r+0x78>
 8003232:	230c      	movs	r3, #12
 8003234:	6003      	str	r3, [r0, #0]
 8003236:	e7d6      	b.n	80031e6 <_free_r+0x26>
 8003238:	6825      	ldr	r5, [r4, #0]
 800323a:	1961      	adds	r1, r4, r5
 800323c:	428b      	cmp	r3, r1
 800323e:	bf04      	itt	eq
 8003240:	6819      	ldreq	r1, [r3, #0]
 8003242:	685b      	ldreq	r3, [r3, #4]
 8003244:	6063      	str	r3, [r4, #4]
 8003246:	bf04      	itt	eq
 8003248:	1949      	addeq	r1, r1, r5
 800324a:	6021      	streq	r1, [r4, #0]
 800324c:	6054      	str	r4, [r2, #4]
 800324e:	e7ca      	b.n	80031e6 <_free_r+0x26>
 8003250:	b003      	add	sp, #12
 8003252:	bd30      	pop	{r4, r5, pc}
 8003254:	20000294 	.word	0x20000294

08003258 <sbrk_aligned>:
 8003258:	b570      	push	{r4, r5, r6, lr}
 800325a:	4e0e      	ldr	r6, [pc, #56]	; (8003294 <sbrk_aligned+0x3c>)
 800325c:	460c      	mov	r4, r1
 800325e:	6831      	ldr	r1, [r6, #0]
 8003260:	4605      	mov	r5, r0
 8003262:	b911      	cbnz	r1, 800326a <sbrk_aligned+0x12>
 8003264:	f000 fba6 	bl	80039b4 <_sbrk_r>
 8003268:	6030      	str	r0, [r6, #0]
 800326a:	4621      	mov	r1, r4
 800326c:	4628      	mov	r0, r5
 800326e:	f000 fba1 	bl	80039b4 <_sbrk_r>
 8003272:	1c43      	adds	r3, r0, #1
 8003274:	d00a      	beq.n	800328c <sbrk_aligned+0x34>
 8003276:	1cc4      	adds	r4, r0, #3
 8003278:	f024 0403 	bic.w	r4, r4, #3
 800327c:	42a0      	cmp	r0, r4
 800327e:	d007      	beq.n	8003290 <sbrk_aligned+0x38>
 8003280:	1a21      	subs	r1, r4, r0
 8003282:	4628      	mov	r0, r5
 8003284:	f000 fb96 	bl	80039b4 <_sbrk_r>
 8003288:	3001      	adds	r0, #1
 800328a:	d101      	bne.n	8003290 <sbrk_aligned+0x38>
 800328c:	f04f 34ff 	mov.w	r4, #4294967295
 8003290:	4620      	mov	r0, r4
 8003292:	bd70      	pop	{r4, r5, r6, pc}
 8003294:	20000298 	.word	0x20000298

08003298 <_malloc_r>:
 8003298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800329c:	1ccd      	adds	r5, r1, #3
 800329e:	f025 0503 	bic.w	r5, r5, #3
 80032a2:	3508      	adds	r5, #8
 80032a4:	2d0c      	cmp	r5, #12
 80032a6:	bf38      	it	cc
 80032a8:	250c      	movcc	r5, #12
 80032aa:	2d00      	cmp	r5, #0
 80032ac:	4607      	mov	r7, r0
 80032ae:	db01      	blt.n	80032b4 <_malloc_r+0x1c>
 80032b0:	42a9      	cmp	r1, r5
 80032b2:	d905      	bls.n	80032c0 <_malloc_r+0x28>
 80032b4:	230c      	movs	r3, #12
 80032b6:	603b      	str	r3, [r7, #0]
 80032b8:	2600      	movs	r6, #0
 80032ba:	4630      	mov	r0, r6
 80032bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003394 <_malloc_r+0xfc>
 80032c4:	f000 f868 	bl	8003398 <__malloc_lock>
 80032c8:	f8d8 3000 	ldr.w	r3, [r8]
 80032cc:	461c      	mov	r4, r3
 80032ce:	bb5c      	cbnz	r4, 8003328 <_malloc_r+0x90>
 80032d0:	4629      	mov	r1, r5
 80032d2:	4638      	mov	r0, r7
 80032d4:	f7ff ffc0 	bl	8003258 <sbrk_aligned>
 80032d8:	1c43      	adds	r3, r0, #1
 80032da:	4604      	mov	r4, r0
 80032dc:	d155      	bne.n	800338a <_malloc_r+0xf2>
 80032de:	f8d8 4000 	ldr.w	r4, [r8]
 80032e2:	4626      	mov	r6, r4
 80032e4:	2e00      	cmp	r6, #0
 80032e6:	d145      	bne.n	8003374 <_malloc_r+0xdc>
 80032e8:	2c00      	cmp	r4, #0
 80032ea:	d048      	beq.n	800337e <_malloc_r+0xe6>
 80032ec:	6823      	ldr	r3, [r4, #0]
 80032ee:	4631      	mov	r1, r6
 80032f0:	4638      	mov	r0, r7
 80032f2:	eb04 0903 	add.w	r9, r4, r3
 80032f6:	f000 fb5d 	bl	80039b4 <_sbrk_r>
 80032fa:	4581      	cmp	r9, r0
 80032fc:	d13f      	bne.n	800337e <_malloc_r+0xe6>
 80032fe:	6821      	ldr	r1, [r4, #0]
 8003300:	1a6d      	subs	r5, r5, r1
 8003302:	4629      	mov	r1, r5
 8003304:	4638      	mov	r0, r7
 8003306:	f7ff ffa7 	bl	8003258 <sbrk_aligned>
 800330a:	3001      	adds	r0, #1
 800330c:	d037      	beq.n	800337e <_malloc_r+0xe6>
 800330e:	6823      	ldr	r3, [r4, #0]
 8003310:	442b      	add	r3, r5
 8003312:	6023      	str	r3, [r4, #0]
 8003314:	f8d8 3000 	ldr.w	r3, [r8]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d038      	beq.n	800338e <_malloc_r+0xf6>
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	42a2      	cmp	r2, r4
 8003320:	d12b      	bne.n	800337a <_malloc_r+0xe2>
 8003322:	2200      	movs	r2, #0
 8003324:	605a      	str	r2, [r3, #4]
 8003326:	e00f      	b.n	8003348 <_malloc_r+0xb0>
 8003328:	6822      	ldr	r2, [r4, #0]
 800332a:	1b52      	subs	r2, r2, r5
 800332c:	d41f      	bmi.n	800336e <_malloc_r+0xd6>
 800332e:	2a0b      	cmp	r2, #11
 8003330:	d917      	bls.n	8003362 <_malloc_r+0xca>
 8003332:	1961      	adds	r1, r4, r5
 8003334:	42a3      	cmp	r3, r4
 8003336:	6025      	str	r5, [r4, #0]
 8003338:	bf18      	it	ne
 800333a:	6059      	strne	r1, [r3, #4]
 800333c:	6863      	ldr	r3, [r4, #4]
 800333e:	bf08      	it	eq
 8003340:	f8c8 1000 	streq.w	r1, [r8]
 8003344:	5162      	str	r2, [r4, r5]
 8003346:	604b      	str	r3, [r1, #4]
 8003348:	4638      	mov	r0, r7
 800334a:	f104 060b 	add.w	r6, r4, #11
 800334e:	f000 f829 	bl	80033a4 <__malloc_unlock>
 8003352:	f026 0607 	bic.w	r6, r6, #7
 8003356:	1d23      	adds	r3, r4, #4
 8003358:	1af2      	subs	r2, r6, r3
 800335a:	d0ae      	beq.n	80032ba <_malloc_r+0x22>
 800335c:	1b9b      	subs	r3, r3, r6
 800335e:	50a3      	str	r3, [r4, r2]
 8003360:	e7ab      	b.n	80032ba <_malloc_r+0x22>
 8003362:	42a3      	cmp	r3, r4
 8003364:	6862      	ldr	r2, [r4, #4]
 8003366:	d1dd      	bne.n	8003324 <_malloc_r+0x8c>
 8003368:	f8c8 2000 	str.w	r2, [r8]
 800336c:	e7ec      	b.n	8003348 <_malloc_r+0xb0>
 800336e:	4623      	mov	r3, r4
 8003370:	6864      	ldr	r4, [r4, #4]
 8003372:	e7ac      	b.n	80032ce <_malloc_r+0x36>
 8003374:	4634      	mov	r4, r6
 8003376:	6876      	ldr	r6, [r6, #4]
 8003378:	e7b4      	b.n	80032e4 <_malloc_r+0x4c>
 800337a:	4613      	mov	r3, r2
 800337c:	e7cc      	b.n	8003318 <_malloc_r+0x80>
 800337e:	230c      	movs	r3, #12
 8003380:	603b      	str	r3, [r7, #0]
 8003382:	4638      	mov	r0, r7
 8003384:	f000 f80e 	bl	80033a4 <__malloc_unlock>
 8003388:	e797      	b.n	80032ba <_malloc_r+0x22>
 800338a:	6025      	str	r5, [r4, #0]
 800338c:	e7dc      	b.n	8003348 <_malloc_r+0xb0>
 800338e:	605b      	str	r3, [r3, #4]
 8003390:	deff      	udf	#255	; 0xff
 8003392:	bf00      	nop
 8003394:	20000294 	.word	0x20000294

08003398 <__malloc_lock>:
 8003398:	4801      	ldr	r0, [pc, #4]	; (80033a0 <__malloc_lock+0x8>)
 800339a:	f7ff bf0f 	b.w	80031bc <__retarget_lock_acquire_recursive>
 800339e:	bf00      	nop
 80033a0:	20000290 	.word	0x20000290

080033a4 <__malloc_unlock>:
 80033a4:	4801      	ldr	r0, [pc, #4]	; (80033ac <__malloc_unlock+0x8>)
 80033a6:	f7ff bf0a 	b.w	80031be <__retarget_lock_release_recursive>
 80033aa:	bf00      	nop
 80033ac:	20000290 	.word	0x20000290

080033b0 <__ssputs_r>:
 80033b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033b4:	688e      	ldr	r6, [r1, #8]
 80033b6:	461f      	mov	r7, r3
 80033b8:	42be      	cmp	r6, r7
 80033ba:	680b      	ldr	r3, [r1, #0]
 80033bc:	4682      	mov	sl, r0
 80033be:	460c      	mov	r4, r1
 80033c0:	4690      	mov	r8, r2
 80033c2:	d82c      	bhi.n	800341e <__ssputs_r+0x6e>
 80033c4:	898a      	ldrh	r2, [r1, #12]
 80033c6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80033ca:	d026      	beq.n	800341a <__ssputs_r+0x6a>
 80033cc:	6965      	ldr	r5, [r4, #20]
 80033ce:	6909      	ldr	r1, [r1, #16]
 80033d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80033d4:	eba3 0901 	sub.w	r9, r3, r1
 80033d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80033dc:	1c7b      	adds	r3, r7, #1
 80033de:	444b      	add	r3, r9
 80033e0:	106d      	asrs	r5, r5, #1
 80033e2:	429d      	cmp	r5, r3
 80033e4:	bf38      	it	cc
 80033e6:	461d      	movcc	r5, r3
 80033e8:	0553      	lsls	r3, r2, #21
 80033ea:	d527      	bpl.n	800343c <__ssputs_r+0x8c>
 80033ec:	4629      	mov	r1, r5
 80033ee:	f7ff ff53 	bl	8003298 <_malloc_r>
 80033f2:	4606      	mov	r6, r0
 80033f4:	b360      	cbz	r0, 8003450 <__ssputs_r+0xa0>
 80033f6:	6921      	ldr	r1, [r4, #16]
 80033f8:	464a      	mov	r2, r9
 80033fa:	f000 faeb 	bl	80039d4 <memcpy>
 80033fe:	89a3      	ldrh	r3, [r4, #12]
 8003400:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003408:	81a3      	strh	r3, [r4, #12]
 800340a:	6126      	str	r6, [r4, #16]
 800340c:	6165      	str	r5, [r4, #20]
 800340e:	444e      	add	r6, r9
 8003410:	eba5 0509 	sub.w	r5, r5, r9
 8003414:	6026      	str	r6, [r4, #0]
 8003416:	60a5      	str	r5, [r4, #8]
 8003418:	463e      	mov	r6, r7
 800341a:	42be      	cmp	r6, r7
 800341c:	d900      	bls.n	8003420 <__ssputs_r+0x70>
 800341e:	463e      	mov	r6, r7
 8003420:	6820      	ldr	r0, [r4, #0]
 8003422:	4632      	mov	r2, r6
 8003424:	4641      	mov	r1, r8
 8003426:	f000 faab 	bl	8003980 <memmove>
 800342a:	68a3      	ldr	r3, [r4, #8]
 800342c:	1b9b      	subs	r3, r3, r6
 800342e:	60a3      	str	r3, [r4, #8]
 8003430:	6823      	ldr	r3, [r4, #0]
 8003432:	4433      	add	r3, r6
 8003434:	6023      	str	r3, [r4, #0]
 8003436:	2000      	movs	r0, #0
 8003438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800343c:	462a      	mov	r2, r5
 800343e:	f000 fad7 	bl	80039f0 <_realloc_r>
 8003442:	4606      	mov	r6, r0
 8003444:	2800      	cmp	r0, #0
 8003446:	d1e0      	bne.n	800340a <__ssputs_r+0x5a>
 8003448:	6921      	ldr	r1, [r4, #16]
 800344a:	4650      	mov	r0, sl
 800344c:	f7ff feb8 	bl	80031c0 <_free_r>
 8003450:	230c      	movs	r3, #12
 8003452:	f8ca 3000 	str.w	r3, [sl]
 8003456:	89a3      	ldrh	r3, [r4, #12]
 8003458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800345c:	81a3      	strh	r3, [r4, #12]
 800345e:	f04f 30ff 	mov.w	r0, #4294967295
 8003462:	e7e9      	b.n	8003438 <__ssputs_r+0x88>

08003464 <_svfiprintf_r>:
 8003464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003468:	4698      	mov	r8, r3
 800346a:	898b      	ldrh	r3, [r1, #12]
 800346c:	061b      	lsls	r3, r3, #24
 800346e:	b09d      	sub	sp, #116	; 0x74
 8003470:	4607      	mov	r7, r0
 8003472:	460d      	mov	r5, r1
 8003474:	4614      	mov	r4, r2
 8003476:	d50e      	bpl.n	8003496 <_svfiprintf_r+0x32>
 8003478:	690b      	ldr	r3, [r1, #16]
 800347a:	b963      	cbnz	r3, 8003496 <_svfiprintf_r+0x32>
 800347c:	2140      	movs	r1, #64	; 0x40
 800347e:	f7ff ff0b 	bl	8003298 <_malloc_r>
 8003482:	6028      	str	r0, [r5, #0]
 8003484:	6128      	str	r0, [r5, #16]
 8003486:	b920      	cbnz	r0, 8003492 <_svfiprintf_r+0x2e>
 8003488:	230c      	movs	r3, #12
 800348a:	603b      	str	r3, [r7, #0]
 800348c:	f04f 30ff 	mov.w	r0, #4294967295
 8003490:	e0d0      	b.n	8003634 <_svfiprintf_r+0x1d0>
 8003492:	2340      	movs	r3, #64	; 0x40
 8003494:	616b      	str	r3, [r5, #20]
 8003496:	2300      	movs	r3, #0
 8003498:	9309      	str	r3, [sp, #36]	; 0x24
 800349a:	2320      	movs	r3, #32
 800349c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80034a4:	2330      	movs	r3, #48	; 0x30
 80034a6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800364c <_svfiprintf_r+0x1e8>
 80034aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034ae:	f04f 0901 	mov.w	r9, #1
 80034b2:	4623      	mov	r3, r4
 80034b4:	469a      	mov	sl, r3
 80034b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034ba:	b10a      	cbz	r2, 80034c0 <_svfiprintf_r+0x5c>
 80034bc:	2a25      	cmp	r2, #37	; 0x25
 80034be:	d1f9      	bne.n	80034b4 <_svfiprintf_r+0x50>
 80034c0:	ebba 0b04 	subs.w	fp, sl, r4
 80034c4:	d00b      	beq.n	80034de <_svfiprintf_r+0x7a>
 80034c6:	465b      	mov	r3, fp
 80034c8:	4622      	mov	r2, r4
 80034ca:	4629      	mov	r1, r5
 80034cc:	4638      	mov	r0, r7
 80034ce:	f7ff ff6f 	bl	80033b0 <__ssputs_r>
 80034d2:	3001      	adds	r0, #1
 80034d4:	f000 80a9 	beq.w	800362a <_svfiprintf_r+0x1c6>
 80034d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034da:	445a      	add	r2, fp
 80034dc:	9209      	str	r2, [sp, #36]	; 0x24
 80034de:	f89a 3000 	ldrb.w	r3, [sl]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 80a1 	beq.w	800362a <_svfiprintf_r+0x1c6>
 80034e8:	2300      	movs	r3, #0
 80034ea:	f04f 32ff 	mov.w	r2, #4294967295
 80034ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034f2:	f10a 0a01 	add.w	sl, sl, #1
 80034f6:	9304      	str	r3, [sp, #16]
 80034f8:	9307      	str	r3, [sp, #28]
 80034fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034fe:	931a      	str	r3, [sp, #104]	; 0x68
 8003500:	4654      	mov	r4, sl
 8003502:	2205      	movs	r2, #5
 8003504:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003508:	4850      	ldr	r0, [pc, #320]	; (800364c <_svfiprintf_r+0x1e8>)
 800350a:	f7fc fe71 	bl	80001f0 <memchr>
 800350e:	9a04      	ldr	r2, [sp, #16]
 8003510:	b9d8      	cbnz	r0, 800354a <_svfiprintf_r+0xe6>
 8003512:	06d0      	lsls	r0, r2, #27
 8003514:	bf44      	itt	mi
 8003516:	2320      	movmi	r3, #32
 8003518:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800351c:	0711      	lsls	r1, r2, #28
 800351e:	bf44      	itt	mi
 8003520:	232b      	movmi	r3, #43	; 0x2b
 8003522:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003526:	f89a 3000 	ldrb.w	r3, [sl]
 800352a:	2b2a      	cmp	r3, #42	; 0x2a
 800352c:	d015      	beq.n	800355a <_svfiprintf_r+0xf6>
 800352e:	9a07      	ldr	r2, [sp, #28]
 8003530:	4654      	mov	r4, sl
 8003532:	2000      	movs	r0, #0
 8003534:	f04f 0c0a 	mov.w	ip, #10
 8003538:	4621      	mov	r1, r4
 800353a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800353e:	3b30      	subs	r3, #48	; 0x30
 8003540:	2b09      	cmp	r3, #9
 8003542:	d94d      	bls.n	80035e0 <_svfiprintf_r+0x17c>
 8003544:	b1b0      	cbz	r0, 8003574 <_svfiprintf_r+0x110>
 8003546:	9207      	str	r2, [sp, #28]
 8003548:	e014      	b.n	8003574 <_svfiprintf_r+0x110>
 800354a:	eba0 0308 	sub.w	r3, r0, r8
 800354e:	fa09 f303 	lsl.w	r3, r9, r3
 8003552:	4313      	orrs	r3, r2
 8003554:	9304      	str	r3, [sp, #16]
 8003556:	46a2      	mov	sl, r4
 8003558:	e7d2      	b.n	8003500 <_svfiprintf_r+0x9c>
 800355a:	9b03      	ldr	r3, [sp, #12]
 800355c:	1d19      	adds	r1, r3, #4
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	9103      	str	r1, [sp, #12]
 8003562:	2b00      	cmp	r3, #0
 8003564:	bfbb      	ittet	lt
 8003566:	425b      	neglt	r3, r3
 8003568:	f042 0202 	orrlt.w	r2, r2, #2
 800356c:	9307      	strge	r3, [sp, #28]
 800356e:	9307      	strlt	r3, [sp, #28]
 8003570:	bfb8      	it	lt
 8003572:	9204      	strlt	r2, [sp, #16]
 8003574:	7823      	ldrb	r3, [r4, #0]
 8003576:	2b2e      	cmp	r3, #46	; 0x2e
 8003578:	d10c      	bne.n	8003594 <_svfiprintf_r+0x130>
 800357a:	7863      	ldrb	r3, [r4, #1]
 800357c:	2b2a      	cmp	r3, #42	; 0x2a
 800357e:	d134      	bne.n	80035ea <_svfiprintf_r+0x186>
 8003580:	9b03      	ldr	r3, [sp, #12]
 8003582:	1d1a      	adds	r2, r3, #4
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	9203      	str	r2, [sp, #12]
 8003588:	2b00      	cmp	r3, #0
 800358a:	bfb8      	it	lt
 800358c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003590:	3402      	adds	r4, #2
 8003592:	9305      	str	r3, [sp, #20]
 8003594:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800365c <_svfiprintf_r+0x1f8>
 8003598:	7821      	ldrb	r1, [r4, #0]
 800359a:	2203      	movs	r2, #3
 800359c:	4650      	mov	r0, sl
 800359e:	f7fc fe27 	bl	80001f0 <memchr>
 80035a2:	b138      	cbz	r0, 80035b4 <_svfiprintf_r+0x150>
 80035a4:	9b04      	ldr	r3, [sp, #16]
 80035a6:	eba0 000a 	sub.w	r0, r0, sl
 80035aa:	2240      	movs	r2, #64	; 0x40
 80035ac:	4082      	lsls	r2, r0
 80035ae:	4313      	orrs	r3, r2
 80035b0:	3401      	adds	r4, #1
 80035b2:	9304      	str	r3, [sp, #16]
 80035b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035b8:	4825      	ldr	r0, [pc, #148]	; (8003650 <_svfiprintf_r+0x1ec>)
 80035ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035be:	2206      	movs	r2, #6
 80035c0:	f7fc fe16 	bl	80001f0 <memchr>
 80035c4:	2800      	cmp	r0, #0
 80035c6:	d038      	beq.n	800363a <_svfiprintf_r+0x1d6>
 80035c8:	4b22      	ldr	r3, [pc, #136]	; (8003654 <_svfiprintf_r+0x1f0>)
 80035ca:	bb1b      	cbnz	r3, 8003614 <_svfiprintf_r+0x1b0>
 80035cc:	9b03      	ldr	r3, [sp, #12]
 80035ce:	3307      	adds	r3, #7
 80035d0:	f023 0307 	bic.w	r3, r3, #7
 80035d4:	3308      	adds	r3, #8
 80035d6:	9303      	str	r3, [sp, #12]
 80035d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035da:	4433      	add	r3, r6
 80035dc:	9309      	str	r3, [sp, #36]	; 0x24
 80035de:	e768      	b.n	80034b2 <_svfiprintf_r+0x4e>
 80035e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80035e4:	460c      	mov	r4, r1
 80035e6:	2001      	movs	r0, #1
 80035e8:	e7a6      	b.n	8003538 <_svfiprintf_r+0xd4>
 80035ea:	2300      	movs	r3, #0
 80035ec:	3401      	adds	r4, #1
 80035ee:	9305      	str	r3, [sp, #20]
 80035f0:	4619      	mov	r1, r3
 80035f2:	f04f 0c0a 	mov.w	ip, #10
 80035f6:	4620      	mov	r0, r4
 80035f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035fc:	3a30      	subs	r2, #48	; 0x30
 80035fe:	2a09      	cmp	r2, #9
 8003600:	d903      	bls.n	800360a <_svfiprintf_r+0x1a6>
 8003602:	2b00      	cmp	r3, #0
 8003604:	d0c6      	beq.n	8003594 <_svfiprintf_r+0x130>
 8003606:	9105      	str	r1, [sp, #20]
 8003608:	e7c4      	b.n	8003594 <_svfiprintf_r+0x130>
 800360a:	fb0c 2101 	mla	r1, ip, r1, r2
 800360e:	4604      	mov	r4, r0
 8003610:	2301      	movs	r3, #1
 8003612:	e7f0      	b.n	80035f6 <_svfiprintf_r+0x192>
 8003614:	ab03      	add	r3, sp, #12
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	462a      	mov	r2, r5
 800361a:	4b0f      	ldr	r3, [pc, #60]	; (8003658 <_svfiprintf_r+0x1f4>)
 800361c:	a904      	add	r1, sp, #16
 800361e:	4638      	mov	r0, r7
 8003620:	f3af 8000 	nop.w
 8003624:	1c42      	adds	r2, r0, #1
 8003626:	4606      	mov	r6, r0
 8003628:	d1d6      	bne.n	80035d8 <_svfiprintf_r+0x174>
 800362a:	89ab      	ldrh	r3, [r5, #12]
 800362c:	065b      	lsls	r3, r3, #25
 800362e:	f53f af2d 	bmi.w	800348c <_svfiprintf_r+0x28>
 8003632:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003634:	b01d      	add	sp, #116	; 0x74
 8003636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800363a:	ab03      	add	r3, sp, #12
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	462a      	mov	r2, r5
 8003640:	4b05      	ldr	r3, [pc, #20]	; (8003658 <_svfiprintf_r+0x1f4>)
 8003642:	a904      	add	r1, sp, #16
 8003644:	4638      	mov	r0, r7
 8003646:	f000 f879 	bl	800373c <_printf_i>
 800364a:	e7eb      	b.n	8003624 <_svfiprintf_r+0x1c0>
 800364c:	08003aa0 	.word	0x08003aa0
 8003650:	08003aaa 	.word	0x08003aaa
 8003654:	00000000 	.word	0x00000000
 8003658:	080033b1 	.word	0x080033b1
 800365c:	08003aa6 	.word	0x08003aa6

08003660 <_printf_common>:
 8003660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003664:	4616      	mov	r6, r2
 8003666:	4699      	mov	r9, r3
 8003668:	688a      	ldr	r2, [r1, #8]
 800366a:	690b      	ldr	r3, [r1, #16]
 800366c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003670:	4293      	cmp	r3, r2
 8003672:	bfb8      	it	lt
 8003674:	4613      	movlt	r3, r2
 8003676:	6033      	str	r3, [r6, #0]
 8003678:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800367c:	4607      	mov	r7, r0
 800367e:	460c      	mov	r4, r1
 8003680:	b10a      	cbz	r2, 8003686 <_printf_common+0x26>
 8003682:	3301      	adds	r3, #1
 8003684:	6033      	str	r3, [r6, #0]
 8003686:	6823      	ldr	r3, [r4, #0]
 8003688:	0699      	lsls	r1, r3, #26
 800368a:	bf42      	ittt	mi
 800368c:	6833      	ldrmi	r3, [r6, #0]
 800368e:	3302      	addmi	r3, #2
 8003690:	6033      	strmi	r3, [r6, #0]
 8003692:	6825      	ldr	r5, [r4, #0]
 8003694:	f015 0506 	ands.w	r5, r5, #6
 8003698:	d106      	bne.n	80036a8 <_printf_common+0x48>
 800369a:	f104 0a19 	add.w	sl, r4, #25
 800369e:	68e3      	ldr	r3, [r4, #12]
 80036a0:	6832      	ldr	r2, [r6, #0]
 80036a2:	1a9b      	subs	r3, r3, r2
 80036a4:	42ab      	cmp	r3, r5
 80036a6:	dc26      	bgt.n	80036f6 <_printf_common+0x96>
 80036a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036ac:	1e13      	subs	r3, r2, #0
 80036ae:	6822      	ldr	r2, [r4, #0]
 80036b0:	bf18      	it	ne
 80036b2:	2301      	movne	r3, #1
 80036b4:	0692      	lsls	r2, r2, #26
 80036b6:	d42b      	bmi.n	8003710 <_printf_common+0xb0>
 80036b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036bc:	4649      	mov	r1, r9
 80036be:	4638      	mov	r0, r7
 80036c0:	47c0      	blx	r8
 80036c2:	3001      	adds	r0, #1
 80036c4:	d01e      	beq.n	8003704 <_printf_common+0xa4>
 80036c6:	6823      	ldr	r3, [r4, #0]
 80036c8:	6922      	ldr	r2, [r4, #16]
 80036ca:	f003 0306 	and.w	r3, r3, #6
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	bf02      	ittt	eq
 80036d2:	68e5      	ldreq	r5, [r4, #12]
 80036d4:	6833      	ldreq	r3, [r6, #0]
 80036d6:	1aed      	subeq	r5, r5, r3
 80036d8:	68a3      	ldr	r3, [r4, #8]
 80036da:	bf0c      	ite	eq
 80036dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036e0:	2500      	movne	r5, #0
 80036e2:	4293      	cmp	r3, r2
 80036e4:	bfc4      	itt	gt
 80036e6:	1a9b      	subgt	r3, r3, r2
 80036e8:	18ed      	addgt	r5, r5, r3
 80036ea:	2600      	movs	r6, #0
 80036ec:	341a      	adds	r4, #26
 80036ee:	42b5      	cmp	r5, r6
 80036f0:	d11a      	bne.n	8003728 <_printf_common+0xc8>
 80036f2:	2000      	movs	r0, #0
 80036f4:	e008      	b.n	8003708 <_printf_common+0xa8>
 80036f6:	2301      	movs	r3, #1
 80036f8:	4652      	mov	r2, sl
 80036fa:	4649      	mov	r1, r9
 80036fc:	4638      	mov	r0, r7
 80036fe:	47c0      	blx	r8
 8003700:	3001      	adds	r0, #1
 8003702:	d103      	bne.n	800370c <_printf_common+0xac>
 8003704:	f04f 30ff 	mov.w	r0, #4294967295
 8003708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800370c:	3501      	adds	r5, #1
 800370e:	e7c6      	b.n	800369e <_printf_common+0x3e>
 8003710:	18e1      	adds	r1, r4, r3
 8003712:	1c5a      	adds	r2, r3, #1
 8003714:	2030      	movs	r0, #48	; 0x30
 8003716:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800371a:	4422      	add	r2, r4
 800371c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003720:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003724:	3302      	adds	r3, #2
 8003726:	e7c7      	b.n	80036b8 <_printf_common+0x58>
 8003728:	2301      	movs	r3, #1
 800372a:	4622      	mov	r2, r4
 800372c:	4649      	mov	r1, r9
 800372e:	4638      	mov	r0, r7
 8003730:	47c0      	blx	r8
 8003732:	3001      	adds	r0, #1
 8003734:	d0e6      	beq.n	8003704 <_printf_common+0xa4>
 8003736:	3601      	adds	r6, #1
 8003738:	e7d9      	b.n	80036ee <_printf_common+0x8e>
	...

0800373c <_printf_i>:
 800373c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003740:	7e0f      	ldrb	r7, [r1, #24]
 8003742:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003744:	2f78      	cmp	r7, #120	; 0x78
 8003746:	4691      	mov	r9, r2
 8003748:	4680      	mov	r8, r0
 800374a:	460c      	mov	r4, r1
 800374c:	469a      	mov	sl, r3
 800374e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003752:	d807      	bhi.n	8003764 <_printf_i+0x28>
 8003754:	2f62      	cmp	r7, #98	; 0x62
 8003756:	d80a      	bhi.n	800376e <_printf_i+0x32>
 8003758:	2f00      	cmp	r7, #0
 800375a:	f000 80d4 	beq.w	8003906 <_printf_i+0x1ca>
 800375e:	2f58      	cmp	r7, #88	; 0x58
 8003760:	f000 80c0 	beq.w	80038e4 <_printf_i+0x1a8>
 8003764:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003768:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800376c:	e03a      	b.n	80037e4 <_printf_i+0xa8>
 800376e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003772:	2b15      	cmp	r3, #21
 8003774:	d8f6      	bhi.n	8003764 <_printf_i+0x28>
 8003776:	a101      	add	r1, pc, #4	; (adr r1, 800377c <_printf_i+0x40>)
 8003778:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800377c:	080037d5 	.word	0x080037d5
 8003780:	080037e9 	.word	0x080037e9
 8003784:	08003765 	.word	0x08003765
 8003788:	08003765 	.word	0x08003765
 800378c:	08003765 	.word	0x08003765
 8003790:	08003765 	.word	0x08003765
 8003794:	080037e9 	.word	0x080037e9
 8003798:	08003765 	.word	0x08003765
 800379c:	08003765 	.word	0x08003765
 80037a0:	08003765 	.word	0x08003765
 80037a4:	08003765 	.word	0x08003765
 80037a8:	080038ed 	.word	0x080038ed
 80037ac:	08003815 	.word	0x08003815
 80037b0:	080038a7 	.word	0x080038a7
 80037b4:	08003765 	.word	0x08003765
 80037b8:	08003765 	.word	0x08003765
 80037bc:	0800390f 	.word	0x0800390f
 80037c0:	08003765 	.word	0x08003765
 80037c4:	08003815 	.word	0x08003815
 80037c8:	08003765 	.word	0x08003765
 80037cc:	08003765 	.word	0x08003765
 80037d0:	080038af 	.word	0x080038af
 80037d4:	682b      	ldr	r3, [r5, #0]
 80037d6:	1d1a      	adds	r2, r3, #4
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	602a      	str	r2, [r5, #0]
 80037dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037e4:	2301      	movs	r3, #1
 80037e6:	e09f      	b.n	8003928 <_printf_i+0x1ec>
 80037e8:	6820      	ldr	r0, [r4, #0]
 80037ea:	682b      	ldr	r3, [r5, #0]
 80037ec:	0607      	lsls	r7, r0, #24
 80037ee:	f103 0104 	add.w	r1, r3, #4
 80037f2:	6029      	str	r1, [r5, #0]
 80037f4:	d501      	bpl.n	80037fa <_printf_i+0xbe>
 80037f6:	681e      	ldr	r6, [r3, #0]
 80037f8:	e003      	b.n	8003802 <_printf_i+0xc6>
 80037fa:	0646      	lsls	r6, r0, #25
 80037fc:	d5fb      	bpl.n	80037f6 <_printf_i+0xba>
 80037fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003802:	2e00      	cmp	r6, #0
 8003804:	da03      	bge.n	800380e <_printf_i+0xd2>
 8003806:	232d      	movs	r3, #45	; 0x2d
 8003808:	4276      	negs	r6, r6
 800380a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800380e:	485a      	ldr	r0, [pc, #360]	; (8003978 <_printf_i+0x23c>)
 8003810:	230a      	movs	r3, #10
 8003812:	e012      	b.n	800383a <_printf_i+0xfe>
 8003814:	682b      	ldr	r3, [r5, #0]
 8003816:	6820      	ldr	r0, [r4, #0]
 8003818:	1d19      	adds	r1, r3, #4
 800381a:	6029      	str	r1, [r5, #0]
 800381c:	0605      	lsls	r5, r0, #24
 800381e:	d501      	bpl.n	8003824 <_printf_i+0xe8>
 8003820:	681e      	ldr	r6, [r3, #0]
 8003822:	e002      	b.n	800382a <_printf_i+0xee>
 8003824:	0641      	lsls	r1, r0, #25
 8003826:	d5fb      	bpl.n	8003820 <_printf_i+0xe4>
 8003828:	881e      	ldrh	r6, [r3, #0]
 800382a:	4853      	ldr	r0, [pc, #332]	; (8003978 <_printf_i+0x23c>)
 800382c:	2f6f      	cmp	r7, #111	; 0x6f
 800382e:	bf0c      	ite	eq
 8003830:	2308      	moveq	r3, #8
 8003832:	230a      	movne	r3, #10
 8003834:	2100      	movs	r1, #0
 8003836:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800383a:	6865      	ldr	r5, [r4, #4]
 800383c:	60a5      	str	r5, [r4, #8]
 800383e:	2d00      	cmp	r5, #0
 8003840:	bfa2      	ittt	ge
 8003842:	6821      	ldrge	r1, [r4, #0]
 8003844:	f021 0104 	bicge.w	r1, r1, #4
 8003848:	6021      	strge	r1, [r4, #0]
 800384a:	b90e      	cbnz	r6, 8003850 <_printf_i+0x114>
 800384c:	2d00      	cmp	r5, #0
 800384e:	d04b      	beq.n	80038e8 <_printf_i+0x1ac>
 8003850:	4615      	mov	r5, r2
 8003852:	fbb6 f1f3 	udiv	r1, r6, r3
 8003856:	fb03 6711 	mls	r7, r3, r1, r6
 800385a:	5dc7      	ldrb	r7, [r0, r7]
 800385c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003860:	4637      	mov	r7, r6
 8003862:	42bb      	cmp	r3, r7
 8003864:	460e      	mov	r6, r1
 8003866:	d9f4      	bls.n	8003852 <_printf_i+0x116>
 8003868:	2b08      	cmp	r3, #8
 800386a:	d10b      	bne.n	8003884 <_printf_i+0x148>
 800386c:	6823      	ldr	r3, [r4, #0]
 800386e:	07de      	lsls	r6, r3, #31
 8003870:	d508      	bpl.n	8003884 <_printf_i+0x148>
 8003872:	6923      	ldr	r3, [r4, #16]
 8003874:	6861      	ldr	r1, [r4, #4]
 8003876:	4299      	cmp	r1, r3
 8003878:	bfde      	ittt	le
 800387a:	2330      	movle	r3, #48	; 0x30
 800387c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003880:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003884:	1b52      	subs	r2, r2, r5
 8003886:	6122      	str	r2, [r4, #16]
 8003888:	f8cd a000 	str.w	sl, [sp]
 800388c:	464b      	mov	r3, r9
 800388e:	aa03      	add	r2, sp, #12
 8003890:	4621      	mov	r1, r4
 8003892:	4640      	mov	r0, r8
 8003894:	f7ff fee4 	bl	8003660 <_printf_common>
 8003898:	3001      	adds	r0, #1
 800389a:	d14a      	bne.n	8003932 <_printf_i+0x1f6>
 800389c:	f04f 30ff 	mov.w	r0, #4294967295
 80038a0:	b004      	add	sp, #16
 80038a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038a6:	6823      	ldr	r3, [r4, #0]
 80038a8:	f043 0320 	orr.w	r3, r3, #32
 80038ac:	6023      	str	r3, [r4, #0]
 80038ae:	4833      	ldr	r0, [pc, #204]	; (800397c <_printf_i+0x240>)
 80038b0:	2778      	movs	r7, #120	; 0x78
 80038b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80038b6:	6823      	ldr	r3, [r4, #0]
 80038b8:	6829      	ldr	r1, [r5, #0]
 80038ba:	061f      	lsls	r7, r3, #24
 80038bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80038c0:	d402      	bmi.n	80038c8 <_printf_i+0x18c>
 80038c2:	065f      	lsls	r7, r3, #25
 80038c4:	bf48      	it	mi
 80038c6:	b2b6      	uxthmi	r6, r6
 80038c8:	07df      	lsls	r7, r3, #31
 80038ca:	bf48      	it	mi
 80038cc:	f043 0320 	orrmi.w	r3, r3, #32
 80038d0:	6029      	str	r1, [r5, #0]
 80038d2:	bf48      	it	mi
 80038d4:	6023      	strmi	r3, [r4, #0]
 80038d6:	b91e      	cbnz	r6, 80038e0 <_printf_i+0x1a4>
 80038d8:	6823      	ldr	r3, [r4, #0]
 80038da:	f023 0320 	bic.w	r3, r3, #32
 80038de:	6023      	str	r3, [r4, #0]
 80038e0:	2310      	movs	r3, #16
 80038e2:	e7a7      	b.n	8003834 <_printf_i+0xf8>
 80038e4:	4824      	ldr	r0, [pc, #144]	; (8003978 <_printf_i+0x23c>)
 80038e6:	e7e4      	b.n	80038b2 <_printf_i+0x176>
 80038e8:	4615      	mov	r5, r2
 80038ea:	e7bd      	b.n	8003868 <_printf_i+0x12c>
 80038ec:	682b      	ldr	r3, [r5, #0]
 80038ee:	6826      	ldr	r6, [r4, #0]
 80038f0:	6961      	ldr	r1, [r4, #20]
 80038f2:	1d18      	adds	r0, r3, #4
 80038f4:	6028      	str	r0, [r5, #0]
 80038f6:	0635      	lsls	r5, r6, #24
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	d501      	bpl.n	8003900 <_printf_i+0x1c4>
 80038fc:	6019      	str	r1, [r3, #0]
 80038fe:	e002      	b.n	8003906 <_printf_i+0x1ca>
 8003900:	0670      	lsls	r0, r6, #25
 8003902:	d5fb      	bpl.n	80038fc <_printf_i+0x1c0>
 8003904:	8019      	strh	r1, [r3, #0]
 8003906:	2300      	movs	r3, #0
 8003908:	6123      	str	r3, [r4, #16]
 800390a:	4615      	mov	r5, r2
 800390c:	e7bc      	b.n	8003888 <_printf_i+0x14c>
 800390e:	682b      	ldr	r3, [r5, #0]
 8003910:	1d1a      	adds	r2, r3, #4
 8003912:	602a      	str	r2, [r5, #0]
 8003914:	681d      	ldr	r5, [r3, #0]
 8003916:	6862      	ldr	r2, [r4, #4]
 8003918:	2100      	movs	r1, #0
 800391a:	4628      	mov	r0, r5
 800391c:	f7fc fc68 	bl	80001f0 <memchr>
 8003920:	b108      	cbz	r0, 8003926 <_printf_i+0x1ea>
 8003922:	1b40      	subs	r0, r0, r5
 8003924:	6060      	str	r0, [r4, #4]
 8003926:	6863      	ldr	r3, [r4, #4]
 8003928:	6123      	str	r3, [r4, #16]
 800392a:	2300      	movs	r3, #0
 800392c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003930:	e7aa      	b.n	8003888 <_printf_i+0x14c>
 8003932:	6923      	ldr	r3, [r4, #16]
 8003934:	462a      	mov	r2, r5
 8003936:	4649      	mov	r1, r9
 8003938:	4640      	mov	r0, r8
 800393a:	47d0      	blx	sl
 800393c:	3001      	adds	r0, #1
 800393e:	d0ad      	beq.n	800389c <_printf_i+0x160>
 8003940:	6823      	ldr	r3, [r4, #0]
 8003942:	079b      	lsls	r3, r3, #30
 8003944:	d413      	bmi.n	800396e <_printf_i+0x232>
 8003946:	68e0      	ldr	r0, [r4, #12]
 8003948:	9b03      	ldr	r3, [sp, #12]
 800394a:	4298      	cmp	r0, r3
 800394c:	bfb8      	it	lt
 800394e:	4618      	movlt	r0, r3
 8003950:	e7a6      	b.n	80038a0 <_printf_i+0x164>
 8003952:	2301      	movs	r3, #1
 8003954:	4632      	mov	r2, r6
 8003956:	4649      	mov	r1, r9
 8003958:	4640      	mov	r0, r8
 800395a:	47d0      	blx	sl
 800395c:	3001      	adds	r0, #1
 800395e:	d09d      	beq.n	800389c <_printf_i+0x160>
 8003960:	3501      	adds	r5, #1
 8003962:	68e3      	ldr	r3, [r4, #12]
 8003964:	9903      	ldr	r1, [sp, #12]
 8003966:	1a5b      	subs	r3, r3, r1
 8003968:	42ab      	cmp	r3, r5
 800396a:	dcf2      	bgt.n	8003952 <_printf_i+0x216>
 800396c:	e7eb      	b.n	8003946 <_printf_i+0x20a>
 800396e:	2500      	movs	r5, #0
 8003970:	f104 0619 	add.w	r6, r4, #25
 8003974:	e7f5      	b.n	8003962 <_printf_i+0x226>
 8003976:	bf00      	nop
 8003978:	08003ab1 	.word	0x08003ab1
 800397c:	08003ac2 	.word	0x08003ac2

08003980 <memmove>:
 8003980:	4288      	cmp	r0, r1
 8003982:	b510      	push	{r4, lr}
 8003984:	eb01 0402 	add.w	r4, r1, r2
 8003988:	d902      	bls.n	8003990 <memmove+0x10>
 800398a:	4284      	cmp	r4, r0
 800398c:	4623      	mov	r3, r4
 800398e:	d807      	bhi.n	80039a0 <memmove+0x20>
 8003990:	1e43      	subs	r3, r0, #1
 8003992:	42a1      	cmp	r1, r4
 8003994:	d008      	beq.n	80039a8 <memmove+0x28>
 8003996:	f811 2b01 	ldrb.w	r2, [r1], #1
 800399a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800399e:	e7f8      	b.n	8003992 <memmove+0x12>
 80039a0:	4402      	add	r2, r0
 80039a2:	4601      	mov	r1, r0
 80039a4:	428a      	cmp	r2, r1
 80039a6:	d100      	bne.n	80039aa <memmove+0x2a>
 80039a8:	bd10      	pop	{r4, pc}
 80039aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80039ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80039b2:	e7f7      	b.n	80039a4 <memmove+0x24>

080039b4 <_sbrk_r>:
 80039b4:	b538      	push	{r3, r4, r5, lr}
 80039b6:	4d06      	ldr	r5, [pc, #24]	; (80039d0 <_sbrk_r+0x1c>)
 80039b8:	2300      	movs	r3, #0
 80039ba:	4604      	mov	r4, r0
 80039bc:	4608      	mov	r0, r1
 80039be:	602b      	str	r3, [r5, #0]
 80039c0:	f7fd f96e 	bl	8000ca0 <_sbrk>
 80039c4:	1c43      	adds	r3, r0, #1
 80039c6:	d102      	bne.n	80039ce <_sbrk_r+0x1a>
 80039c8:	682b      	ldr	r3, [r5, #0]
 80039ca:	b103      	cbz	r3, 80039ce <_sbrk_r+0x1a>
 80039cc:	6023      	str	r3, [r4, #0]
 80039ce:	bd38      	pop	{r3, r4, r5, pc}
 80039d0:	2000028c 	.word	0x2000028c

080039d4 <memcpy>:
 80039d4:	440a      	add	r2, r1
 80039d6:	4291      	cmp	r1, r2
 80039d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80039dc:	d100      	bne.n	80039e0 <memcpy+0xc>
 80039de:	4770      	bx	lr
 80039e0:	b510      	push	{r4, lr}
 80039e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039ea:	4291      	cmp	r1, r2
 80039ec:	d1f9      	bne.n	80039e2 <memcpy+0xe>
 80039ee:	bd10      	pop	{r4, pc}

080039f0 <_realloc_r>:
 80039f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039f4:	4680      	mov	r8, r0
 80039f6:	4614      	mov	r4, r2
 80039f8:	460e      	mov	r6, r1
 80039fa:	b921      	cbnz	r1, 8003a06 <_realloc_r+0x16>
 80039fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a00:	4611      	mov	r1, r2
 8003a02:	f7ff bc49 	b.w	8003298 <_malloc_r>
 8003a06:	b92a      	cbnz	r2, 8003a14 <_realloc_r+0x24>
 8003a08:	f7ff fbda 	bl	80031c0 <_free_r>
 8003a0c:	4625      	mov	r5, r4
 8003a0e:	4628      	mov	r0, r5
 8003a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a14:	f000 f81b 	bl	8003a4e <_malloc_usable_size_r>
 8003a18:	4284      	cmp	r4, r0
 8003a1a:	4607      	mov	r7, r0
 8003a1c:	d802      	bhi.n	8003a24 <_realloc_r+0x34>
 8003a1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003a22:	d812      	bhi.n	8003a4a <_realloc_r+0x5a>
 8003a24:	4621      	mov	r1, r4
 8003a26:	4640      	mov	r0, r8
 8003a28:	f7ff fc36 	bl	8003298 <_malloc_r>
 8003a2c:	4605      	mov	r5, r0
 8003a2e:	2800      	cmp	r0, #0
 8003a30:	d0ed      	beq.n	8003a0e <_realloc_r+0x1e>
 8003a32:	42bc      	cmp	r4, r7
 8003a34:	4622      	mov	r2, r4
 8003a36:	4631      	mov	r1, r6
 8003a38:	bf28      	it	cs
 8003a3a:	463a      	movcs	r2, r7
 8003a3c:	f7ff ffca 	bl	80039d4 <memcpy>
 8003a40:	4631      	mov	r1, r6
 8003a42:	4640      	mov	r0, r8
 8003a44:	f7ff fbbc 	bl	80031c0 <_free_r>
 8003a48:	e7e1      	b.n	8003a0e <_realloc_r+0x1e>
 8003a4a:	4635      	mov	r5, r6
 8003a4c:	e7df      	b.n	8003a0e <_realloc_r+0x1e>

08003a4e <_malloc_usable_size_r>:
 8003a4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a52:	1f18      	subs	r0, r3, #4
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	bfbc      	itt	lt
 8003a58:	580b      	ldrlt	r3, [r1, r0]
 8003a5a:	18c0      	addlt	r0, r0, r3
 8003a5c:	4770      	bx	lr
	...

08003a60 <_init>:
 8003a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a62:	bf00      	nop
 8003a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a66:	bc08      	pop	{r3}
 8003a68:	469e      	mov	lr, r3
 8003a6a:	4770      	bx	lr

08003a6c <_fini>:
 8003a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a6e:	bf00      	nop
 8003a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a72:	bc08      	pop	{r3}
 8003a74:	469e      	mov	lr, r3
 8003a76:	4770      	bx	lr
