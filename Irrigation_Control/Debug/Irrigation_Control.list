
Irrigation_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  08006790  08006790  00016790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c84  08006c84  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006c84  08006c84  00016c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c8c  08006c8c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c8c  08006c8c  00016c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c90  08006c90  00016c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006c94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000398  20000078  08006d08  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  08006d08  00020410  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eb7c  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f55  00000000  00000000  0002ec63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc8  00000000  00000000  00030bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ad7  00000000  00000000  00031980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000178f3  00000000  00000000  00032457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010082  00000000  00000000  00049d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099701  00000000  00000000  00059dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004004  00000000  00000000  000f34d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000f74d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006778 	.word	0x08006778

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08006778 	.word	0x08006778

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000590:	f001 fea4 	bl	80022dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 face 	bl	8000b34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f000 fd42 	bl	8001020 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059c:	f000 fcec 	bl	8000f78 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80005a0:	f000 fbf0 	bl	8000d84 <MX_TIM3_Init>
  MX_TIM2_Init();
 80005a4:	f000 fb78 	bl	8000c98 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80005a8:	f000 fcbc 	bl	8000f24 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80005ac:	f000 fd0e 	bl	8000fcc <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80005b0:	f000 fb20 	bl	8000bf4 <MX_ADC1_Init>
  MX_TIM5_Init();
 80005b4:	f000 fc68 	bl	8000e88 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

    /* ------------------ SET UP MODE BEGIN ------------------ */
  // Turn off Nucleo green LED
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2120      	movs	r1, #32
 80005bc:	48aa      	ldr	r0, [pc, #680]	; (8000868 <main+0x2dc>)
 80005be:	f002 fe2d 	bl	800321c <HAL_GPIO_WritePin>
  UART_Send_MSG("\r SETUP MODE");
 80005c2:	48aa      	ldr	r0, [pc, #680]	; (800086c <main+0x2e0>)
 80005c4:	f001 f89c 	bl	8001700 <UART_Send_MSG>
  //parse PWM options
  UART_Parse_MSG("\r\n\n PMW option: 0) Manual Control; 1) 60% PMW; 2) 80% PMW; 3) 99% PMW;",
 80005c8:	2301      	movs	r3, #1
 80005ca:	4aa9      	ldr	r2, [pc, #676]	; (8000870 <main+0x2e4>)
 80005cc:	49a9      	ldr	r1, [pc, #676]	; (8000874 <main+0x2e8>)
 80005ce:	48aa      	ldr	r0, [pc, #680]	; (8000878 <main+0x2ec>)
 80005d0:	f001 f806 	bl	80015e0 <UART_Parse_MSG>
			           "\r\n INLET MOTOR SPEED PWM (option 0-3): ", &INLET_PWM, 1);
  UART_Parse_MSG("",
 80005d4:	2301      	movs	r3, #1
 80005d6:	4aa9      	ldr	r2, [pc, #676]	; (800087c <main+0x2f0>)
 80005d8:	49a9      	ldr	r1, [pc, #676]	; (8000880 <main+0x2f4>)
 80005da:	48aa      	ldr	r0, [pc, #680]	; (8000884 <main+0x2f8>)
 80005dc:	f001 f800 	bl	80015e0 <UART_Parse_MSG>
			      		 "\r\n ZONE 1 MOTOR SPEED PWM (option 0-3): ", &Zone_1_PWM, 1);
  UART_Parse_MSG("",
 80005e0:	2301      	movs	r3, #1
 80005e2:	4aa9      	ldr	r2, [pc, #676]	; (8000888 <main+0x2fc>)
 80005e4:	49a9      	ldr	r1, [pc, #676]	; (800088c <main+0x300>)
 80005e6:	48a7      	ldr	r0, [pc, #668]	; (8000884 <main+0x2f8>)
 80005e8:	f000 fffa 	bl	80015e0 <UART_Parse_MSG>
			           "\r\n ZONE 2 MOTOR SPEED PWM (option 0-3): ", &Zone_2_PWM, 1);
  UART_Parse_MSG("",
 80005ec:	2301      	movs	r3, #1
 80005ee:	4aa8      	ldr	r2, [pc, #672]	; (8000890 <main+0x304>)
 80005f0:	49a8      	ldr	r1, [pc, #672]	; (8000894 <main+0x308>)
 80005f2:	48a4      	ldr	r0, [pc, #656]	; (8000884 <main+0x2f8>)
 80005f4:	f000 fff4 	bl	80015e0 <UART_Parse_MSG>
			           "\r\n ZONE 3 MOTOR SPEED PWM (option 0-3): ", &Zone_3_PWM, 1);
  //parse CLOCK options
  UART_Parse_MSG("\r\n\n CLOCK option: 00 - Midnight, 01 - 1:00am, ... , 12 - noon, 13 - 1:00pm",
 80005f8:	2302      	movs	r3, #2
 80005fa:	4aa7      	ldr	r2, [pc, #668]	; (8000898 <main+0x30c>)
 80005fc:	49a7      	ldr	r1, [pc, #668]	; (800089c <main+0x310>)
 80005fe:	48a8      	ldr	r0, [pc, #672]	; (80008a0 <main+0x314>)
 8000600:	f000 ffee 	bl	80015e0 <UART_Parse_MSG>
			           "\r\n CURRENT WALL CLOCK START TIME(0-23): ", &WALL_CLK_START, 2);
  UART_Parse_MSG("",
 8000604:	2302      	movs	r3, #2
 8000606:	4aa7      	ldr	r2, [pc, #668]	; (80008a4 <main+0x318>)
 8000608:	49a7      	ldr	r1, [pc, #668]	; (80008a8 <main+0x31c>)
 800060a:	489e      	ldr	r0, [pc, #632]	; (8000884 <main+0x2f8>)
 800060c:	f000 ffe8 	bl	80015e0 <UART_Parse_MSG>
			           "\r\n\n INLET WALL CLOCK START TIME(0-23): ", &INLET_CLK_START, 2);
  UART_Parse_MSG("",
 8000610:	2302      	movs	r3, #2
 8000612:	4aa6      	ldr	r2, [pc, #664]	; (80008ac <main+0x320>)
 8000614:	49a6      	ldr	r1, [pc, #664]	; (80008b0 <main+0x324>)
 8000616:	489b      	ldr	r0, [pc, #620]	; (8000884 <main+0x2f8>)
 8000618:	f000 ffe2 	bl	80015e0 <UART_Parse_MSG>
			           "\r\n INLET WALL CLOCK STOP TIME(0-23): ", &INLET_CLK_STOP, 2);
  UART_Parse_MSG("",
 800061c:	2302      	movs	r3, #2
 800061e:	4aa5      	ldr	r2, [pc, #660]	; (80008b4 <main+0x328>)
 8000620:	49a5      	ldr	r1, [pc, #660]	; (80008b8 <main+0x32c>)
 8000622:	4898      	ldr	r0, [pc, #608]	; (8000884 <main+0x2f8>)
 8000624:	f000 ffdc 	bl	80015e0 <UART_Parse_MSG>
			           "\r\n\n ZONE 1 WALL CLOCK START TIME(0-23): ", &Zone_1_CLK_START, 2);
  UART_Parse_MSG("",
 8000628:	2302      	movs	r3, #2
 800062a:	4aa4      	ldr	r2, [pc, #656]	; (80008bc <main+0x330>)
 800062c:	49a4      	ldr	r1, [pc, #656]	; (80008c0 <main+0x334>)
 800062e:	4895      	ldr	r0, [pc, #596]	; (8000884 <main+0x2f8>)
 8000630:	f000 ffd6 	bl	80015e0 <UART_Parse_MSG>
			           "\r\n ZONE 1 WALL CLOCK STOP TIME(0-23): ", &Zone_1_CLK_STOP, 2);
  UART_Parse_MSG("",
 8000634:	2302      	movs	r3, #2
 8000636:	4aa3      	ldr	r2, [pc, #652]	; (80008c4 <main+0x338>)
 8000638:	49a3      	ldr	r1, [pc, #652]	; (80008c8 <main+0x33c>)
 800063a:	4892      	ldr	r0, [pc, #584]	; (8000884 <main+0x2f8>)
 800063c:	f000 ffd0 	bl	80015e0 <UART_Parse_MSG>
			           "\r\n\n ZONE 2 WALL CLOCK START TIME(0-23): ", &Zone_2_CLK_START, 2);
  UART_Parse_MSG("",
 8000640:	2302      	movs	r3, #2
 8000642:	4aa2      	ldr	r2, [pc, #648]	; (80008cc <main+0x340>)
 8000644:	49a2      	ldr	r1, [pc, #648]	; (80008d0 <main+0x344>)
 8000646:	488f      	ldr	r0, [pc, #572]	; (8000884 <main+0x2f8>)
 8000648:	f000 ffca 	bl	80015e0 <UART_Parse_MSG>
			           "\r\n ZONE 2 WALL CLOCK STOP TIME(0-23): ", &Zone_2_CLK_STOP, 2);
  UART_Parse_MSG("",
 800064c:	2302      	movs	r3, #2
 800064e:	4aa1      	ldr	r2, [pc, #644]	; (80008d4 <main+0x348>)
 8000650:	49a1      	ldr	r1, [pc, #644]	; (80008d8 <main+0x34c>)
 8000652:	488c      	ldr	r0, [pc, #560]	; (8000884 <main+0x2f8>)
 8000654:	f000 ffc4 	bl	80015e0 <UART_Parse_MSG>
			           "\r\n\n ZONE 3 WALL CLOCK START TIME(0-23): ", &Zone_3_CLK_START, 2);
  UART_Parse_MSG("",
 8000658:	2302      	movs	r3, #2
 800065a:	4aa0      	ldr	r2, [pc, #640]	; (80008dc <main+0x350>)
 800065c:	49a0      	ldr	r1, [pc, #640]	; (80008e0 <main+0x354>)
 800065e:	4889      	ldr	r0, [pc, #548]	; (8000884 <main+0x2f8>)
 8000660:	f000 ffbe 	bl	80015e0 <UART_Parse_MSG>
			           "\r\n ZONE 3 WALL CLOCK STOP TIME(0-23): ", &Zone_3_CLK_STOP, 2);
  UART_Send_MSG("\r\n\n SETUP MODE END");
 8000664:	489f      	ldr	r0, [pc, #636]	; (80008e4 <main+0x358>)
 8000666:	f001 f84b 	bl	8001700 <UART_Send_MSG>
  // wait for run mode to start (blue PB)
  while (RUN_MODE_START_FLAG == 0) {
 800066a:	e006      	b.n	800067a <main+0xee>
    // Flash controller green LED
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800066c:	2120      	movs	r1, #32
 800066e:	487e      	ldr	r0, [pc, #504]	; (8000868 <main+0x2dc>)
 8000670:	f002 fded 	bl	800324e <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8000674:	2064      	movs	r0, #100	; 0x64
 8000676:	f001 fea3 	bl	80023c0 <HAL_Delay>
  while (RUN_MODE_START_FLAG == 0) {
 800067a:	4b9b      	ldr	r3, [pc, #620]	; (80008e8 <main+0x35c>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	b2db      	uxtb	r3, r3
 8000680:	2b00      	cmp	r3, #0
 8000682:	d0f3      	beq.n	800066c <main+0xe0>
  };
    /* ------------------ SET UP MODE END ------------------ */

    /* ------------------ RUN MODE ------------------ */
	// Turn ON controller green LED
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000684:	2201      	movs	r2, #1
 8000686:	2120      	movs	r1, #32
 8000688:	4877      	ldr	r0, [pc, #476]	; (8000868 <main+0x2dc>)
 800068a:	f002 fdc7 	bl	800321c <HAL_GPIO_WritePin>
	UART_Send_MSG("\r\n\n RUN MODE");
 800068e:	4897      	ldr	r0, [pc, #604]	; (80008ec <main+0x360>)
 8000690:	f001 f836 	bl	8001700 <UART_Send_MSG>
	UART_Send_MSG("\r\n");
 8000694:	4896      	ldr	r0, [pc, #600]	; (80008f0 <main+0x364>)
 8000696:	f001 f833 	bl	8001700 <UART_Send_MSG>

  // start up TIMER 5 for one second interrupts
	// start up TIMER 3 for DC motor control
	// start up TIMER 2 for Servo motor control
  HAL_TIM_Base_Start_IT(&htim5);
 800069a:	4896      	ldr	r0, [pc, #600]	; (80008f4 <main+0x368>)
 800069c:	f003 fb4c 	bl	8003d38 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Init(&htim3);
 80006a0:	4895      	ldr	r0, [pc, #596]	; (80008f8 <main+0x36c>)
 80006a2:	f003 fa9f 	bl	8003be4 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start(&htim2);
 80006a6:	4895      	ldr	r0, [pc, #596]	; (80008fc <main+0x370>)
 80006a8:	f003 faec 	bl	8003c84 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80006ac:	2100      	movs	r1, #0
 80006ae:	4893      	ldr	r0, [pc, #588]	; (80008fc <main+0x370>)
 80006b0:	f003 fbfe 	bl	8003eb0 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Init(&htim3);
 80006b4:	4890      	ldr	r0, [pc, #576]	; (80008f8 <main+0x36c>)
 80006b6:	f003 fa95 	bl	8003be4 <HAL_TIM_Base_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80006ba:	2100      	movs	r1, #0
 80006bc:	488e      	ldr	r0, [pc, #568]	; (80008f8 <main+0x36c>)
 80006be:	f003 fbf7 	bl	8003eb0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80006c2:	2108      	movs	r1, #8
 80006c4:	488c      	ldr	r0, [pc, #560]	; (80008f8 <main+0x36c>)
 80006c6:	f003 fbf3 	bl	8003eb0 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	/* -- INLET -- */
  	Tank_Level_Lo_Alarm = 0;
 80006ca:	4b8d      	ldr	r3, [pc, #564]	; (8000900 <main+0x374>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	701a      	strb	r2, [r3, #0]
  	Tank_Level_Hi_Alarm = 0;
 80006d0:	4b8c      	ldr	r3, [pc, #560]	; (8000904 <main+0x378>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	701a      	strb	r2, [r3, #0]
  	while ( (Current_Wall_CLK_Hour >= INLET_CLK_START && Current_Wall_CLK_Hour <= INLET_CLK_STOP) || Tank_Level_Hi_Alarm == 0 ) {
 80006d6:	e061      	b.n	800079c <main+0x210>
  		Current_Zone = INLET;
 80006d8:	4b8b      	ldr	r3, [pc, #556]	; (8000908 <main+0x37c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	701a      	strb	r2, [r3, #0]
  		Set_LED_Color(LED_PURPLE);
 80006de:	2004      	movs	r0, #4
 80006e0:	f001 fa86 	bl	8001bf0 <Set_LED_Color>
  		Control_Servo_Motor_PWM(0);
 80006e4:	2000      	movs	r0, #0
 80006e6:	f001 f8f7 	bl	80018d8 <Control_Servo_Motor_PWM>
  		Get_Water_Percent_depth();
 80006ea:	f001 fa07 	bl	8001afc <Get_Water_Percent_depth>

  		// Tank Full
  		if (Tank_Level_Hi_Alarm == 1) {
 80006ee:	4b85      	ldr	r3, [pc, #532]	; (8000904 <main+0x378>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d118      	bne.n	800072a <main+0x19e>
  			//Turn off Motor
  			Control_DC_Motor_PWM(0, 0);
 80006f8:	2100      	movs	r1, #0
 80006fa:	2000      	movs	r0, #0
 80006fc:	f001 f8bc 	bl	8001878 <Control_DC_Motor_PWM>
  			//Wait until the current sequence finish
  			while (Current_Wall_CLK_Hour >= INLET_CLK_START && Current_Wall_CLK_Hour <= INLET_CLK_STOP ) {
 8000700:	e002      	b.n	8000708 <main+0x17c>
  				Current_DC_Motor_Percent_PWM = 0;
 8000702:	4b82      	ldr	r3, [pc, #520]	; (800090c <main+0x380>)
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
  			while (Current_Wall_CLK_Hour >= INLET_CLK_START && Current_Wall_CLK_Hour <= INLET_CLK_STOP ) {
 8000708:	4b81      	ldr	r3, [pc, #516]	; (8000910 <main+0x384>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	b2da      	uxtb	r2, r3
 800070e:	4b65      	ldr	r3, [pc, #404]	; (80008a4 <main+0x318>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	b2db      	uxtb	r3, r3
 8000714:	429a      	cmp	r2, r3
 8000716:	d357      	bcc.n	80007c8 <main+0x23c>
 8000718:	4b7d      	ldr	r3, [pc, #500]	; (8000910 <main+0x384>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	b2da      	uxtb	r2, r3
 800071e:	4b63      	ldr	r3, [pc, #396]	; (80008ac <main+0x320>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	b2db      	uxtb	r3, r3
 8000724:	429a      	cmp	r2, r3
 8000726:	d9ec      	bls.n	8000702 <main+0x176>
  			}
  			break;
 8000728:	e04e      	b.n	80007c8 <main+0x23c>
  		}

  		if (INLET_PWM == 0) {
 800072a:	4b51      	ldr	r3, [pc, #324]	; (8000870 <main+0x2e4>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	b2db      	uxtb	r3, r3
 8000730:	2b00      	cmp	r3, #0
 8000732:	d10d      	bne.n	8000750 <main+0x1c4>
  			Current_DC_Motor_Percent_PWM = ADC_Manual_Control_Percent_PWM();
 8000734:	f001 f9b4 	bl	8001aa0 <ADC_Manual_Control_Percent_PWM>
 8000738:	4603      	mov	r3, r0
 800073a:	461a      	mov	r2, r3
 800073c:	4b73      	ldr	r3, [pc, #460]	; (800090c <main+0x380>)
 800073e:	701a      	strb	r2, [r3, #0]
  			Control_DC_Motor_PWM( ADC_Manual_Control_Percent_PWM() , 0);
 8000740:	f001 f9ae 	bl	8001aa0 <ADC_Manual_Control_Percent_PWM>
 8000744:	4603      	mov	r3, r0
 8000746:	2100      	movs	r1, #0
 8000748:	4618      	mov	r0, r3
 800074a:	f001 f895 	bl	8001878 <Control_DC_Motor_PWM>
 800074e:	e025      	b.n	800079c <main+0x210>
  		} else if (INLET_PWM == 1) {
 8000750:	4b47      	ldr	r3, [pc, #284]	; (8000870 <main+0x2e4>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	b2db      	uxtb	r3, r3
 8000756:	2b01      	cmp	r3, #1
 8000758:	d107      	bne.n	800076a <main+0x1de>
  			Current_DC_Motor_Percent_PWM = 60;
 800075a:	4b6c      	ldr	r3, [pc, #432]	; (800090c <main+0x380>)
 800075c:	223c      	movs	r2, #60	; 0x3c
 800075e:	701a      	strb	r2, [r3, #0]
  			Control_DC_Motor_PWM( 60 , 0);
 8000760:	2100      	movs	r1, #0
 8000762:	203c      	movs	r0, #60	; 0x3c
 8000764:	f001 f888 	bl	8001878 <Control_DC_Motor_PWM>
 8000768:	e018      	b.n	800079c <main+0x210>
  		} else if (INLET_PWM == 2) {
 800076a:	4b41      	ldr	r3, [pc, #260]	; (8000870 <main+0x2e4>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	b2db      	uxtb	r3, r3
 8000770:	2b02      	cmp	r3, #2
 8000772:	d107      	bne.n	8000784 <main+0x1f8>
  			Current_DC_Motor_Percent_PWM = 80;
 8000774:	4b65      	ldr	r3, [pc, #404]	; (800090c <main+0x380>)
 8000776:	2250      	movs	r2, #80	; 0x50
 8000778:	701a      	strb	r2, [r3, #0]
  			Control_DC_Motor_PWM( 80 , 0);
 800077a:	2100      	movs	r1, #0
 800077c:	2050      	movs	r0, #80	; 0x50
 800077e:	f001 f87b 	bl	8001878 <Control_DC_Motor_PWM>
 8000782:	e00b      	b.n	800079c <main+0x210>
  		} else if (INLET_PWM == 3) {
 8000784:	4b3a      	ldr	r3, [pc, #232]	; (8000870 <main+0x2e4>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	b2db      	uxtb	r3, r3
 800078a:	2b03      	cmp	r3, #3
 800078c:	d106      	bne.n	800079c <main+0x210>
  			Current_DC_Motor_Percent_PWM = 99;
 800078e:	4b5f      	ldr	r3, [pc, #380]	; (800090c <main+0x380>)
 8000790:	2263      	movs	r2, #99	; 0x63
 8000792:	701a      	strb	r2, [r3, #0]
  			Control_DC_Motor_PWM( 99 , 0);
 8000794:	2100      	movs	r1, #0
 8000796:	2063      	movs	r0, #99	; 0x63
 8000798:	f001 f86e 	bl	8001878 <Control_DC_Motor_PWM>
  	while ( (Current_Wall_CLK_Hour >= INLET_CLK_START && Current_Wall_CLK_Hour <= INLET_CLK_STOP) || Tank_Level_Hi_Alarm == 0 ) {
 800079c:	4b5c      	ldr	r3, [pc, #368]	; (8000910 <main+0x384>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	4b40      	ldr	r3, [pc, #256]	; (80008a4 <main+0x318>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d307      	bcc.n	80007bc <main+0x230>
 80007ac:	4b58      	ldr	r3, [pc, #352]	; (8000910 <main+0x384>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4b3e      	ldr	r3, [pc, #248]	; (80008ac <main+0x320>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d98d      	bls.n	80006d8 <main+0x14c>
 80007bc:	4b51      	ldr	r3, [pc, #324]	; (8000904 <main+0x378>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d088      	beq.n	80006d8 <main+0x14c>
 80007c6:	e000      	b.n	80007ca <main+0x23e>
  			break;
 80007c8:	bf00      	nop
  		}
  	}

  	// Turn off motor between Switching sequence
  	Control_DC_Motor_PWM(0, 0);
 80007ca:	2100      	movs	r1, #0
 80007cc:	2000      	movs	r0, #0
 80007ce:	f001 f853 	bl	8001878 <Control_DC_Motor_PWM>
  	HAL_Delay(1000);
 80007d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007d6:	f001 fdf3 	bl	80023c0 <HAL_Delay>

  	/* -- ZONE 1 -- */
  	Tank_Level_Lo_Alarm = 0;
 80007da:	4b49      	ldr	r3, [pc, #292]	; (8000900 <main+0x374>)
 80007dc:	2200      	movs	r2, #0
 80007de:	701a      	strb	r2, [r3, #0]
  	Tank_Level_Hi_Alarm = 0;
 80007e0:	4b48      	ldr	r3, [pc, #288]	; (8000904 <main+0x378>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	701a      	strb	r2, [r3, #0]
  	while (Current_Wall_CLK_Hour >= Zone_1_CLK_START && Current_Wall_CLK_Hour <= Zone_1_CLK_STOP) {
 80007e6:	e0a1      	b.n	800092c <main+0x3a0>
  		Current_Zone = ZONE_1;
 80007e8:	4b47      	ldr	r3, [pc, #284]	; (8000908 <main+0x37c>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	701a      	strb	r2, [r3, #0]
  		Set_LED_Color(LED_RED);
 80007ee:	2001      	movs	r0, #1
 80007f0:	f001 f9fe 	bl	8001bf0 <Set_LED_Color>
  		Control_Servo_Motor_PWM(1);
 80007f4:	2001      	movs	r0, #1
 80007f6:	f001 f86f 	bl	80018d8 <Control_Servo_Motor_PWM>
  		Get_Water_Percent_depth();
 80007fa:	f001 f97f 	bl	8001afc <Get_Water_Percent_depth>

  		//RESERVOIR IS EMPTY
  		if (Tank_Level_Lo_Alarm == 1) {
 80007fe:	4b40      	ldr	r3, [pc, #256]	; (8000900 <main+0x374>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	2b01      	cmp	r3, #1
 8000806:	d101      	bne.n	800080c <main+0x280>
  			System_Interlock();
 8000808:	f001 fa6c 	bl	8001ce4 <System_Interlock>
  		}

  		if (Zone_1_PWM == 0) {
 800080c:	4b1b      	ldr	r3, [pc, #108]	; (800087c <main+0x2f0>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	b2db      	uxtb	r3, r3
 8000812:	2b00      	cmp	r3, #0
 8000814:	d10d      	bne.n	8000832 <main+0x2a6>
  			Current_DC_Motor_Percent_PWM = ADC_Manual_Control_Percent_PWM();
 8000816:	f001 f943 	bl	8001aa0 <ADC_Manual_Control_Percent_PWM>
 800081a:	4603      	mov	r3, r0
 800081c:	461a      	mov	r2, r3
 800081e:	4b3b      	ldr	r3, [pc, #236]	; (800090c <main+0x380>)
 8000820:	701a      	strb	r2, [r3, #0]
  			Control_DC_Motor_PWM( ADC_Manual_Control_Percent_PWM() , 1);
 8000822:	f001 f93d 	bl	8001aa0 <ADC_Manual_Control_Percent_PWM>
 8000826:	4603      	mov	r3, r0
 8000828:	2101      	movs	r1, #1
 800082a:	4618      	mov	r0, r3
 800082c:	f001 f824 	bl	8001878 <Control_DC_Motor_PWM>
 8000830:	e07c      	b.n	800092c <main+0x3a0>
  		} else if (Zone_1_PWM == 1) {
 8000832:	4b12      	ldr	r3, [pc, #72]	; (800087c <main+0x2f0>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	b2db      	uxtb	r3, r3
 8000838:	2b01      	cmp	r3, #1
 800083a:	d107      	bne.n	800084c <main+0x2c0>
  			Current_DC_Motor_Percent_PWM = 60;
 800083c:	4b33      	ldr	r3, [pc, #204]	; (800090c <main+0x380>)
 800083e:	223c      	movs	r2, #60	; 0x3c
 8000840:	701a      	strb	r2, [r3, #0]
  			Control_DC_Motor_PWM(60 , 1);
 8000842:	2101      	movs	r1, #1
 8000844:	203c      	movs	r0, #60	; 0x3c
 8000846:	f001 f817 	bl	8001878 <Control_DC_Motor_PWM>
 800084a:	e06f      	b.n	800092c <main+0x3a0>
  		} else if (Zone_1_PWM == 2) {
 800084c:	4b0b      	ldr	r3, [pc, #44]	; (800087c <main+0x2f0>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	b2db      	uxtb	r3, r3
 8000852:	2b02      	cmp	r3, #2
 8000854:	d15e      	bne.n	8000914 <main+0x388>
  			Current_DC_Motor_Percent_PWM = 80;
 8000856:	4b2d      	ldr	r3, [pc, #180]	; (800090c <main+0x380>)
 8000858:	2250      	movs	r2, #80	; 0x50
 800085a:	701a      	strb	r2, [r3, #0]
  			Control_DC_Motor_PWM(80 , 1);
 800085c:	2101      	movs	r1, #1
 800085e:	2050      	movs	r0, #80	; 0x50
 8000860:	f001 f80a 	bl	8001878 <Control_DC_Motor_PWM>
 8000864:	e062      	b.n	800092c <main+0x3a0>
 8000866:	bf00      	nop
 8000868:	40020000 	.word	0x40020000
 800086c:	080067b0 	.word	0x080067b0
 8000870:	20000095 	.word	0x20000095
 8000874:	080067c0 	.word	0x080067c0
 8000878:	080067e8 	.word	0x080067e8
 800087c:	20000096 	.word	0x20000096
 8000880:	08006830 	.word	0x08006830
 8000884:	0800685c 	.word	0x0800685c
 8000888:	20000097 	.word	0x20000097
 800088c:	08006860 	.word	0x08006860
 8000890:	20000098 	.word	0x20000098
 8000894:	0800688c 	.word	0x0800688c
 8000898:	20000099 	.word	0x20000099
 800089c:	080068b8 	.word	0x080068b8
 80008a0:	080068e4 	.word	0x080068e4
 80008a4:	2000009a 	.word	0x2000009a
 80008a8:	08006930 	.word	0x08006930
 80008ac:	2000009b 	.word	0x2000009b
 80008b0:	08006958 	.word	0x08006958
 80008b4:	2000009c 	.word	0x2000009c
 80008b8:	08006980 	.word	0x08006980
 80008bc:	2000009d 	.word	0x2000009d
 80008c0:	080069ac 	.word	0x080069ac
 80008c4:	2000009e 	.word	0x2000009e
 80008c8:	080069d4 	.word	0x080069d4
 80008cc:	2000009f 	.word	0x2000009f
 80008d0:	08006a00 	.word	0x08006a00
 80008d4:	200000a0 	.word	0x200000a0
 80008d8:	08006a28 	.word	0x08006a28
 80008dc:	200000a1 	.word	0x200000a1
 80008e0:	08006a54 	.word	0x08006a54
 80008e4:	08006a7c 	.word	0x08006a7c
 80008e8:	200000a2 	.word	0x200000a2
 80008ec:	08006a90 	.word	0x08006a90
 80008f0:	08006aa0 	.word	0x08006aa0
 80008f4:	200001ac 	.word	0x200001ac
 80008f8:	20000164 	.word	0x20000164
 80008fc:	2000011c 	.word	0x2000011c
 8000900:	200000cf 	.word	0x200000cf
 8000904:	200000d0 	.word	0x200000d0
 8000908:	200000a3 	.word	0x200000a3
 800090c:	200000bc 	.word	0x200000bc
 8000910:	200000c8 	.word	0x200000c8
  		} else if (Zone_1_PWM == 3) {
 8000914:	4b79      	ldr	r3, [pc, #484]	; (8000afc <main+0x570>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	b2db      	uxtb	r3, r3
 800091a:	2b03      	cmp	r3, #3
 800091c:	d106      	bne.n	800092c <main+0x3a0>
  			Current_DC_Motor_Percent_PWM = 99;
 800091e:	4b78      	ldr	r3, [pc, #480]	; (8000b00 <main+0x574>)
 8000920:	2263      	movs	r2, #99	; 0x63
 8000922:	701a      	strb	r2, [r3, #0]
  			Control_DC_Motor_PWM(99 , 1);
 8000924:	2101      	movs	r1, #1
 8000926:	2063      	movs	r0, #99	; 0x63
 8000928:	f000 ffa6 	bl	8001878 <Control_DC_Motor_PWM>
  	while (Current_Wall_CLK_Hour >= Zone_1_CLK_START && Current_Wall_CLK_Hour <= Zone_1_CLK_STOP) {
 800092c:	4b75      	ldr	r3, [pc, #468]	; (8000b04 <main+0x578>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	b2da      	uxtb	r2, r3
 8000932:	4b75      	ldr	r3, [pc, #468]	; (8000b08 <main+0x57c>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	b2db      	uxtb	r3, r3
 8000938:	429a      	cmp	r2, r3
 800093a:	d308      	bcc.n	800094e <main+0x3c2>
 800093c:	4b71      	ldr	r3, [pc, #452]	; (8000b04 <main+0x578>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	b2da      	uxtb	r2, r3
 8000942:	4b72      	ldr	r3, [pc, #456]	; (8000b0c <main+0x580>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	b2db      	uxtb	r3, r3
 8000948:	429a      	cmp	r2, r3
 800094a:	f67f af4d 	bls.w	80007e8 <main+0x25c>
  		}
  	}

  	// Turn off motor between Switching sequence
  	Control_DC_Motor_PWM(0, 0);
 800094e:	2100      	movs	r1, #0
 8000950:	2000      	movs	r0, #0
 8000952:	f000 ff91 	bl	8001878 <Control_DC_Motor_PWM>
  	HAL_Delay(1000);
 8000956:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800095a:	f001 fd31 	bl	80023c0 <HAL_Delay>

  	/* -- ZONE 2 -- */
  	Tank_Level_Lo_Alarm = 0;
 800095e:	4b6c      	ldr	r3, [pc, #432]	; (8000b10 <main+0x584>)
 8000960:	2200      	movs	r2, #0
 8000962:	701a      	strb	r2, [r3, #0]
  	Tank_Level_Hi_Alarm = 0;
 8000964:	4b6b      	ldr	r3, [pc, #428]	; (8000b14 <main+0x588>)
 8000966:	2200      	movs	r2, #0
 8000968:	701a      	strb	r2, [r3, #0]
  	while (Current_Wall_CLK_Hour >= Zone_2_CLK_START && Current_Wall_CLK_Hour <= Zone_2_CLK_STOP) {
 800096a:	e04a      	b.n	8000a02 <main+0x476>
  		Current_Zone = ZONE_2;
 800096c:	4b6a      	ldr	r3, [pc, #424]	; (8000b18 <main+0x58c>)
 800096e:	2202      	movs	r2, #2
 8000970:	701a      	strb	r2, [r3, #0]
  		Set_LED_Color(LED_GREEN);
 8000972:	2002      	movs	r0, #2
 8000974:	f001 f93c 	bl	8001bf0 <Set_LED_Color>
  		Control_Servo_Motor_PWM(2);
 8000978:	2002      	movs	r0, #2
 800097a:	f000 ffad 	bl	80018d8 <Control_Servo_Motor_PWM>
  		Get_Water_Percent_depth();
 800097e:	f001 f8bd 	bl	8001afc <Get_Water_Percent_depth>

  		//RESERVOIR IS EMPTY
  		if (Tank_Level_Lo_Alarm == 1) {
 8000982:	4b63      	ldr	r3, [pc, #396]	; (8000b10 <main+0x584>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	b2db      	uxtb	r3, r3
 8000988:	2b01      	cmp	r3, #1
 800098a:	d101      	bne.n	8000990 <main+0x404>
  			System_Interlock();
 800098c:	f001 f9aa 	bl	8001ce4 <System_Interlock>
  		}

  		if (Zone_2_PWM == 0) {
 8000990:	4b62      	ldr	r3, [pc, #392]	; (8000b1c <main+0x590>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	b2db      	uxtb	r3, r3
 8000996:	2b00      	cmp	r3, #0
 8000998:	d10d      	bne.n	80009b6 <main+0x42a>
  			Current_DC_Motor_Percent_PWM = ADC_Manual_Control_Percent_PWM();
 800099a:	f001 f881 	bl	8001aa0 <ADC_Manual_Control_Percent_PWM>
 800099e:	4603      	mov	r3, r0
 80009a0:	461a      	mov	r2, r3
 80009a2:	4b57      	ldr	r3, [pc, #348]	; (8000b00 <main+0x574>)
 80009a4:	701a      	strb	r2, [r3, #0]
  			Control_DC_Motor_PWM( ADC_Manual_Control_Percent_PWM() , 1);
 80009a6:	f001 f87b 	bl	8001aa0 <ADC_Manual_Control_Percent_PWM>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2101      	movs	r1, #1
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 ff62 	bl	8001878 <Control_DC_Motor_PWM>
 80009b4:	e025      	b.n	8000a02 <main+0x476>
  		} else if (Zone_2_PWM == 1) {
 80009b6:	4b59      	ldr	r3, [pc, #356]	; (8000b1c <main+0x590>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d107      	bne.n	80009d0 <main+0x444>
  			Current_DC_Motor_Percent_PWM = 60;
 80009c0:	4b4f      	ldr	r3, [pc, #316]	; (8000b00 <main+0x574>)
 80009c2:	223c      	movs	r2, #60	; 0x3c
 80009c4:	701a      	strb	r2, [r3, #0]
  			Control_DC_Motor_PWM(60 , 1);
 80009c6:	2101      	movs	r1, #1
 80009c8:	203c      	movs	r0, #60	; 0x3c
 80009ca:	f000 ff55 	bl	8001878 <Control_DC_Motor_PWM>
 80009ce:	e018      	b.n	8000a02 <main+0x476>
  		} else if (Zone_2_PWM == 2) {
 80009d0:	4b52      	ldr	r3, [pc, #328]	; (8000b1c <main+0x590>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d107      	bne.n	80009ea <main+0x45e>
  			Current_DC_Motor_Percent_PWM = 80;
 80009da:	4b49      	ldr	r3, [pc, #292]	; (8000b00 <main+0x574>)
 80009dc:	2250      	movs	r2, #80	; 0x50
 80009de:	701a      	strb	r2, [r3, #0]
  			Control_DC_Motor_PWM(80 , 1);
 80009e0:	2101      	movs	r1, #1
 80009e2:	2050      	movs	r0, #80	; 0x50
 80009e4:	f000 ff48 	bl	8001878 <Control_DC_Motor_PWM>
 80009e8:	e00b      	b.n	8000a02 <main+0x476>
  		} else if (Zone_2_PWM == 3) {
 80009ea:	4b4c      	ldr	r3, [pc, #304]	; (8000b1c <main+0x590>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	2b03      	cmp	r3, #3
 80009f2:	d106      	bne.n	8000a02 <main+0x476>
  			Current_DC_Motor_Percent_PWM = 99;
 80009f4:	4b42      	ldr	r3, [pc, #264]	; (8000b00 <main+0x574>)
 80009f6:	2263      	movs	r2, #99	; 0x63
 80009f8:	701a      	strb	r2, [r3, #0]
  			Control_DC_Motor_PWM(99 , 1);
 80009fa:	2101      	movs	r1, #1
 80009fc:	2063      	movs	r0, #99	; 0x63
 80009fe:	f000 ff3b 	bl	8001878 <Control_DC_Motor_PWM>
  	while (Current_Wall_CLK_Hour >= Zone_2_CLK_START && Current_Wall_CLK_Hour <= Zone_2_CLK_STOP) {
 8000a02:	4b40      	ldr	r3, [pc, #256]	; (8000b04 <main+0x578>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	4b45      	ldr	r3, [pc, #276]	; (8000b20 <main+0x594>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d307      	bcc.n	8000a22 <main+0x496>
 8000a12:	4b3c      	ldr	r3, [pc, #240]	; (8000b04 <main+0x578>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	4b42      	ldr	r3, [pc, #264]	; (8000b24 <main+0x598>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	d9a4      	bls.n	800096c <main+0x3e0>
  		}
  	}

  	// Turn off motor between Switching sequence
  	Control_DC_Motor_PWM(0, 0);
 8000a22:	2100      	movs	r1, #0
 8000a24:	2000      	movs	r0, #0
 8000a26:	f000 ff27 	bl	8001878 <Control_DC_Motor_PWM>
  	HAL_Delay(1000);
 8000a2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a2e:	f001 fcc7 	bl	80023c0 <HAL_Delay>

  	/* -- ZONE 3 -- */
  	Tank_Level_Lo_Alarm = 0;
 8000a32:	4b37      	ldr	r3, [pc, #220]	; (8000b10 <main+0x584>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	701a      	strb	r2, [r3, #0]
  	Tank_Level_Hi_Alarm = 0;
 8000a38:	4b36      	ldr	r3, [pc, #216]	; (8000b14 <main+0x588>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	701a      	strb	r2, [r3, #0]
  	while (Current_Wall_CLK_Hour >= Zone_3_CLK_START && Current_Wall_CLK_Hour <= Zone_3_CLK_STOP) {
 8000a3e:	e04a      	b.n	8000ad6 <main+0x54a>
  		Current_Zone = ZONE_3;
 8000a40:	4b35      	ldr	r3, [pc, #212]	; (8000b18 <main+0x58c>)
 8000a42:	2203      	movs	r2, #3
 8000a44:	701a      	strb	r2, [r3, #0]
  		Set_LED_Color(LED_BLUE);
 8000a46:	2003      	movs	r0, #3
 8000a48:	f001 f8d2 	bl	8001bf0 <Set_LED_Color>
  		Control_Servo_Motor_PWM(3);
 8000a4c:	2003      	movs	r0, #3
 8000a4e:	f000 ff43 	bl	80018d8 <Control_Servo_Motor_PWM>
  		Get_Water_Percent_depth();
 8000a52:	f001 f853 	bl	8001afc <Get_Water_Percent_depth>

  		//RESERVOIR IS EMPTY
  		if (Tank_Level_Lo_Alarm == 1) {
 8000a56:	4b2e      	ldr	r3, [pc, #184]	; (8000b10 <main+0x584>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d101      	bne.n	8000a64 <main+0x4d8>
  			System_Interlock();
 8000a60:	f001 f940 	bl	8001ce4 <System_Interlock>
  		}

  		if (Zone_3_PWM == 0) {
 8000a64:	4b30      	ldr	r3, [pc, #192]	; (8000b28 <main+0x59c>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d10d      	bne.n	8000a8a <main+0x4fe>
  			Current_DC_Motor_Percent_PWM = ADC_Manual_Control_Percent_PWM();
 8000a6e:	f001 f817 	bl	8001aa0 <ADC_Manual_Control_Percent_PWM>
 8000a72:	4603      	mov	r3, r0
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b22      	ldr	r3, [pc, #136]	; (8000b00 <main+0x574>)
 8000a78:	701a      	strb	r2, [r3, #0]
  			Control_DC_Motor_PWM( ADC_Manual_Control_Percent_PWM() , 1);
 8000a7a:	f001 f811 	bl	8001aa0 <ADC_Manual_Control_Percent_PWM>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2101      	movs	r1, #1
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 fef8 	bl	8001878 <Control_DC_Motor_PWM>
 8000a88:	e025      	b.n	8000ad6 <main+0x54a>
  		} else if (Zone_3_PWM == 1) {
 8000a8a:	4b27      	ldr	r3, [pc, #156]	; (8000b28 <main+0x59c>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d107      	bne.n	8000aa4 <main+0x518>
  			Current_DC_Motor_Percent_PWM = 60;
 8000a94:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <main+0x574>)
 8000a96:	223c      	movs	r2, #60	; 0x3c
 8000a98:	701a      	strb	r2, [r3, #0]
  			Control_DC_Motor_PWM(60 , 1);
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	203c      	movs	r0, #60	; 0x3c
 8000a9e:	f000 feeb 	bl	8001878 <Control_DC_Motor_PWM>
 8000aa2:	e018      	b.n	8000ad6 <main+0x54a>
  		} else if (Zone_3_PWM == 2) {
 8000aa4:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <main+0x59c>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	d107      	bne.n	8000abe <main+0x532>
  			Current_DC_Motor_Percent_PWM = 80;
 8000aae:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <main+0x574>)
 8000ab0:	2250      	movs	r2, #80	; 0x50
 8000ab2:	701a      	strb	r2, [r3, #0]
  			Control_DC_Motor_PWM(80 , 1);
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	2050      	movs	r0, #80	; 0x50
 8000ab8:	f000 fede 	bl	8001878 <Control_DC_Motor_PWM>
 8000abc:	e00b      	b.n	8000ad6 <main+0x54a>
  		} else if (Zone_3_PWM == 3) {
 8000abe:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <main+0x59c>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	2b03      	cmp	r3, #3
 8000ac6:	d106      	bne.n	8000ad6 <main+0x54a>
  			Current_DC_Motor_Percent_PWM = 99;
 8000ac8:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <main+0x574>)
 8000aca:	2263      	movs	r2, #99	; 0x63
 8000acc:	701a      	strb	r2, [r3, #0]
  			Control_DC_Motor_PWM(99 , 1);
 8000ace:	2101      	movs	r1, #1
 8000ad0:	2063      	movs	r0, #99	; 0x63
 8000ad2:	f000 fed1 	bl	8001878 <Control_DC_Motor_PWM>
  	while (Current_Wall_CLK_Hour >= Zone_3_CLK_START && Current_Wall_CLK_Hour <= Zone_3_CLK_STOP) {
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <main+0x578>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <main+0x5a0>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	f4ff adf1 	bcc.w	80006ca <main+0x13e>
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <main+0x578>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <main+0x5a4>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d9a3      	bls.n	8000a40 <main+0x4b4>
  	Tank_Level_Lo_Alarm = 0;
 8000af8:	e5e7      	b.n	80006ca <main+0x13e>
 8000afa:	bf00      	nop
 8000afc:	20000096 	.word	0x20000096
 8000b00:	200000bc 	.word	0x200000bc
 8000b04:	200000c8 	.word	0x200000c8
 8000b08:	2000009c 	.word	0x2000009c
 8000b0c:	2000009d 	.word	0x2000009d
 8000b10:	200000cf 	.word	0x200000cf
 8000b14:	200000d0 	.word	0x200000d0
 8000b18:	200000a3 	.word	0x200000a3
 8000b1c:	20000097 	.word	0x20000097
 8000b20:	2000009e 	.word	0x2000009e
 8000b24:	2000009f 	.word	0x2000009f
 8000b28:	20000098 	.word	0x20000098
 8000b2c:	200000a0 	.word	0x200000a0
 8000b30:	200000a1 	.word	0x200000a1

08000b34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b094      	sub	sp, #80	; 0x50
 8000b38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3a:	f107 0320 	add.w	r3, r7, #32
 8000b3e:	2230      	movs	r2, #48	; 0x30
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f005 f994 	bl	8005e70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b48:	f107 030c 	add.w	r3, r7, #12
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	4b23      	ldr	r3, [pc, #140]	; (8000bec <SystemClock_Config+0xb8>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b60:	4a22      	ldr	r2, [pc, #136]	; (8000bec <SystemClock_Config+0xb8>)
 8000b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b66:	6413      	str	r3, [r2, #64]	; 0x40
 8000b68:	4b20      	ldr	r3, [pc, #128]	; (8000bec <SystemClock_Config+0xb8>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b74:	2300      	movs	r3, #0
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	4b1d      	ldr	r3, [pc, #116]	; (8000bf0 <SystemClock_Config+0xbc>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b80:	4a1b      	ldr	r2, [pc, #108]	; (8000bf0 <SystemClock_Config+0xbc>)
 8000b82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b86:	6013      	str	r3, [r2, #0]
 8000b88:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <SystemClock_Config+0xbc>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b94:	2302      	movs	r3, #2
 8000b96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b9c:	2310      	movs	r3, #16
 8000b9e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba4:	f107 0320 	add.w	r3, r7, #32
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f002 fb83 	bl	80032b4 <HAL_RCC_OscConfig>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000bb4:	f001 f8c4 	bl	8001d40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb8:	230f      	movs	r3, #15
 8000bba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bcc:	f107 030c 	add.w	r3, r7, #12
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f002 fde6 	bl	80037a4 <HAL_RCC_ClockConfig>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000bde:	f001 f8af 	bl	8001d40 <Error_Handler>
  }
}
 8000be2:	bf00      	nop
 8000be4:	3750      	adds	r7, #80	; 0x50
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40007000 	.word	0x40007000

08000bf4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c06:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <MX_ADC1_Init+0x98>)
 8000c08:	4a21      	ldr	r2, [pc, #132]	; (8000c90 <MX_ADC1_Init+0x9c>)
 8000c0a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c0c:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <MX_ADC1_Init+0x98>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000c12:	4b1e      	ldr	r3, [pc, #120]	; (8000c8c <MX_ADC1_Init+0x98>)
 8000c14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c18:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <MX_ADC1_Init+0x98>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c20:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <MX_ADC1_Init+0x98>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c26:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <MX_ADC1_Init+0x98>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c2e:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <MX_ADC1_Init+0x98>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c34:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <MX_ADC1_Init+0x98>)
 8000c36:	4a17      	ldr	r2, [pc, #92]	; (8000c94 <MX_ADC1_Init+0xa0>)
 8000c38:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c3a:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <MX_ADC1_Init+0x98>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <MX_ADC1_Init+0x98>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c46:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <MX_ADC1_Init+0x98>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <MX_ADC1_Init+0x98>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c54:	480d      	ldr	r0, [pc, #52]	; (8000c8c <MX_ADC1_Init+0x98>)
 8000c56:	f001 fbd7 	bl	8002408 <HAL_ADC_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000c60:	f001 f86e 	bl	8001d40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000c64:	2309      	movs	r3, #9
 8000c66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c70:	463b      	mov	r3, r7
 8000c72:	4619      	mov	r1, r3
 8000c74:	4805      	ldr	r0, [pc, #20]	; (8000c8c <MX_ADC1_Init+0x98>)
 8000c76:	f001 fd8b 	bl	8002790 <HAL_ADC_ConfigChannel>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c80:	f001 f85e 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	200000d4 	.word	0x200000d4
 8000c90:	40012000 	.word	0x40012000
 8000c94:	0f000001 	.word	0x0f000001

08000c98 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08e      	sub	sp, #56	; 0x38
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cac:	f107 0320 	add.w	r3, r7, #32
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
 8000cc4:	615a      	str	r2, [r3, #20]
 8000cc6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cc8:	4b2d      	ldr	r3, [pc, #180]	; (8000d80 <MX_TIM2_Init+0xe8>)
 8000cca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8000cd0:	4b2b      	ldr	r3, [pc, #172]	; (8000d80 <MX_TIM2_Init+0xe8>)
 8000cd2:	220f      	movs	r2, #15
 8000cd4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd6:	4b2a      	ldr	r3, [pc, #168]	; (8000d80 <MX_TIM2_Init+0xe8>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8000cdc:	4b28      	ldr	r3, [pc, #160]	; (8000d80 <MX_TIM2_Init+0xe8>)
 8000cde:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000ce2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce4:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <MX_TIM2_Init+0xe8>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cea:	4b25      	ldr	r3, [pc, #148]	; (8000d80 <MX_TIM2_Init+0xe8>)
 8000cec:	2280      	movs	r2, #128	; 0x80
 8000cee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cf0:	4823      	ldr	r0, [pc, #140]	; (8000d80 <MX_TIM2_Init+0xe8>)
 8000cf2:	f002 ff77 	bl	8003be4 <HAL_TIM_Base_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000cfc:	f001 f820 	bl	8001d40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d04:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	481c      	ldr	r0, [pc, #112]	; (8000d80 <MX_TIM2_Init+0xe8>)
 8000d0e:	f003 fb49 	bl	80043a4 <HAL_TIM_ConfigClockSource>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000d18:	f001 f812 	bl	8001d40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d1c:	4818      	ldr	r0, [pc, #96]	; (8000d80 <MX_TIM2_Init+0xe8>)
 8000d1e:	f003 f86d 	bl	8003dfc <HAL_TIM_PWM_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000d28:	f001 f80a 	bl	8001d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d30:	2300      	movs	r3, #0
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d34:	f107 0320 	add.w	r3, r7, #32
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4811      	ldr	r0, [pc, #68]	; (8000d80 <MX_TIM2_Init+0xe8>)
 8000d3c:	f003 feee 	bl	8004b1c <HAL_TIMEx_MasterConfigSynchronization>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000d46:	f000 fffb 	bl	8001d40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d4a:	2360      	movs	r3, #96	; 0x60
 8000d4c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4807      	ldr	r0, [pc, #28]	; (8000d80 <MX_TIM2_Init+0xe8>)
 8000d62:	f003 fa5d 	bl	8004220 <HAL_TIM_PWM_ConfigChannel>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000d6c:	f000 ffe8 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d70:	4803      	ldr	r0, [pc, #12]	; (8000d80 <MX_TIM2_Init+0xe8>)
 8000d72:	f001 f8a9 	bl	8001ec8 <HAL_TIM_MspPostInit>

}
 8000d76:	bf00      	nop
 8000d78:	3738      	adds	r7, #56	; 0x38
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	2000011c 	.word	0x2000011c

08000d84 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08e      	sub	sp, #56	; 0x38
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d98:	f107 0320 	add.w	r3, r7, #32
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
 8000db0:	615a      	str	r2, [r3, #20]
 8000db2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000db4:	4b32      	ldr	r3, [pc, #200]	; (8000e80 <MX_TIM3_Init+0xfc>)
 8000db6:	4a33      	ldr	r2, [pc, #204]	; (8000e84 <MX_TIM3_Init+0x100>)
 8000db8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8000dba:	4b31      	ldr	r3, [pc, #196]	; (8000e80 <MX_TIM3_Init+0xfc>)
 8000dbc:	220f      	movs	r2, #15
 8000dbe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc0:	4b2f      	ldr	r3, [pc, #188]	; (8000e80 <MX_TIM3_Init+0xfc>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 8000dc6:	4b2e      	ldr	r3, [pc, #184]	; (8000e80 <MX_TIM3_Init+0xfc>)
 8000dc8:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000dcc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dce:	4b2c      	ldr	r3, [pc, #176]	; (8000e80 <MX_TIM3_Init+0xfc>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dd4:	4b2a      	ldr	r3, [pc, #168]	; (8000e80 <MX_TIM3_Init+0xfc>)
 8000dd6:	2280      	movs	r2, #128	; 0x80
 8000dd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dda:	4829      	ldr	r0, [pc, #164]	; (8000e80 <MX_TIM3_Init+0xfc>)
 8000ddc:	f002 ff02 	bl	8003be4 <HAL_TIM_Base_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000de6:	f000 ffab 	bl	8001d40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000df0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000df4:	4619      	mov	r1, r3
 8000df6:	4822      	ldr	r0, [pc, #136]	; (8000e80 <MX_TIM3_Init+0xfc>)
 8000df8:	f003 fad4 	bl	80043a4 <HAL_TIM_ConfigClockSource>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000e02:	f000 ff9d 	bl	8001d40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e06:	481e      	ldr	r0, [pc, #120]	; (8000e80 <MX_TIM3_Init+0xfc>)
 8000e08:	f002 fff8 	bl	8003dfc <HAL_TIM_PWM_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000e12:	f000 ff95 	bl	8001d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e16:	2300      	movs	r3, #0
 8000e18:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e1e:	f107 0320 	add.w	r3, r7, #32
 8000e22:	4619      	mov	r1, r3
 8000e24:	4816      	ldr	r0, [pc, #88]	; (8000e80 <MX_TIM3_Init+0xfc>)
 8000e26:	f003 fe79 	bl	8004b1c <HAL_TIMEx_MasterConfigSynchronization>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000e30:	f000 ff86 	bl	8001d40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e34:	2360      	movs	r3, #96	; 0x60
 8000e36:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	2200      	movs	r2, #0
 8000e48:	4619      	mov	r1, r3
 8000e4a:	480d      	ldr	r0, [pc, #52]	; (8000e80 <MX_TIM3_Init+0xfc>)
 8000e4c:	f003 f9e8 	bl	8004220 <HAL_TIM_PWM_ConfigChannel>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000e56:	f000 ff73 	bl	8001d40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	2208      	movs	r2, #8
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4807      	ldr	r0, [pc, #28]	; (8000e80 <MX_TIM3_Init+0xfc>)
 8000e62:	f003 f9dd 	bl	8004220 <HAL_TIM_PWM_ConfigChannel>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000e6c:	f000 ff68 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e70:	4803      	ldr	r0, [pc, #12]	; (8000e80 <MX_TIM3_Init+0xfc>)
 8000e72:	f001 f829 	bl	8001ec8 <HAL_TIM_MspPostInit>

}
 8000e76:	bf00      	nop
 8000e78:	3738      	adds	r7, #56	; 0x38
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000164 	.word	0x20000164
 8000e84:	40000400 	.word	0x40000400

08000e88 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e8e:	f107 0308 	add.w	r3, r7, #8
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e9c:	463b      	mov	r3, r7
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000ea4:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <MX_TIM5_Init+0x94>)
 8000ea6:	4a1e      	ldr	r2, [pc, #120]	; (8000f20 <MX_TIM5_Init+0x98>)
 8000ea8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16000-1;
 8000eaa:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <MX_TIM5_Init+0x94>)
 8000eac:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000eb0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb2:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <MX_TIM5_Init+0x94>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8000eb8:	4b18      	ldr	r3, [pc, #96]	; (8000f1c <MX_TIM5_Init+0x94>)
 8000eba:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ebe:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec0:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <MX_TIM5_Init+0x94>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ec6:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <MX_TIM5_Init+0x94>)
 8000ec8:	2280      	movs	r2, #128	; 0x80
 8000eca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000ecc:	4813      	ldr	r0, [pc, #76]	; (8000f1c <MX_TIM5_Init+0x94>)
 8000ece:	f002 fe89 	bl	8003be4 <HAL_TIM_Base_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000ed8:	f000 ff32 	bl	8001d40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000ee2:	f107 0308 	add.w	r3, r7, #8
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	480c      	ldr	r0, [pc, #48]	; (8000f1c <MX_TIM5_Init+0x94>)
 8000eea:	f003 fa5b 	bl	80043a4 <HAL_TIM_ConfigClockSource>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000ef4:	f000 ff24 	bl	8001d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efc:	2300      	movs	r3, #0
 8000efe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f00:	463b      	mov	r3, r7
 8000f02:	4619      	mov	r1, r3
 8000f04:	4805      	ldr	r0, [pc, #20]	; (8000f1c <MX_TIM5_Init+0x94>)
 8000f06:	f003 fe09 	bl	8004b1c <HAL_TIMEx_MasterConfigSynchronization>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000f10:	f000 ff16 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  /* USER CODE END TIM5_Init 2 */

}
 8000f14:	bf00      	nop
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	200001ac 	.word	0x200001ac
 8000f20:	40000c00 	.word	0x40000c00

08000f24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f28:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <MX_USART1_UART_Init+0x4c>)
 8000f2a:	4a12      	ldr	r2, [pc, #72]	; (8000f74 <MX_USART1_UART_Init+0x50>)
 8000f2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f2e:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <MX_USART1_UART_Init+0x4c>)
 8000f30:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f36:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <MX_USART1_UART_Init+0x4c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <MX_USART1_UART_Init+0x4c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f42:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <MX_USART1_UART_Init+0x4c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f48:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <MX_USART1_UART_Init+0x4c>)
 8000f4a:	220c      	movs	r2, #12
 8000f4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f4e:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <MX_USART1_UART_Init+0x4c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <MX_USART1_UART_Init+0x4c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f5a:	4805      	ldr	r0, [pc, #20]	; (8000f70 <MX_USART1_UART_Init+0x4c>)
 8000f5c:	f003 fe60 	bl	8004c20 <HAL_UART_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f66:	f000 feeb 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	200001f4 	.word	0x200001f4
 8000f74:	40011000 	.word	0x40011000

08000f78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <MX_USART2_UART_Init+0x4c>)
 8000f7e:	4a12      	ldr	r2, [pc, #72]	; (8000fc8 <MX_USART2_UART_Init+0x50>)
 8000f80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f82:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <MX_USART2_UART_Init+0x4c>)
 8000f84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <MX_USART2_UART_Init+0x4c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <MX_USART2_UART_Init+0x4c>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f96:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <MX_USART2_UART_Init+0x4c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f9c:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <MX_USART2_UART_Init+0x4c>)
 8000f9e:	220c      	movs	r2, #12
 8000fa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa2:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <MX_USART2_UART_Init+0x4c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <MX_USART2_UART_Init+0x4c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fae:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <MX_USART2_UART_Init+0x4c>)
 8000fb0:	f003 fe36 	bl	8004c20 <HAL_UART_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fba:	f000 fec1 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000238 	.word	0x20000238
 8000fc8:	40004400 	.word	0x40004400

08000fcc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <MX_USART6_UART_Init+0x4c>)
 8000fd2:	4a12      	ldr	r2, [pc, #72]	; (800101c <MX_USART6_UART_Init+0x50>)
 8000fd4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <MX_USART6_UART_Init+0x4c>)
 8000fd8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fdc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <MX_USART6_UART_Init+0x4c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <MX_USART6_UART_Init+0x4c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <MX_USART6_UART_Init+0x4c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000ff0:	4b09      	ldr	r3, [pc, #36]	; (8001018 <MX_USART6_UART_Init+0x4c>)
 8000ff2:	220c      	movs	r2, #12
 8000ff4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <MX_USART6_UART_Init+0x4c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <MX_USART6_UART_Init+0x4c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001002:	4805      	ldr	r0, [pc, #20]	; (8001018 <MX_USART6_UART_Init+0x4c>)
 8001004:	f003 fe0c 	bl	8004c20 <HAL_UART_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800100e:	f000 fe97 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	2000027c 	.word	0x2000027c
 800101c:	40011400 	.word	0x40011400

08001020 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	60da      	str	r2, [r3, #12]
 8001034:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	4b52      	ldr	r3, [pc, #328]	; (8001184 <MX_GPIO_Init+0x164>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a51      	ldr	r2, [pc, #324]	; (8001184 <MX_GPIO_Init+0x164>)
 8001040:	f043 0304 	orr.w	r3, r3, #4
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b4f      	ldr	r3, [pc, #316]	; (8001184 <MX_GPIO_Init+0x164>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0304 	and.w	r3, r3, #4
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	4b4b      	ldr	r3, [pc, #300]	; (8001184 <MX_GPIO_Init+0x164>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a4a      	ldr	r2, [pc, #296]	; (8001184 <MX_GPIO_Init+0x164>)
 800105c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b48      	ldr	r3, [pc, #288]	; (8001184 <MX_GPIO_Init+0x164>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	4b44      	ldr	r3, [pc, #272]	; (8001184 <MX_GPIO_Init+0x164>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a43      	ldr	r2, [pc, #268]	; (8001184 <MX_GPIO_Init+0x164>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b41      	ldr	r3, [pc, #260]	; (8001184 <MX_GPIO_Init+0x164>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	4b3d      	ldr	r3, [pc, #244]	; (8001184 <MX_GPIO_Init+0x164>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a3c      	ldr	r2, [pc, #240]	; (8001184 <MX_GPIO_Init+0x164>)
 8001094:	f043 0302 	orr.w	r3, r3, #2
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b3a      	ldr	r3, [pc, #232]	; (8001184 <MX_GPIO_Init+0x164>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|BLU_Pin|GRN_Pin|RED_Pin, GPIO_PIN_RESET);
 80010a6:	2200      	movs	r2, #0
 80010a8:	f44f 51c9 	mov.w	r1, #6432	; 0x1920
 80010ac:	4836      	ldr	r0, [pc, #216]	; (8001188 <MX_GPIO_Init+0x168>)
 80010ae:	f002 f8b5 	bl	800321c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIGIT_B0_Pin|DIGIT_B1_Pin|DIGIT_B2_Pin|DIGIT_B3_Pin, GPIO_PIN_RESET);
 80010b2:	2200      	movs	r2, #0
 80010b4:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 80010b8:	4834      	ldr	r0, [pc, #208]	; (800118c <MX_GPIO_Init+0x16c>)
 80010ba:	f002 f8af 	bl	800321c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIGIT_A0_Pin|DIGIT_A1_Pin|DIGIT_A2_Pin|DIGIT_A3_Pin, GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	f44f 7158 	mov.w	r1, #864	; 0x360
 80010c4:	4832      	ldr	r0, [pc, #200]	; (8001190 <MX_GPIO_Init+0x170>)
 80010c6:	f002 f8a9 	bl	800321c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLU_PB_Pin */
  GPIO_InitStruct.Pin = BLU_PB_Pin;
 80010ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010d0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLU_PB_GPIO_Port, &GPIO_InitStruct);
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	4619      	mov	r1, r3
 80010e0:	482a      	ldr	r0, [pc, #168]	; (800118c <MX_GPIO_Init+0x16c>)
 80010e2:	f001 ff17 	bl	8002f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin BLU_Pin GRN_Pin RED_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|BLU_Pin|GRN_Pin|RED_Pin;
 80010e6:	f44f 53c9 	mov.w	r3, #6432	; 0x1920
 80010ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ec:	2301      	movs	r3, #1
 80010ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	2300      	movs	r3, #0
 80010f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4619      	mov	r1, r3
 80010fe:	4822      	ldr	r0, [pc, #136]	; (8001188 <MX_GPIO_Init+0x168>)
 8001100:	f001 ff08 	bl	8002f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : RPM_TICK_Pin */
  GPIO_InitStruct.Pin = RPM_TICK_Pin;
 8001104:	2304      	movs	r3, #4
 8001106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001108:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800110c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RPM_TICK_GPIO_Port, &GPIO_InitStruct);
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	4619      	mov	r1, r3
 8001118:	481d      	ldr	r0, [pc, #116]	; (8001190 <MX_GPIO_Init+0x170>)
 800111a:	f001 fefb 	bl	8002f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIGIT_B0_Pin DIGIT_B1_Pin DIGIT_B2_Pin DIGIT_B3_Pin */
  GPIO_InitStruct.Pin = DIGIT_B0_Pin|DIGIT_B1_Pin|DIGIT_B2_Pin|DIGIT_B3_Pin;
 800111e:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8001122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001124:	2301      	movs	r3, #1
 8001126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4619      	mov	r1, r3
 8001136:	4815      	ldr	r0, [pc, #84]	; (800118c <MX_GPIO_Init+0x16c>)
 8001138:	f001 feec 	bl	8002f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIGIT_A0_Pin DIGIT_A1_Pin DIGIT_A2_Pin DIGIT_A3_Pin */
  GPIO_InitStruct.Pin = DIGIT_A0_Pin|DIGIT_A1_Pin|DIGIT_A2_Pin|DIGIT_A3_Pin;
 800113c:	f44f 7358 	mov.w	r3, #864	; 0x360
 8001140:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001142:	2301      	movs	r3, #1
 8001144:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2300      	movs	r3, #0
 800114c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	4619      	mov	r1, r3
 8001154:	480e      	ldr	r0, [pc, #56]	; (8001190 <MX_GPIO_Init+0x170>)
 8001156:	f001 fedd 	bl	8002f14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800115a:	2200      	movs	r2, #0
 800115c:	2100      	movs	r1, #0
 800115e:	2008      	movs	r0, #8
 8001160:	f001 fe0f 	bl	8002d82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001164:	2008      	movs	r0, #8
 8001166:	f001 fe28 	bl	8002dba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800116a:	2200      	movs	r2, #0
 800116c:	2100      	movs	r1, #0
 800116e:	2028      	movs	r0, #40	; 0x28
 8001170:	f001 fe07 	bl	8002d82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001174:	2028      	movs	r0, #40	; 0x28
 8001176:	f001 fe20 	bl	8002dba <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800117a:	bf00      	nop
 800117c:	3728      	adds	r7, #40	; 0x28
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40023800 	.word	0x40023800
 8001188:	40020000 	.word	0x40020000
 800118c:	40020800 	.word	0x40020800
 8001190:	40020400 	.word	0x40020400

08001194 <DIGITS_Display>:

/* USER CODE BEGIN 4 */
void DIGITS_Display(uint8_t DIGIT_A, uint8_t DIGIT_B)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08c      	sub	sp, #48	; 0x30
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	460a      	mov	r2, r1
 800119e:	71fb      	strb	r3, [r7, #7]
 80011a0:	4613      	mov	r3, r2
 80011a2:	71bb      	strb	r3, [r7, #6]
	uint8_t DIGITA_VAL = 0x0F & DIGIT_A; //mask off higher4 bits
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	int Abit0 = (DIGITA_VAL ) & 1;  	// extract Abit0 of the 4-bit value
 80011ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
	int Abit1 = (DIGITA_VAL >> 1) & 1;  // extract Abit1 of the 4-bit value
 80011b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011bc:	085b      	lsrs	r3, r3, #1
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
	int Abit2 = (DIGITA_VAL >> 2) & 1;  // extract Abit2 of the 4-bit value
 80011c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011ca:	089b      	lsrs	r3, r3, #2
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	623b      	str	r3, [r7, #32]
	int Abit3 = (DIGITA_VAL >> 3) & 1;  // extract Abit3 of the 4-bit value
 80011d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011d8:	08db      	lsrs	r3, r3, #3
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	61fb      	str	r3, [r7, #28]

	uint8_t DIGITB_VAL = 0x0F & DIGIT_B; //mask off higher4 bits
 80011e2:	79bb      	ldrb	r3, [r7, #6]
 80011e4:	f003 030f 	and.w	r3, r3, #15
 80011e8:	76fb      	strb	r3, [r7, #27]
	int Bbit0 = (DIGITB_VAL ) & 1;  	// extract Bbit0 of the 4-bit value
 80011ea:	7efb      	ldrb	r3, [r7, #27]
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	617b      	str	r3, [r7, #20]
	int Bbit1 = (DIGITB_VAL >> 1) & 1;  // extract Bbit1 of the 4-bit value
 80011f2:	7efb      	ldrb	r3, [r7, #27]
 80011f4:	085b      	lsrs	r3, r3, #1
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	613b      	str	r3, [r7, #16]
	int Bbit2 = (DIGITB_VAL >> 2) & 1;  // extract Bbit2 of the 4-bit value
 80011fe:	7efb      	ldrb	r3, [r7, #27]
 8001200:	089b      	lsrs	r3, r3, #2
 8001202:	b2db      	uxtb	r3, r3
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	60fb      	str	r3, [r7, #12]
	int Bbit3 = (DIGITB_VAL >> 3) & 1;  // extract Bbit3 of the 4-bit value
 800120a:	7efb      	ldrb	r3, [r7, #27]
 800120c:	08db      	lsrs	r3, r3, #3
 800120e:	b2db      	uxtb	r3, r3
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	60bb      	str	r3, [r7, #8]

	if (Abit0 == (0))
 8001216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001218:	2b00      	cmp	r3, #0
 800121a:	d105      	bne.n	8001228 <DIGITS_Display+0x94>
	{
	 HAL_GPIO_WritePin(GPIOB, DIGIT_A0_Pin, GPIO_PIN_RESET);
 800121c:	2200      	movs	r2, #0
 800121e:	2120      	movs	r1, #32
 8001220:	483d      	ldr	r0, [pc, #244]	; (8001318 <DIGITS_Display+0x184>)
 8001222:	f001 fffb 	bl	800321c <HAL_GPIO_WritePin>
 8001226:	e004      	b.n	8001232 <DIGITS_Display+0x9e>
	}
	else
	{
	 HAL_GPIO_WritePin(GPIOB, DIGIT_A0_Pin, GPIO_PIN_SET);
 8001228:	2201      	movs	r2, #1
 800122a:	2120      	movs	r1, #32
 800122c:	483a      	ldr	r0, [pc, #232]	; (8001318 <DIGITS_Display+0x184>)
 800122e:	f001 fff5 	bl	800321c <HAL_GPIO_WritePin>

	}
	if (Abit1 == (0))
 8001232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001234:	2b00      	cmp	r3, #0
 8001236:	d105      	bne.n	8001244 <DIGITS_Display+0xb0>
	{
	 HAL_GPIO_WritePin(GPIOB, DIGIT_A1_Pin, GPIO_PIN_RESET);
 8001238:	2200      	movs	r2, #0
 800123a:	2140      	movs	r1, #64	; 0x40
 800123c:	4836      	ldr	r0, [pc, #216]	; (8001318 <DIGITS_Display+0x184>)
 800123e:	f001 ffed 	bl	800321c <HAL_GPIO_WritePin>
 8001242:	e004      	b.n	800124e <DIGITS_Display+0xba>
	}
	else
	{
	 HAL_GPIO_WritePin(GPIOB, DIGIT_A1_Pin, GPIO_PIN_SET);
 8001244:	2201      	movs	r2, #1
 8001246:	2140      	movs	r1, #64	; 0x40
 8001248:	4833      	ldr	r0, [pc, #204]	; (8001318 <DIGITS_Display+0x184>)
 800124a:	f001 ffe7 	bl	800321c <HAL_GPIO_WritePin>

	}
	if (Abit2 == (0))
 800124e:	6a3b      	ldr	r3, [r7, #32]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d106      	bne.n	8001262 <DIGITS_Display+0xce>
	{
	 HAL_GPIO_WritePin(GPIOB, DIGIT_A2_Pin, GPIO_PIN_RESET);
 8001254:	2200      	movs	r2, #0
 8001256:	f44f 7180 	mov.w	r1, #256	; 0x100
 800125a:	482f      	ldr	r0, [pc, #188]	; (8001318 <DIGITS_Display+0x184>)
 800125c:	f001 ffde 	bl	800321c <HAL_GPIO_WritePin>
 8001260:	e005      	b.n	800126e <DIGITS_Display+0xda>
	}
	else
	{
	 HAL_GPIO_WritePin(GPIOB, DIGIT_A2_Pin, GPIO_PIN_SET);
 8001262:	2201      	movs	r2, #1
 8001264:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001268:	482b      	ldr	r0, [pc, #172]	; (8001318 <DIGITS_Display+0x184>)
 800126a:	f001 ffd7 	bl	800321c <HAL_GPIO_WritePin>

	}
	if (Abit3 == (0))
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d106      	bne.n	8001282 <DIGITS_Display+0xee>
	{
	 HAL_GPIO_WritePin(GPIOB, DIGIT_A3_Pin, GPIO_PIN_RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	f44f 7100 	mov.w	r1, #512	; 0x200
 800127a:	4827      	ldr	r0, [pc, #156]	; (8001318 <DIGITS_Display+0x184>)
 800127c:	f001 ffce 	bl	800321c <HAL_GPIO_WritePin>
 8001280:	e005      	b.n	800128e <DIGITS_Display+0xfa>
	}
	else
	{
	 HAL_GPIO_WritePin(GPIOB, DIGIT_A3_Pin, GPIO_PIN_SET);
 8001282:	2201      	movs	r2, #1
 8001284:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001288:	4823      	ldr	r0, [pc, #140]	; (8001318 <DIGITS_Display+0x184>)
 800128a:	f001 ffc7 	bl	800321c <HAL_GPIO_WritePin>

	}


	if (Bbit0 == (0))
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d106      	bne.n	80012a2 <DIGITS_Display+0x10e>
	{
	 HAL_GPIO_WritePin(GPIOC, DIGIT_B0_Pin, GPIO_PIN_RESET);
 8001294:	2200      	movs	r2, #0
 8001296:	f44f 7100 	mov.w	r1, #512	; 0x200
 800129a:	4820      	ldr	r0, [pc, #128]	; (800131c <DIGITS_Display+0x188>)
 800129c:	f001 ffbe 	bl	800321c <HAL_GPIO_WritePin>
 80012a0:	e005      	b.n	80012ae <DIGITS_Display+0x11a>
	}
	else
	{
	 HAL_GPIO_WritePin(GPIOC, DIGIT_B0_Pin, GPIO_PIN_SET);
 80012a2:	2201      	movs	r2, #1
 80012a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012a8:	481c      	ldr	r0, [pc, #112]	; (800131c <DIGITS_Display+0x188>)
 80012aa:	f001 ffb7 	bl	800321c <HAL_GPIO_WritePin>

	}
	if (Bbit1 == (0))
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d106      	bne.n	80012c2 <DIGITS_Display+0x12e>
	{
	 HAL_GPIO_WritePin(GPIOC, DIGIT_B1_Pin, GPIO_PIN_RESET);
 80012b4:	2200      	movs	r2, #0
 80012b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012ba:	4818      	ldr	r0, [pc, #96]	; (800131c <DIGITS_Display+0x188>)
 80012bc:	f001 ffae 	bl	800321c <HAL_GPIO_WritePin>
 80012c0:	e005      	b.n	80012ce <DIGITS_Display+0x13a>
	}
	else
	{
	 HAL_GPIO_WritePin(GPIOC, DIGIT_B1_Pin, GPIO_PIN_SET);
 80012c2:	2201      	movs	r2, #1
 80012c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012c8:	4814      	ldr	r0, [pc, #80]	; (800131c <DIGITS_Display+0x188>)
 80012ca:	f001 ffa7 	bl	800321c <HAL_GPIO_WritePin>

	}
	if (Bbit2 == (0))
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d106      	bne.n	80012e2 <DIGITS_Display+0x14e>
	{
	 HAL_GPIO_WritePin(GPIOC, DIGIT_B2_Pin, GPIO_PIN_RESET);
 80012d4:	2200      	movs	r2, #0
 80012d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012da:	4810      	ldr	r0, [pc, #64]	; (800131c <DIGITS_Display+0x188>)
 80012dc:	f001 ff9e 	bl	800321c <HAL_GPIO_WritePin>
 80012e0:	e005      	b.n	80012ee <DIGITS_Display+0x15a>
	}
	else
	{
	 HAL_GPIO_WritePin(GPIOC, DIGIT_B2_Pin, GPIO_PIN_SET);
 80012e2:	2201      	movs	r2, #1
 80012e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012e8:	480c      	ldr	r0, [pc, #48]	; (800131c <DIGITS_Display+0x188>)
 80012ea:	f001 ff97 	bl	800321c <HAL_GPIO_WritePin>

	}
	if (Bbit3 == (0))
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d106      	bne.n	8001302 <DIGITS_Display+0x16e>
	{
	 HAL_GPIO_WritePin(GPIOC, DIGIT_B3_Pin, GPIO_PIN_RESET);
 80012f4:	2200      	movs	r2, #0
 80012f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012fa:	4808      	ldr	r0, [pc, #32]	; (800131c <DIGITS_Display+0x188>)
 80012fc:	f001 ff8e 	bl	800321c <HAL_GPIO_WritePin>
	}
	else
	{
	 HAL_GPIO_WritePin(GPIOC, DIGIT_B3_Pin, GPIO_PIN_SET);
	}
}
 8001300:	e005      	b.n	800130e <DIGITS_Display+0x17a>
	 HAL_GPIO_WritePin(GPIOC, DIGIT_B3_Pin, GPIO_PIN_SET);
 8001302:	2201      	movs	r2, #1
 8001304:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001308:	4804      	ldr	r0, [pc, #16]	; (800131c <DIGITS_Display+0x188>)
 800130a:	f001 ff87 	bl	800321c <HAL_GPIO_WritePin>
}
 800130e:	bf00      	nop
 8001310:	3730      	adds	r7, #48	; 0x30
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40020400 	.word	0x40020400
 800131c:	40020800 	.word	0x40020800

08001320 <ADC_Select_CH>:

void ADC_Select_CH(int CH)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001328:	f107 0308 	add.w	r3, r7, #8
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
	switch(CH)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2b0f      	cmp	r3, #15
 800133a:	f200 814b 	bhi.w	80015d4 <ADC_Select_CH+0x2b4>
 800133e:	a201      	add	r2, pc, #4	; (adr r2, 8001344 <ADC_Select_CH+0x24>)
 8001340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001344:	08001385 	.word	0x08001385
 8001348:	080013a7 	.word	0x080013a7
 800134c:	080013c9 	.word	0x080013c9
 8001350:	080013eb 	.word	0x080013eb
 8001354:	0800140d 	.word	0x0800140d
 8001358:	0800142f 	.word	0x0800142f
 800135c:	08001451 	.word	0x08001451
 8001360:	08001473 	.word	0x08001473
 8001364:	08001495 	.word	0x08001495
 8001368:	080014b7 	.word	0x080014b7
 800136c:	080014d7 	.word	0x080014d7
 8001370:	080014f7 	.word	0x080014f7
 8001374:	08001517 	.word	0x08001517
 8001378:	08001537 	.word	0x08001537
 800137c:	08001557 	.word	0x08001557
 8001380:	08001577 	.word	0x08001577
	{
	case 0:
	sConfig.Channel = ADC_CHANNEL_0;
 8001384:	2300      	movs	r3, #0
 8001386:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001388:	2301      	movs	r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800138c:	f107 0308 	add.w	r3, r7, #8
 8001390:	4619      	mov	r1, r3
 8001392:	4892      	ldr	r0, [pc, #584]	; (80015dc <ADC_Select_CH+0x2bc>)
 8001394:	f001 f9fc 	bl	8002790 <HAL_ADC_ConfigChannel>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	f000 80fb 	beq.w	8001596 <ADC_Select_CH+0x276>
	{
	Error_Handler();
 80013a0:	f000 fcce 	bl	8001d40 <Error_Handler>
	}
	break;
 80013a4:	e0f7      	b.n	8001596 <ADC_Select_CH+0x276>
	case 1:
	sConfig.Channel = ADC_CHANNEL_1;
 80013a6:	2301      	movs	r3, #1
 80013a8:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80013aa:	2301      	movs	r3, #1
 80013ac:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ae:	f107 0308 	add.w	r3, r7, #8
 80013b2:	4619      	mov	r1, r3
 80013b4:	4889      	ldr	r0, [pc, #548]	; (80015dc <ADC_Select_CH+0x2bc>)
 80013b6:	f001 f9eb 	bl	8002790 <HAL_ADC_ConfigChannel>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f000 80ec 	beq.w	800159a <ADC_Select_CH+0x27a>
	{
	Error_Handler();
 80013c2:	f000 fcbd 	bl	8001d40 <Error_Handler>
	}
	break;
 80013c6:	e0e8      	b.n	800159a <ADC_Select_CH+0x27a>
	case 2:
	sConfig.Channel = ADC_CHANNEL_2;
 80013c8:	2302      	movs	r3, #2
 80013ca:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80013cc:	2301      	movs	r3, #1
 80013ce:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013d0:	f107 0308 	add.w	r3, r7, #8
 80013d4:	4619      	mov	r1, r3
 80013d6:	4881      	ldr	r0, [pc, #516]	; (80015dc <ADC_Select_CH+0x2bc>)
 80013d8:	f001 f9da 	bl	8002790 <HAL_ADC_ConfigChannel>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f000 80dd 	beq.w	800159e <ADC_Select_CH+0x27e>
	{
	Error_Handler();
 80013e4:	f000 fcac 	bl	8001d40 <Error_Handler>
	}
	break;
 80013e8:	e0d9      	b.n	800159e <ADC_Select_CH+0x27e>
	case 3:
	sConfig.Channel = ADC_CHANNEL_3;
 80013ea:	2303      	movs	r3, #3
 80013ec:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80013ee:	2301      	movs	r3, #1
 80013f0:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013f2:	f107 0308 	add.w	r3, r7, #8
 80013f6:	4619      	mov	r1, r3
 80013f8:	4878      	ldr	r0, [pc, #480]	; (80015dc <ADC_Select_CH+0x2bc>)
 80013fa:	f001 f9c9 	bl	8002790 <HAL_ADC_ConfigChannel>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 80ce 	beq.w	80015a2 <ADC_Select_CH+0x282>
	{
	Error_Handler();
 8001406:	f000 fc9b 	bl	8001d40 <Error_Handler>
	}
	break;
 800140a:	e0ca      	b.n	80015a2 <ADC_Select_CH+0x282>
	case 4:
	sConfig.Channel = ADC_CHANNEL_4;
 800140c:	2304      	movs	r3, #4
 800140e:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001410:	2301      	movs	r3, #1
 8001412:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001414:	f107 0308 	add.w	r3, r7, #8
 8001418:	4619      	mov	r1, r3
 800141a:	4870      	ldr	r0, [pc, #448]	; (80015dc <ADC_Select_CH+0x2bc>)
 800141c:	f001 f9b8 	bl	8002790 <HAL_ADC_ConfigChannel>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	f000 80bf 	beq.w	80015a6 <ADC_Select_CH+0x286>
	{
	Error_Handler();
 8001428:	f000 fc8a 	bl	8001d40 <Error_Handler>
	}
	break;
 800142c:	e0bb      	b.n	80015a6 <ADC_Select_CH+0x286>
	case 5:
	sConfig.Channel = ADC_CHANNEL_5;
 800142e:	2305      	movs	r3, #5
 8001430:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001432:	2301      	movs	r3, #1
 8001434:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001436:	f107 0308 	add.w	r3, r7, #8
 800143a:	4619      	mov	r1, r3
 800143c:	4867      	ldr	r0, [pc, #412]	; (80015dc <ADC_Select_CH+0x2bc>)
 800143e:	f001 f9a7 	bl	8002790 <HAL_ADC_ConfigChannel>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	f000 80b0 	beq.w	80015aa <ADC_Select_CH+0x28a>
	{
	Error_Handler();
 800144a:	f000 fc79 	bl	8001d40 <Error_Handler>
	}
	break;
 800144e:	e0ac      	b.n	80015aa <ADC_Select_CH+0x28a>
	case 6:
	sConfig.Channel = ADC_CHANNEL_6;
 8001450:	2306      	movs	r3, #6
 8001452:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001454:	2301      	movs	r3, #1
 8001456:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001458:	f107 0308 	add.w	r3, r7, #8
 800145c:	4619      	mov	r1, r3
 800145e:	485f      	ldr	r0, [pc, #380]	; (80015dc <ADC_Select_CH+0x2bc>)
 8001460:	f001 f996 	bl	8002790 <HAL_ADC_ConfigChannel>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	f000 80a1 	beq.w	80015ae <ADC_Select_CH+0x28e>
	{
	Error_Handler();
 800146c:	f000 fc68 	bl	8001d40 <Error_Handler>
	}
	break;
 8001470:	e09d      	b.n	80015ae <ADC_Select_CH+0x28e>
	case 7:
	sConfig.Channel = ADC_CHANNEL_7;
 8001472:	2307      	movs	r3, #7
 8001474:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001476:	2301      	movs	r3, #1
 8001478:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800147a:	f107 0308 	add.w	r3, r7, #8
 800147e:	4619      	mov	r1, r3
 8001480:	4856      	ldr	r0, [pc, #344]	; (80015dc <ADC_Select_CH+0x2bc>)
 8001482:	f001 f985 	bl	8002790 <HAL_ADC_ConfigChannel>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 8092 	beq.w	80015b2 <ADC_Select_CH+0x292>
	{
	Error_Handler();
 800148e:	f000 fc57 	bl	8001d40 <Error_Handler>
	}
	break;
 8001492:	e08e      	b.n	80015b2 <ADC_Select_CH+0x292>
	case 8:
	sConfig.Channel = ADC_CHANNEL_8;
 8001494:	2308      	movs	r3, #8
 8001496:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001498:	2301      	movs	r3, #1
 800149a:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800149c:	f107 0308 	add.w	r3, r7, #8
 80014a0:	4619      	mov	r1, r3
 80014a2:	484e      	ldr	r0, [pc, #312]	; (80015dc <ADC_Select_CH+0x2bc>)
 80014a4:	f001 f974 	bl	8002790 <HAL_ADC_ConfigChannel>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 8083 	beq.w	80015b6 <ADC_Select_CH+0x296>
	{
	Error_Handler();
 80014b0:	f000 fc46 	bl	8001d40 <Error_Handler>
	}
	break;
 80014b4:	e07f      	b.n	80015b6 <ADC_Select_CH+0x296>
	case 9:
	sConfig.Channel = ADC_CHANNEL_9;
 80014b6:	2309      	movs	r3, #9
 80014b8:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80014ba:	2301      	movs	r3, #1
 80014bc:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014be:	f107 0308 	add.w	r3, r7, #8
 80014c2:	4619      	mov	r1, r3
 80014c4:	4845      	ldr	r0, [pc, #276]	; (80015dc <ADC_Select_CH+0x2bc>)
 80014c6:	f001 f963 	bl	8002790 <HAL_ADC_ConfigChannel>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d074      	beq.n	80015ba <ADC_Select_CH+0x29a>
	{
	Error_Handler();
 80014d0:	f000 fc36 	bl	8001d40 <Error_Handler>
	}
	break;
 80014d4:	e071      	b.n	80015ba <ADC_Select_CH+0x29a>
	case 10:
	sConfig.Channel = ADC_CHANNEL_10;
 80014d6:	230a      	movs	r3, #10
 80014d8:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80014da:	2301      	movs	r3, #1
 80014dc:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014de:	f107 0308 	add.w	r3, r7, #8
 80014e2:	4619      	mov	r1, r3
 80014e4:	483d      	ldr	r0, [pc, #244]	; (80015dc <ADC_Select_CH+0x2bc>)
 80014e6:	f001 f953 	bl	8002790 <HAL_ADC_ConfigChannel>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d066      	beq.n	80015be <ADC_Select_CH+0x29e>
	{
	Error_Handler();
 80014f0:	f000 fc26 	bl	8001d40 <Error_Handler>
	}
	break;
 80014f4:	e063      	b.n	80015be <ADC_Select_CH+0x29e>
	case 11:
	sConfig.Channel = ADC_CHANNEL_11;
 80014f6:	230b      	movs	r3, #11
 80014f8:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80014fa:	2301      	movs	r3, #1
 80014fc:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014fe:	f107 0308 	add.w	r3, r7, #8
 8001502:	4619      	mov	r1, r3
 8001504:	4835      	ldr	r0, [pc, #212]	; (80015dc <ADC_Select_CH+0x2bc>)
 8001506:	f001 f943 	bl	8002790 <HAL_ADC_ConfigChannel>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d058      	beq.n	80015c2 <ADC_Select_CH+0x2a2>
	{
	Error_Handler();
 8001510:	f000 fc16 	bl	8001d40 <Error_Handler>
	}
	break;
 8001514:	e055      	b.n	80015c2 <ADC_Select_CH+0x2a2>
	case 12:
	sConfig.Channel = ADC_CHANNEL_12;
 8001516:	230c      	movs	r3, #12
 8001518:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 800151a:	2301      	movs	r3, #1
 800151c:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800151e:	f107 0308 	add.w	r3, r7, #8
 8001522:	4619      	mov	r1, r3
 8001524:	482d      	ldr	r0, [pc, #180]	; (80015dc <ADC_Select_CH+0x2bc>)
 8001526:	f001 f933 	bl	8002790 <HAL_ADC_ConfigChannel>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d04a      	beq.n	80015c6 <ADC_Select_CH+0x2a6>
	{
	Error_Handler();
 8001530:	f000 fc06 	bl	8001d40 <Error_Handler>
	}
	break;
 8001534:	e047      	b.n	80015c6 <ADC_Select_CH+0x2a6>
	case 13:
	sConfig.Channel = ADC_CHANNEL_13;
 8001536:	230d      	movs	r3, #13
 8001538:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 800153a:	2301      	movs	r3, #1
 800153c:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800153e:	f107 0308 	add.w	r3, r7, #8
 8001542:	4619      	mov	r1, r3
 8001544:	4825      	ldr	r0, [pc, #148]	; (80015dc <ADC_Select_CH+0x2bc>)
 8001546:	f001 f923 	bl	8002790 <HAL_ADC_ConfigChannel>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d03c      	beq.n	80015ca <ADC_Select_CH+0x2aa>
	{
	Error_Handler();
 8001550:	f000 fbf6 	bl	8001d40 <Error_Handler>
	}
	break;
 8001554:	e039      	b.n	80015ca <ADC_Select_CH+0x2aa>
	case 14:
	sConfig.Channel = ADC_CHANNEL_14;
 8001556:	230e      	movs	r3, #14
 8001558:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 800155a:	2301      	movs	r3, #1
 800155c:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800155e:	f107 0308 	add.w	r3, r7, #8
 8001562:	4619      	mov	r1, r3
 8001564:	481d      	ldr	r0, [pc, #116]	; (80015dc <ADC_Select_CH+0x2bc>)
 8001566:	f001 f913 	bl	8002790 <HAL_ADC_ConfigChannel>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d02e      	beq.n	80015ce <ADC_Select_CH+0x2ae>
	{
	Error_Handler();
 8001570:	f000 fbe6 	bl	8001d40 <Error_Handler>
	}
	break;
 8001574:	e02b      	b.n	80015ce <ADC_Select_CH+0x2ae>
	case 15:
	sConfig.Channel = ADC_CHANNEL_15;
 8001576:	230f      	movs	r3, #15
 8001578:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 800157a:	2301      	movs	r3, #1
 800157c:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800157e:	f107 0308 	add.w	r3, r7, #8
 8001582:	4619      	mov	r1, r3
 8001584:	4815      	ldr	r0, [pc, #84]	; (80015dc <ADC_Select_CH+0x2bc>)
 8001586:	f001 f903 	bl	8002790 <HAL_ADC_ConfigChannel>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d020      	beq.n	80015d2 <ADC_Select_CH+0x2b2>
	{
	Error_Handler();
 8001590:	f000 fbd6 	bl	8001d40 <Error_Handler>
	}
	break;
 8001594:	e01d      	b.n	80015d2 <ADC_Select_CH+0x2b2>
	break;
 8001596:	bf00      	nop
 8001598:	e01c      	b.n	80015d4 <ADC_Select_CH+0x2b4>
	break;
 800159a:	bf00      	nop
 800159c:	e01a      	b.n	80015d4 <ADC_Select_CH+0x2b4>
	break;
 800159e:	bf00      	nop
 80015a0:	e018      	b.n	80015d4 <ADC_Select_CH+0x2b4>
	break;
 80015a2:	bf00      	nop
 80015a4:	e016      	b.n	80015d4 <ADC_Select_CH+0x2b4>
	break;
 80015a6:	bf00      	nop
 80015a8:	e014      	b.n	80015d4 <ADC_Select_CH+0x2b4>
	break;
 80015aa:	bf00      	nop
 80015ac:	e012      	b.n	80015d4 <ADC_Select_CH+0x2b4>
	break;
 80015ae:	bf00      	nop
 80015b0:	e010      	b.n	80015d4 <ADC_Select_CH+0x2b4>
	break;
 80015b2:	bf00      	nop
 80015b4:	e00e      	b.n	80015d4 <ADC_Select_CH+0x2b4>
	break;
 80015b6:	bf00      	nop
 80015b8:	e00c      	b.n	80015d4 <ADC_Select_CH+0x2b4>
	break;
 80015ba:	bf00      	nop
 80015bc:	e00a      	b.n	80015d4 <ADC_Select_CH+0x2b4>
	break;
 80015be:	bf00      	nop
 80015c0:	e008      	b.n	80015d4 <ADC_Select_CH+0x2b4>
	break;
 80015c2:	bf00      	nop
 80015c4:	e006      	b.n	80015d4 <ADC_Select_CH+0x2b4>
	break;
 80015c6:	bf00      	nop
 80015c8:	e004      	b.n	80015d4 <ADC_Select_CH+0x2b4>
	break;
 80015ca:	bf00      	nop
 80015cc:	e002      	b.n	80015d4 <ADC_Select_CH+0x2b4>
	break;
 80015ce:	bf00      	nop
 80015d0:	e000      	b.n	80015d4 <ADC_Select_CH+0x2b4>
	break;
 80015d2:	bf00      	nop
	}
}
 80015d4:	bf00      	nop
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	200000d4 	.word	0x200000d4

080015e0 <UART_Parse_MSG>:

void UART_Parse_MSG(char *option_msg, char *msg, volatile uint8_t *Zone, unsigned int input_char_num)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b0b6      	sub	sp, #216	; 0xd8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
 80015ec:	603b      	str	r3, [r7, #0]
	user_input_flag = 0;
 80015ee:	4b40      	ldr	r3, [pc, #256]	; (80016f0 <UART_Parse_MSG+0x110>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
  uint8_t txd_msg_buffer[64] = {0};
 80015f4:	2300      	movs	r3, #0
 80015f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80015fa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015fe:	223c      	movs	r2, #60	; 0x3c
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f004 fc34 	bl	8005e70 <memset>
  uint8_t option_buffer[128] = {0};
 8001608:	2300      	movs	r3, #0
 800160a:	61bb      	str	r3, [r7, #24]
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	227c      	movs	r2, #124	; 0x7c
 8001612:	2100      	movs	r1, #0
 8001614:	4618      	mov	r0, r3
 8001616:	f004 fc2b 	bl	8005e70 <memset>
  uint8_t temp_zone[4] = {0};
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]

  memset(temp_zone, 0, sizeof(temp_zone));
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	2204      	movs	r2, #4
 8001624:	2100      	movs	r1, #0
 8001626:	4618      	mov	r0, r3
 8001628:	f004 fc22 	bl	8005e70 <memset>

  sprintf((char*)txd_msg_buffer, "%s", msg);
 800162c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001630:	68ba      	ldr	r2, [r7, #8]
 8001632:	4930      	ldr	r1, [pc, #192]	; (80016f4 <UART_Parse_MSG+0x114>)
 8001634:	4618      	mov	r0, r3
 8001636:	f004 fbfb 	bl	8005e30 <siprintf>
  sprintf((char*)option_buffer, "%s", option_msg);
 800163a:	f107 0318 	add.w	r3, r7, #24
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	492c      	ldr	r1, [pc, #176]	; (80016f4 <UART_Parse_MSG+0x114>)
 8001642:	4618      	mov	r0, r3
 8001644:	f004 fbf4 	bl	8005e30 <siprintf>
  // Send the prompt to the user
  HAL_UART_Transmit(&huart6, option_buffer, strlen((char*)option_buffer), 1000);
 8001648:	f107 0318 	add.w	r3, r7, #24
 800164c:	4618      	mov	r0, r3
 800164e:	f7fe fdc7 	bl	80001e0 <strlen>
 8001652:	4603      	mov	r3, r0
 8001654:	b29a      	uxth	r2, r3
 8001656:	f107 0118 	add.w	r1, r7, #24
 800165a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800165e:	4826      	ldr	r0, [pc, #152]	; (80016f8 <UART_Parse_MSG+0x118>)
 8001660:	f003 fb2b 	bl	8004cba <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 8001664:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001668:	4618      	mov	r0, r3
 800166a:	f7fe fdb9 	bl	80001e0 <strlen>
 800166e:	4603      	mov	r3, r0
 8001670:	b29a      	uxth	r2, r3
 8001672:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8001676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167a:	481f      	ldr	r0, [pc, #124]	; (80016f8 <UART_Parse_MSG+0x118>)
 800167c:	f003 fb1d 	bl	8004cba <HAL_UART_Transmit>
  // Initialize user input interrupt to write input to PWM_Zone
  HAL_UART_Receive_IT(&huart6, temp_zone, input_char_num);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	b29a      	uxth	r2, r3
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	4619      	mov	r1, r3
 800168a:	481b      	ldr	r0, [pc, #108]	; (80016f8 <UART_Parse_MSG+0x118>)
 800168c:	f003 fba7 	bl	8004dde <HAL_UART_Receive_IT>
  // Wait for the reception to complete
  while(user_input_flag == 0) {};
 8001690:	bf00      	nop
 8001692:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <UART_Parse_MSG+0x110>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0fb      	beq.n	8001692 <UART_Parse_MSG+0xb2>
  temp_zone[input_char_num] = '\0';
 800169a:	f107 0214 	add.w	r2, r7, #20
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	4413      	add	r3, r2
 80016a2:	2200      	movs	r2, #0
 80016a4:	701a      	strb	r2, [r3, #0]
  // Convert received data
  *Zone = atoi((const char *)temp_zone);
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	4618      	mov	r0, r3
 80016ac:	f004 fb30 	bl	8005d10 <atoi>
 80016b0:	4603      	mov	r3, r0
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	701a      	strb	r2, [r3, #0]
  // Echo the received byte back to UART to confirm reception
  sprintf((char*)txd_msg_buffer, "%i", *Zone);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	461a      	mov	r2, r3
 80016c0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80016c4:	490d      	ldr	r1, [pc, #52]	; (80016fc <UART_Parse_MSG+0x11c>)
 80016c6:	4618      	mov	r0, r3
 80016c8:	f004 fbb2 	bl	8005e30 <siprintf>
  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 80016cc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7fe fd85 	bl	80001e0 <strlen>
 80016d6:	4603      	mov	r3, r0
 80016d8:	b29a      	uxth	r2, r3
 80016da:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80016de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016e2:	4805      	ldr	r0, [pc, #20]	; (80016f8 <UART_Parse_MSG+0x118>)
 80016e4:	f003 fae9 	bl	8004cba <HAL_UART_Transmit>
}
 80016e8:	bf00      	nop
 80016ea:	37d8      	adds	r7, #216	; 0xd8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000094 	.word	0x20000094
 80016f4:	08006aa4 	.word	0x08006aa4
 80016f8:	2000027c 	.word	0x2000027c
 80016fc:	08006aa8 	.word	0x08006aa8

08001700 <UART_Send_MSG>:

void UART_Send_MSG(char* msg)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b0a2      	sub	sp, #136	; 0x88
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	uint8_t msg_buffer[128] = {0};
 8001708:	2300      	movs	r3, #0
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	f107 030c 	add.w	r3, r7, #12
 8001710:	227c      	movs	r2, #124	; 0x7c
 8001712:	2100      	movs	r1, #0
 8001714:	4618      	mov	r0, r3
 8001716:	f004 fbab 	bl	8005e70 <memset>
	sprintf((char*)msg_buffer, "%s", msg);
 800171a:	f107 0308 	add.w	r3, r7, #8
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	490a      	ldr	r1, [pc, #40]	; (800174c <UART_Send_MSG+0x4c>)
 8001722:	4618      	mov	r0, r3
 8001724:	f004 fb84 	bl	8005e30 <siprintf>
	HAL_UART_Transmit(&huart6, msg_buffer, strlen((char*)msg_buffer), 1000);
 8001728:	f107 0308 	add.w	r3, r7, #8
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe fd57 	bl	80001e0 <strlen>
 8001732:	4603      	mov	r3, r0
 8001734:	b29a      	uxth	r2, r3
 8001736:	f107 0108 	add.w	r1, r7, #8
 800173a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173e:	4804      	ldr	r0, [pc, #16]	; (8001750 <UART_Send_MSG+0x50>)
 8001740:	f003 fabb 	bl	8004cba <HAL_UART_Transmit>
}
 8001744:	bf00      	nop
 8001746:	3788      	adds	r7, #136	; 0x88
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	08006aa4 	.word	0x08006aa4
 8001750:	2000027c 	.word	0x2000027c

08001754 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART6) {
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a09      	ldr	r2, [pc, #36]	; (8001788 <HAL_UART_RxCpltCallback+0x34>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d102      	bne.n	800176c <HAL_UART_RxCpltCallback+0x18>
		user_input_flag = 1;
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <HAL_UART_RxCpltCallback+0x38>)
 8001768:	2201      	movs	r2, #1
 800176a:	701a      	strb	r2, [r3, #0]
	}

	if (huart->Instance == USART1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a07      	ldr	r2, [pc, #28]	; (8001790 <HAL_UART_RxCpltCallback+0x3c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d102      	bne.n	800177c <HAL_UART_RxCpltCallback+0x28>
	{
		us100_Rx_flag = 01; //this flag is set to show that an receiver interrupt has occurred
 8001776:	4b07      	ldr	r3, [pc, #28]	; (8001794 <HAL_UART_RxCpltCallback+0x40>)
 8001778:	2201      	movs	r2, #1
 800177a:	701a      	strb	r2, [r3, #0]
	}
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	40011400 	.word	0x40011400
 800178c:	20000094 	.word	0x20000094
 8001790:	40011000 	.word	0x40011000
 8001794:	200000c9 	.word	0x200000c9

08001798 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001798:	b4b0      	push	{r4, r5, r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BLU_PB_Pin) {
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017a8:	d102      	bne.n	80017b0 <HAL_GPIO_EXTI_Callback+0x18>
		RUN_MODE_START_FLAG = 1;
 80017aa:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <HAL_GPIO_EXTI_Callback+0x3c>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == RPM_TICK_Pin) {
 80017b0:	88fb      	ldrh	r3, [r7, #6]
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	d108      	bne.n	80017c8 <HAL_GPIO_EXTI_Callback+0x30>
		rpm_tick_count++;  // Ensure this is incrementing
 80017b6:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <HAL_GPIO_EXTI_Callback+0x40>)
 80017b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017bc:	1c54      	adds	r4, r2, #1
 80017be:	f143 0500 	adc.w	r5, r3, #0
 80017c2:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <HAL_GPIO_EXTI_Callback+0x40>)
 80017c4:	e9c3 4500 	strd	r4, r5, [r3]

	}
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bcb0      	pop	{r4, r5, r7}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	200000a2 	.word	0x200000a2
 80017d8:	200000a8 	.word	0x200000a8

080017dc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017dc:	b5b0      	push	{r4, r5, r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5) {
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a1d      	ldr	r2, [pc, #116]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d133      	bne.n	8001856 <HAL_TIM_PeriodElapsedCallback+0x7a>
		// MOTRO RPM calculation
		uint32_t ticks = rpm_tick_count - last_rpm_tick_count;
 80017ee:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80017f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f4:	4611      	mov	r1, r2
 80017f6:	4b1c      	ldr	r3, [pc, #112]	; (8001868 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80017f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fc:	4613      	mov	r3, r2
 80017fe:	1acb      	subs	r3, r1, r3
 8001800:	60fb      	str	r3, [r7, #12]
		if (ticks > 0) {
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d00c      	beq.n	8001822 <HAL_TIM_PeriodElapsedCallback+0x46>
				DC_Motor_RPM = (ticks * 60) / 20;  // Calculate RPM based on ticks
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	4613      	mov	r3, r2
 800180c:	011b      	lsls	r3, r3, #4
 800180e:	1a9b      	subs	r3, r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	461a      	mov	r2, r3
 8001814:	4b15      	ldr	r3, [pc, #84]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001816:	fba3 2302 	umull	r2, r3, r3, r2
 800181a:	091b      	lsrs	r3, r3, #4
 800181c:	4a14      	ldr	r2, [pc, #80]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800181e:	6013      	str	r3, [r2, #0]
 8001820:	e002      	b.n	8001828 <HAL_TIM_PeriodElapsedCallback+0x4c>
		} else {
				DC_Motor_RPM = 0;  // Set RPM to zero if no ticks are detected
 8001822:	4b13      	ldr	r3, [pc, #76]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
		}
		last_rpm_tick_count = rpm_tick_count;  // Update last count
 8001828:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800182a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182e:	490e      	ldr	r1, [pc, #56]	; (8001868 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001830:	e9c1 2300 	strd	r2, r3, [r1]

		// Update wall clock second every real second
		simulate_seconds += 600;  // Simulating 24 hour minutes per 2.4 min
 8001834:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183a:	f512 7416 	adds.w	r4, r2, #600	; 0x258
 800183e:	f143 0500 	adc.w	r5, r3, #0
 8001842:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001844:	e9c3 4500 	strd	r4, r5, [r3]
		Update_Wall_CLK_Display(simulate_seconds);
 8001848:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800184a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184e:	4610      	mov	r0, r2
 8001850:	4619      	mov	r1, r3
 8001852:	f000 f86f 	bl	8001934 <Update_Wall_CLK_Display>
	}

}
 8001856:	bf00      	nop
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bdb0      	pop	{r4, r5, r7, pc}
 800185e:	bf00      	nop
 8001860:	40000c00 	.word	0x40000c00
 8001864:	200000a8 	.word	0x200000a8
 8001868:	200000b0 	.word	0x200000b0
 800186c:	cccccccd 	.word	0xcccccccd
 8001870:	200000b8 	.word	0x200000b8
 8001874:	200000c0 	.word	0x200000c0

08001878 <Control_DC_Motor_PWM>:

void Control_DC_Motor_PWM(uint8_t percent, uint8_t direction)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	460a      	mov	r2, r1
 8001882:	71fb      	strb	r3, [r7, #7]
 8001884:	4613      	mov	r3, r2
 8001886:	71bb      	strb	r3, [r7, #6]
  if (percent == 0) {
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d106      	bne.n	800189c <Control_DC_Motor_PWM+0x24>
		TIM3->CCR1 = 0;
 800188e:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <Control_DC_Motor_PWM+0x5c>)
 8001890:	2200      	movs	r2, #0
 8001892:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR3 = 0;
 8001894:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <Control_DC_Motor_PWM+0x5c>)
 8001896:	2200      	movs	r2, #0
 8001898:	63da      	str	r2, [r3, #60]	; 0x3c
		return;
 800189a:	e015      	b.n	80018c8 <Control_DC_Motor_PWM+0x50>
  }

	uint32_t pwm_value = (2000 * percent) / 100;  // Calculate the PWM value based on the percentage
 800189c:	79fa      	ldrb	r2, [r7, #7]
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	60fb      	str	r3, [r7, #12]
	// Set motor direction 0 - reverse, 1 - forward
	if (direction == 1) {
 80018a8:	79bb      	ldrb	r3, [r7, #6]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d106      	bne.n	80018bc <Control_DC_Motor_PWM+0x44>
		// Forward direction
		TIM3->CCR1 = pwm_value; // Set PWM for forward
 80018ae:	4a09      	ldr	r2, [pc, #36]	; (80018d4 <Control_DC_Motor_PWM+0x5c>)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6353      	str	r3, [r2, #52]	; 0x34
		TIM3->CCR3 = 0;         // Ensure the reverse is 0
 80018b4:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <Control_DC_Motor_PWM+0x5c>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	63da      	str	r2, [r3, #60]	; 0x3c
 80018ba:	e005      	b.n	80018c8 <Control_DC_Motor_PWM+0x50>
	} else {
		// Reverse direction
		TIM3->CCR1 = 0;         // Ensure the forward is 0
 80018bc:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <Control_DC_Motor_PWM+0x5c>)
 80018be:	2200      	movs	r2, #0
 80018c0:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR3 = pwm_value; // Set PWM for reverse
 80018c2:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <Control_DC_Motor_PWM+0x5c>)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	63d3      	str	r3, [r2, #60]	; 0x3c
	}
}
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	40000400 	.word	0x40000400

080018d8 <Control_Servo_Motor_PWM>:

void Control_Servo_Motor_PWM(uint8_t direction)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
	// Set motor direction 0 - INLET
	if (direction == 0) {
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d105      	bne.n	80018f4 <Control_Servo_Motor_PWM+0x1c>
		TIM2->CCR1 = 2500;
 80018e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018ec:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80018f0:	635a      	str	r2, [r3, #52]	; 0x34
	} else if (direction == 2) {
		TIM2->CCR1 = 1200;
	} else if (direction == 3 ) {
		TIM2->CCR1 = 1900;
	}
}
 80018f2:	e019      	b.n	8001928 <Control_Servo_Motor_PWM+0x50>
	} else if (direction == 1){
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d105      	bne.n	8001906 <Control_Servo_Motor_PWM+0x2e>
		TIM2->CCR1 = 500;
 80018fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018fe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001902:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001904:	e010      	b.n	8001928 <Control_Servo_Motor_PWM+0x50>
	} else if (direction == 2) {
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	2b02      	cmp	r3, #2
 800190a:	d105      	bne.n	8001918 <Control_Servo_Motor_PWM+0x40>
		TIM2->CCR1 = 1200;
 800190c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001910:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001914:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001916:	e007      	b.n	8001928 <Control_Servo_Motor_PWM+0x50>
	} else if (direction == 3 ) {
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	2b03      	cmp	r3, #3
 800191c:	d104      	bne.n	8001928 <Control_Servo_Motor_PWM+0x50>
		TIM2->CCR1 = 1900;
 800191e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001922:	f240 726c 	movw	r2, #1900	; 0x76c
 8001926:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <Update_Wall_CLK_Display>:

void Update_Wall_CLK_Display(volatile uint64_t simulated_seconds)
{
 8001934:	b5b0      	push	{r4, r5, r7, lr}
 8001936:	b0c8      	sub	sp, #288	; 0x120
 8001938:	af04      	add	r7, sp, #16
 800193a:	e9c7 0100 	strd	r0, r1, [r7]
		static uint8_t last_hour_displayed = 255;
		if (simulate_seconds >= 3600) {
 800193e:	4b4a      	ldr	r3, [pc, #296]	; (8001a68 <Update_Wall_CLK_Display+0x134>)
 8001940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001944:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
 8001948:	f173 0300 	sbcs.w	r3, r3, #0
 800194c:	d318      	bcc.n	8001980 <Update_Wall_CLK_Display+0x4c>
			simulate_seconds -= 3600;
 800194e:	4b46      	ldr	r3, [pc, #280]	; (8001a68 <Update_Wall_CLK_Display+0x134>)
 8001950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001954:	f5b2 6461 	subs.w	r4, r2, #3600	; 0xe10
 8001958:	f143 35ff 	adc.w	r5, r3, #4294967295
 800195c:	4b42      	ldr	r3, [pc, #264]	; (8001a68 <Update_Wall_CLK_Display+0x134>)
 800195e:	e9c3 4500 	strd	r4, r5, [r3]
			Current_Wall_CLK_Hour++;
 8001962:	4b42      	ldr	r3, [pc, #264]	; (8001a6c <Update_Wall_CLK_Display+0x138>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	b2db      	uxtb	r3, r3
 8001968:	3301      	adds	r3, #1
 800196a:	b2da      	uxtb	r2, r3
 800196c:	4b3f      	ldr	r3, [pc, #252]	; (8001a6c <Update_Wall_CLK_Display+0x138>)
 800196e:	701a      	strb	r2, [r3, #0]
			if (Current_Wall_CLK_Hour >= 24) {
 8001970:	4b3e      	ldr	r3, [pc, #248]	; (8001a6c <Update_Wall_CLK_Display+0x138>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b17      	cmp	r3, #23
 8001978:	d902      	bls.n	8001980 <Update_Wall_CLK_Display+0x4c>
					Current_Wall_CLK_Hour = 0;
 800197a:	4b3c      	ldr	r3, [pc, #240]	; (8001a6c <Update_Wall_CLK_Display+0x138>)
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]
			}
		}
		uint8_t scaled_hour = (WALL_CLK_START + Current_Wall_CLK_Hour) % 24;
 8001980:	4b3b      	ldr	r3, [pc, #236]	; (8001a70 <Update_Wall_CLK_Display+0x13c>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	461a      	mov	r2, r3
 8001988:	4b38      	ldr	r3, [pc, #224]	; (8001a6c <Update_Wall_CLK_Display+0x138>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	b2db      	uxtb	r3, r3
 800198e:	441a      	add	r2, r3
 8001990:	4b38      	ldr	r3, [pc, #224]	; (8001a74 <Update_Wall_CLK_Display+0x140>)
 8001992:	fb83 1302 	smull	r1, r3, r3, r2
 8001996:	1099      	asrs	r1, r3, #2
 8001998:	17d3      	asrs	r3, r2, #31
 800199a:	1ac9      	subs	r1, r1, r3
 800199c:	460b      	mov	r3, r1
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	440b      	add	r3, r1
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	1ad1      	subs	r1, r2, r3
 80019a6:	460b      	mov	r3, r1
 80019a8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

    if ( (last_hour_displayed != scaled_hour) && System_Interlock_Flag == 0 ) {
 80019ac:	4b32      	ldr	r3, [pc, #200]	; (8001a78 <Update_Wall_CLK_Display+0x144>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d034      	beq.n	8001a22 <Update_Wall_CLK_Display+0xee>
 80019b8:	4b30      	ldr	r3, [pc, #192]	; (8001a7c <Update_Wall_CLK_Display+0x148>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d12f      	bne.n	8001a22 <Update_Wall_CLK_Display+0xee>
			last_hour_displayed = scaled_hour;
 80019c2:	4a2d      	ldr	r2, [pc, #180]	; (8001a78 <Update_Wall_CLK_Display+0x144>)
 80019c4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019c8:	7013      	strb	r3, [r2, #0]
			char buf[256];
			// Format and send the message every hour
			sprintf(buf, "Wall-Clock Time: %02d | Zone/Inlet: %s | Motor Speed %%PWM: %d%% | Motor RPM: %lu | Water Reservoir Depth: %d%%\r\n",
 80019ca:	4b28      	ldr	r3, [pc, #160]	; (8001a6c <Update_Wall_CLK_Display+0x138>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	461d      	mov	r5, r3
 80019d2:	4b2b      	ldr	r3, [pc, #172]	; (8001a80 <Update_Wall_CLK_Display+0x14c>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	461a      	mov	r2, r3
 80019da:	4b2a      	ldr	r3, [pc, #168]	; (8001a84 <Update_Wall_CLK_Display+0x150>)
 80019dc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80019e0:	4b29      	ldr	r3, [pc, #164]	; (8001a88 <Update_Wall_CLK_Display+0x154>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	461c      	mov	r4, r3
 80019e8:	4b28      	ldr	r3, [pc, #160]	; (8001a8c <Update_Wall_CLK_Display+0x158>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4928      	ldr	r1, [pc, #160]	; (8001a90 <Update_Wall_CLK_Display+0x15c>)
 80019ee:	7809      	ldrb	r1, [r1, #0]
 80019f0:	b2c9      	uxtb	r1, r1
 80019f2:	f107 000c 	add.w	r0, r7, #12
 80019f6:	9102      	str	r1, [sp, #8]
 80019f8:	9301      	str	r3, [sp, #4]
 80019fa:	9400      	str	r4, [sp, #0]
 80019fc:	4613      	mov	r3, r2
 80019fe:	462a      	mov	r2, r5
 8001a00:	4924      	ldr	r1, [pc, #144]	; (8001a94 <Update_Wall_CLK_Display+0x160>)
 8001a02:	f004 fa15 	bl	8005e30 <siprintf>
							Current_Wall_CLK_Hour, Zone_Names[Current_Zone], Current_DC_Motor_Percent_PWM, DC_Motor_RPM, Current_Water_Percent_depth);

			HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), 1000);
 8001a06:	f107 030c 	add.w	r3, r7, #12
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7fe fbe8 	bl	80001e0 <strlen>
 8001a10:	4603      	mov	r3, r0
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	f107 010c 	add.w	r1, r7, #12
 8001a18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a1c:	481e      	ldr	r0, [pc, #120]	; (8001a98 <Update_Wall_CLK_Display+0x164>)
 8001a1e:	f003 f94c 	bl	8004cba <HAL_UART_Transmit>
    }

    uint8_t digit_a = scaled_hour / 10; // Tens digit of the hour
 8001a22:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a26:	4a1d      	ldr	r2, [pc, #116]	; (8001a9c <Update_Wall_CLK_Display+0x168>)
 8001a28:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2c:	08db      	lsrs	r3, r3, #3
 8001a2e:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
    uint8_t digit_b = scaled_hour % 10; // Units digit of the hour
 8001a32:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8001a36:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <Update_Wall_CLK_Display+0x168>)
 8001a38:	fba3 1302 	umull	r1, r3, r3, r2
 8001a3c:	08d9      	lsrs	r1, r3, #3
 8001a3e:	460b      	mov	r3, r1
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	440b      	add	r3, r1
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d

    DIGITS_Display(digit_a, digit_b); // Display the scaled hour
 8001a4c:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8001a50:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001a54:	4611      	mov	r1, r2
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fb9c 	bl	8001194 <DIGITS_Display>
}
 8001a5c:	bf00      	nop
 8001a5e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bdb0      	pop	{r4, r5, r7, pc}
 8001a66:	bf00      	nop
 8001a68:	200000c0 	.word	0x200000c0
 8001a6c:	200000c8 	.word	0x200000c8
 8001a70:	20000099 	.word	0x20000099
 8001a74:	2aaaaaab 	.word	0x2aaaaaab
 8001a78:	20000014 	.word	0x20000014
 8001a7c:	200000a4 	.word	0x200000a4
 8001a80:	200000a3 	.word	0x200000a3
 8001a84:	20000000 	.word	0x20000000
 8001a88:	200000bc 	.word	0x200000bc
 8001a8c:	200000b8 	.word	0x200000b8
 8001a90:	200000ce 	.word	0x200000ce
 8001a94:	08006aac 	.word	0x08006aac
 8001a98:	2000027c 	.word	0x2000027c
 8001a9c:	cccccccd 	.word	0xcccccccd

08001aa0 <ADC_Manual_Control_Percent_PWM>:

uint8_t ADC_Manual_Control_Percent_PWM()
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
  uint8_t adc_value = 0; // 0 - 255
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	71fb      	strb	r3, [r7, #7]
	ADC_Select_CH(9);
 8001aaa:	2009      	movs	r0, #9
 8001aac:	f7ff fc38 	bl	8001320 <ADC_Select_CH>
	HAL_ADC_Start(&hadc1);
 8001ab0:	4810      	ldr	r0, [pc, #64]	; (8001af4 <ADC_Manual_Control_Percent_PWM+0x54>)
 8001ab2:	f000 fced 	bl	8002490 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001ab6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001aba:	480e      	ldr	r0, [pc, #56]	; (8001af4 <ADC_Manual_Control_Percent_PWM+0x54>)
 8001abc:	f000 fdcf 	bl	800265e <HAL_ADC_PollForConversion>
	adc_value = HAL_ADC_GetValue(&hadc1);
 8001ac0:	480c      	ldr	r0, [pc, #48]	; (8001af4 <ADC_Manual_Control_Percent_PWM+0x54>)
 8001ac2:	f000 fe57 	bl	8002774 <HAL_ADC_GetValue>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]
	HAL_ADC_Stop(&hadc1);
 8001aca:	480a      	ldr	r0, [pc, #40]	; (8001af4 <ADC_Manual_Control_Percent_PWM+0x54>)
 8001acc:	f000 fd94 	bl	80025f8 <HAL_ADC_Stop>

	// Calculate percentage (0 to 100%)
	uint8_t percentage = (uint8_t)((adc_value * 100) / 255);
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	2264      	movs	r2, #100	; 0x64
 8001ad4:	fb02 f303 	mul.w	r3, r2, r3
 8001ad8:	4a07      	ldr	r2, [pc, #28]	; (8001af8 <ADC_Manual_Control_Percent_PWM+0x58>)
 8001ada:	fb82 1203 	smull	r1, r2, r2, r3
 8001ade:	441a      	add	r2, r3
 8001ae0:	11d2      	asrs	r2, r2, #7
 8001ae2:	17db      	asrs	r3, r3, #31
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	71bb      	strb	r3, [r7, #6]

  return percentage;
 8001ae8:	79bb      	ldrb	r3, [r7, #6]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	200000d4 	.word	0x200000d4
 8001af8:	80808081 	.word	0x80808081

08001afc <Get_Water_Percent_depth>:

void Get_Water_Percent_depth()
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, us100_buffer, 2);
 8001b02:	2202      	movs	r2, #2
 8001b04:	4930      	ldr	r1, [pc, #192]	; (8001bc8 <Get_Water_Percent_depth+0xcc>)
 8001b06:	4831      	ldr	r0, [pc, #196]	; (8001bcc <Get_Water_Percent_depth+0xd0>)
 8001b08:	f003 f969 	bl	8004dde <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart1, &cmd_dist, 1, 500);
 8001b0c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b10:	2201      	movs	r2, #1
 8001b12:	492f      	ldr	r1, [pc, #188]	; (8001bd0 <Get_Water_Percent_depth+0xd4>)
 8001b14:	482d      	ldr	r0, [pc, #180]	; (8001bcc <Get_Water_Percent_depth+0xd0>)
 8001b16:	f003 f8d0 	bl	8004cba <HAL_UART_Transmit>
	HAL_Delay(0.005);
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f000 fc50 	bl	80023c0 <HAL_Delay>
	while( us100_Rx_flag == (00) ) {};
 8001b20:	bf00      	nop
 8001b22:	4b2c      	ldr	r3, [pc, #176]	; (8001bd4 <Get_Water_Percent_depth+0xd8>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0fa      	beq.n	8001b22 <Get_Water_Percent_depth+0x26>
	// Combine the two bytes into a single 16-bit integer
	distance_mm = ((uint16_t)us100_buffer[0] << 8) | us100_buffer[1];
 8001b2c:	4b26      	ldr	r3, [pc, #152]	; (8001bc8 <Get_Water_Percent_depth+0xcc>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	021b      	lsls	r3, r3, #8
 8001b32:	b21a      	sxth	r2, r3
 8001b34:	4b24      	ldr	r3, [pc, #144]	; (8001bc8 <Get_Water_Percent_depth+0xcc>)
 8001b36:	785b      	ldrb	r3, [r3, #1]
 8001b38:	b21b      	sxth	r3, r3
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	b21b      	sxth	r3, r3
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	4b25      	ldr	r3, [pc, #148]	; (8001bd8 <Get_Water_Percent_depth+0xdc>)
 8001b42:	801a      	strh	r2, [r3, #0]
  uint8_t calculated_depth = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	71fb      	strb	r3, [r7, #7]

	if( distance_mm >= Tank_Level_Lo ) {
 8001b48:	4b23      	ldr	r3, [pc, #140]	; (8001bd8 <Get_Water_Percent_depth+0xdc>)
 8001b4a:	881b      	ldrh	r3, [r3, #0]
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	4b23      	ldr	r3, [pc, #140]	; (8001bdc <Get_Water_Percent_depth+0xe0>)
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d305      	bcc.n	8001b64 <Get_Water_Percent_depth+0x68>
		calculated_depth = 0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	71fb      	strb	r3, [r7, #7]
		Tank_Level_Lo_Alarm = 1;
 8001b5c:	4b20      	ldr	r3, [pc, #128]	; (8001be0 <Get_Water_Percent_depth+0xe4>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	701a      	strb	r2, [r3, #0]
 8001b62:	e026      	b.n	8001bb2 <Get_Water_Percent_depth+0xb6>
	} else if( distance_mm <= Tank_Level_Hi ) {
 8001b64:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <Get_Water_Percent_depth+0xdc>)
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	4b1e      	ldr	r3, [pc, #120]	; (8001be4 <Get_Water_Percent_depth+0xe8>)
 8001b6c:	881b      	ldrh	r3, [r3, #0]
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d805      	bhi.n	8001b80 <Get_Water_Percent_depth+0x84>
		calculated_depth = 99;
 8001b74:	2363      	movs	r3, #99	; 0x63
 8001b76:	71fb      	strb	r3, [r7, #7]
		Tank_Level_Hi_Alarm = 1;
 8001b78:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <Get_Water_Percent_depth+0xec>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	701a      	strb	r2, [r3, #0]
 8001b7e:	e018      	b.n	8001bb2 <Get_Water_Percent_depth+0xb6>
	} else {
		calculated_depth = (uint8_t) (100 - ((distance_mm - Tank_Level_Hi) * 100 / (Tank_Level_Lo - Tank_Level_Hi)));
 8001b80:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <Get_Water_Percent_depth+0xdc>)
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	461a      	mov	r2, r3
 8001b88:	4b16      	ldr	r3, [pc, #88]	; (8001be4 <Get_Water_Percent_depth+0xe8>)
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2264      	movs	r2, #100	; 0x64
 8001b92:	fb03 f202 	mul.w	r2, r3, r2
 8001b96:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <Get_Water_Percent_depth+0xe0>)
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <Get_Water_Percent_depth+0xe8>)
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	1acb      	subs	r3, r1, r3
 8001ba6:	fb92 f3f3 	sdiv	r3, r2, r3
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8001bb0:	71fb      	strb	r3, [r7, #7]
	}

  Current_Water_Percent_depth = calculated_depth;
 8001bb2:	4a0e      	ldr	r2, [pc, #56]	; (8001bec <Get_Water_Percent_depth+0xf0>)
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	7013      	strb	r3, [r2, #0]
  HAL_Delay(50);
 8001bb8:	2032      	movs	r0, #50	; 0x32
 8001bba:	f000 fc01 	bl	80023c0 <HAL_Delay>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	200000cc 	.word	0x200000cc
 8001bcc:	200001f4 	.word	0x200001f4
 8001bd0:	08006b37 	.word	0x08006b37
 8001bd4:	200000c9 	.word	0x200000c9
 8001bd8:	200000ca 	.word	0x200000ca
 8001bdc:	20000010 	.word	0x20000010
 8001be0:	200000cf 	.word	0x200000cf
 8001be4:	20000012 	.word	0x20000012
 8001be8:	200000d0 	.word	0x200000d0
 8001bec:	200000ce 	.word	0x200000ce

08001bf0 <Set_LED_Color>:

void Set_LED_Color(LED_Color color)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
	switch (color) {
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	2b03      	cmp	r3, #3
 8001c00:	d856      	bhi.n	8001cb0 <Set_LED_Color+0xc0>
 8001c02:	a201      	add	r2, pc, #4	; (adr r2, 8001c08 <Set_LED_Color+0x18>)
 8001c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c08:	08001c19 	.word	0x08001c19
 8001c0c:	08001c3f 	.word	0x08001c3f
 8001c10:	08001c65 	.word	0x08001c65
 8001c14:	08001c8b 	.word	0x08001c8b
		case LED_RED:
			HAL_GPIO_WritePin(GPIOA, RED_Pin, GPIO_PIN_SET);
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c1e:	4830      	ldr	r0, [pc, #192]	; (8001ce0 <Set_LED_Color+0xf0>)
 8001c20:	f001 fafc 	bl	800321c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GRN_Pin, GPIO_PIN_RESET);
 8001c24:	2200      	movs	r2, #0
 8001c26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c2a:	482d      	ldr	r0, [pc, #180]	; (8001ce0 <Set_LED_Color+0xf0>)
 8001c2c:	f001 faf6 	bl	800321c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BLU_Pin, GPIO_PIN_RESET);
 8001c30:	2200      	movs	r2, #0
 8001c32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c36:	482a      	ldr	r0, [pc, #168]	; (8001ce0 <Set_LED_Color+0xf0>)
 8001c38:	f001 faf0 	bl	800321c <HAL_GPIO_WritePin>
			break;
 8001c3c:	e04b      	b.n	8001cd6 <Set_LED_Color+0xe6>

		case LED_GREEN:
			HAL_GPIO_WritePin(GPIOA, RED_Pin, GPIO_PIN_RESET);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c44:	4826      	ldr	r0, [pc, #152]	; (8001ce0 <Set_LED_Color+0xf0>)
 8001c46:	f001 fae9 	bl	800321c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GRN_Pin, GPIO_PIN_SET);
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c50:	4823      	ldr	r0, [pc, #140]	; (8001ce0 <Set_LED_Color+0xf0>)
 8001c52:	f001 fae3 	bl	800321c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BLU_Pin, GPIO_PIN_RESET);
 8001c56:	2200      	movs	r2, #0
 8001c58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c5c:	4820      	ldr	r0, [pc, #128]	; (8001ce0 <Set_LED_Color+0xf0>)
 8001c5e:	f001 fadd 	bl	800321c <HAL_GPIO_WritePin>
			break;
 8001c62:	e038      	b.n	8001cd6 <Set_LED_Color+0xe6>

		case LED_BLUE:
			HAL_GPIO_WritePin(GPIOA, RED_Pin, GPIO_PIN_RESET);
 8001c64:	2200      	movs	r2, #0
 8001c66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c6a:	481d      	ldr	r0, [pc, #116]	; (8001ce0 <Set_LED_Color+0xf0>)
 8001c6c:	f001 fad6 	bl	800321c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GRN_Pin, GPIO_PIN_RESET);
 8001c70:	2200      	movs	r2, #0
 8001c72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c76:	481a      	ldr	r0, [pc, #104]	; (8001ce0 <Set_LED_Color+0xf0>)
 8001c78:	f001 fad0 	bl	800321c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BLU_Pin, GPIO_PIN_SET);
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c82:	4817      	ldr	r0, [pc, #92]	; (8001ce0 <Set_LED_Color+0xf0>)
 8001c84:	f001 faca 	bl	800321c <HAL_GPIO_WritePin>
			break;
 8001c88:	e025      	b.n	8001cd6 <Set_LED_Color+0xe6>

		case LED_PURPLE:
			HAL_GPIO_WritePin(GPIOA, RED_Pin, GPIO_PIN_SET);
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c90:	4813      	ldr	r0, [pc, #76]	; (8001ce0 <Set_LED_Color+0xf0>)
 8001c92:	f001 fac3 	bl	800321c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GRN_Pin, GPIO_PIN_RESET);
 8001c96:	2200      	movs	r2, #0
 8001c98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c9c:	4810      	ldr	r0, [pc, #64]	; (8001ce0 <Set_LED_Color+0xf0>)
 8001c9e:	f001 fabd 	bl	800321c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BLU_Pin, GPIO_PIN_SET);
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ca8:	480d      	ldr	r0, [pc, #52]	; (8001ce0 <Set_LED_Color+0xf0>)
 8001caa:	f001 fab7 	bl	800321c <HAL_GPIO_WritePin>
			break;
 8001cae:	e012      	b.n	8001cd6 <Set_LED_Color+0xe6>

		case LED_OFF:
		default:
			HAL_GPIO_WritePin(GPIOA, RED_Pin, GPIO_PIN_RESET);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cb6:	480a      	ldr	r0, [pc, #40]	; (8001ce0 <Set_LED_Color+0xf0>)
 8001cb8:	f001 fab0 	bl	800321c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GRN_Pin, GPIO_PIN_RESET);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cc2:	4807      	ldr	r0, [pc, #28]	; (8001ce0 <Set_LED_Color+0xf0>)
 8001cc4:	f001 faaa 	bl	800321c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BLU_Pin, GPIO_PIN_RESET);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cce:	4804      	ldr	r0, [pc, #16]	; (8001ce0 <Set_LED_Color+0xf0>)
 8001cd0:	f001 faa4 	bl	800321c <HAL_GPIO_WritePin>
			break;
 8001cd4:	bf00      	nop
	}
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40020000 	.word	0x40020000

08001ce4 <System_Interlock>:

void System_Interlock()
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
	System_Interlock_Flag = 1;
 8001ce8:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <System_Interlock+0x50>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2120      	movs	r1, #32
 8001cf2:	4811      	ldr	r0, [pc, #68]	; (8001d38 <System_Interlock+0x54>)
 8001cf4:	f001 fa92 	bl	800321c <HAL_GPIO_WritePin>
	UART_Send_MSG("\r\n\n RESERVOIR IS EMPTY");
 8001cf8:	4810      	ldr	r0, [pc, #64]	; (8001d3c <System_Interlock+0x58>)
 8001cfa:	f7ff fd01 	bl	8001700 <UART_Send_MSG>

	while (1) {
		// Turn off DC Motor
		Control_DC_Motor_PWM(0, 0);
 8001cfe:	2100      	movs	r1, #0
 8001d00:	2000      	movs	r0, #0
 8001d02:	f7ff fdb9 	bl	8001878 <Control_DC_Motor_PWM>
		Set_LED_Color(LED_RED);
 8001d06:	2001      	movs	r0, #1
 8001d08:	f7ff ff72 	bl	8001bf0 <Set_LED_Color>
		HAL_Delay(500);
 8001d0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d10:	f000 fb56 	bl	80023c0 <HAL_Delay>
		Set_LED_Color(LED_GREEN);
 8001d14:	2002      	movs	r0, #2
 8001d16:	f7ff ff6b 	bl	8001bf0 <Set_LED_Color>
		HAL_Delay(500);
 8001d1a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d1e:	f000 fb4f 	bl	80023c0 <HAL_Delay>
		Set_LED_Color(LED_BLUE);
 8001d22:	2003      	movs	r0, #3
 8001d24:	f7ff ff64 	bl	8001bf0 <Set_LED_Color>
		HAL_Delay(500);
 8001d28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d2c:	f000 fb48 	bl	80023c0 <HAL_Delay>
		Control_DC_Motor_PWM(0, 0);
 8001d30:	e7e5      	b.n	8001cfe <System_Interlock+0x1a>
 8001d32:	bf00      	nop
 8001d34:	200000a4 	.word	0x200000a4
 8001d38:	40020000 	.word	0x40020000
 8001d3c:	08006b20 	.word	0x08006b20

08001d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d44:	b672      	cpsid	i
}
 8001d46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d48:	e7fe      	b.n	8001d48 <Error_Handler+0x8>
	...

08001d4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	607b      	str	r3, [r7, #4]
 8001d56:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5a:	4a0f      	ldr	r2, [pc, #60]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d60:	6453      	str	r3, [r2, #68]	; 0x44
 8001d62:	4b0d      	ldr	r3, [pc, #52]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d6a:	607b      	str	r3, [r7, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	603b      	str	r3, [r7, #0]
 8001d72:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	4a08      	ldr	r2, [pc, #32]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7e:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d8a:	2007      	movs	r0, #7
 8001d8c:	f000 ffee 	bl	8002d6c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d90:	bf00      	nop
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40023800 	.word	0x40023800

08001d9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08a      	sub	sp, #40	; 0x28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a17      	ldr	r2, [pc, #92]	; (8001e18 <HAL_ADC_MspInit+0x7c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d127      	bne.n	8001e0e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	4b16      	ldr	r3, [pc, #88]	; (8001e1c <HAL_ADC_MspInit+0x80>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc6:	4a15      	ldr	r2, [pc, #84]	; (8001e1c <HAL_ADC_MspInit+0x80>)
 8001dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dce:	4b13      	ldr	r3, [pc, #76]	; (8001e1c <HAL_ADC_MspInit+0x80>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <HAL_ADC_MspInit+0x80>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	4a0e      	ldr	r2, [pc, #56]	; (8001e1c <HAL_ADC_MspInit+0x80>)
 8001de4:	f043 0302 	orr.w	r3, r3, #2
 8001de8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dea:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <HAL_ADC_MspInit+0x80>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001df6:	2302      	movs	r3, #2
 8001df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e02:	f107 0314 	add.w	r3, r7, #20
 8001e06:	4619      	mov	r1, r3
 8001e08:	4805      	ldr	r0, [pc, #20]	; (8001e20 <HAL_ADC_MspInit+0x84>)
 8001e0a:	f001 f883 	bl	8002f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e0e:	bf00      	nop
 8001e10:	3728      	adds	r7, #40	; 0x28
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40012000 	.word	0x40012000
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40020400 	.word	0x40020400

08001e24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e34:	d10e      	bne.n	8001e54 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
 8001e3a:	4b20      	ldr	r3, [pc, #128]	; (8001ebc <HAL_TIM_Base_MspInit+0x98>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	4a1f      	ldr	r2, [pc, #124]	; (8001ebc <HAL_TIM_Base_MspInit+0x98>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	6413      	str	r3, [r2, #64]	; 0x40
 8001e46:	4b1d      	ldr	r3, [pc, #116]	; (8001ebc <HAL_TIM_Base_MspInit+0x98>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	617b      	str	r3, [r7, #20]
 8001e50:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001e52:	e02e      	b.n	8001eb2 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a19      	ldr	r2, [pc, #100]	; (8001ec0 <HAL_TIM_Base_MspInit+0x9c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d10e      	bne.n	8001e7c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	613b      	str	r3, [r7, #16]
 8001e62:	4b16      	ldr	r3, [pc, #88]	; (8001ebc <HAL_TIM_Base_MspInit+0x98>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	4a15      	ldr	r2, [pc, #84]	; (8001ebc <HAL_TIM_Base_MspInit+0x98>)
 8001e68:	f043 0302 	orr.w	r3, r3, #2
 8001e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e6e:	4b13      	ldr	r3, [pc, #76]	; (8001ebc <HAL_TIM_Base_MspInit+0x98>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	693b      	ldr	r3, [r7, #16]
}
 8001e7a:	e01a      	b.n	8001eb2 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM5)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a10      	ldr	r2, [pc, #64]	; (8001ec4 <HAL_TIM_Base_MspInit+0xa0>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d115      	bne.n	8001eb2 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <HAL_TIM_Base_MspInit+0x98>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	4a0b      	ldr	r2, [pc, #44]	; (8001ebc <HAL_TIM_Base_MspInit+0x98>)
 8001e90:	f043 0308 	orr.w	r3, r3, #8
 8001e94:	6413      	str	r3, [r2, #64]	; 0x40
 8001e96:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <HAL_TIM_Base_MspInit+0x98>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	f003 0308 	and.w	r3, r3, #8
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	2032      	movs	r0, #50	; 0x32
 8001ea8:	f000 ff6b 	bl	8002d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001eac:	2032      	movs	r0, #50	; 0x32
 8001eae:	f000 ff84 	bl	8002dba <HAL_NVIC_EnableIRQ>
}
 8001eb2:	bf00      	nop
 8001eb4:	3718      	adds	r7, #24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40000400 	.word	0x40000400
 8001ec4:	40000c00 	.word	0x40000c00

08001ec8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08a      	sub	sp, #40	; 0x28
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed0:	f107 0314 	add.w	r3, r7, #20
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee8:	d11e      	bne.n	8001f28 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	613b      	str	r3, [r7, #16]
 8001eee:	4b31      	ldr	r3, [pc, #196]	; (8001fb4 <HAL_TIM_MspPostInit+0xec>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	4a30      	ldr	r2, [pc, #192]	; (8001fb4 <HAL_TIM_MspPostInit+0xec>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8001efa:	4b2e      	ldr	r3, [pc, #184]	; (8001fb4 <HAL_TIM_MspPostInit+0xec>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	613b      	str	r3, [r7, #16]
 8001f04:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f06:	2301      	movs	r3, #1
 8001f08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f12:	2300      	movs	r3, #0
 8001f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f16:	2301      	movs	r3, #1
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1a:	f107 0314 	add.w	r3, r7, #20
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4825      	ldr	r0, [pc, #148]	; (8001fb8 <HAL_TIM_MspPostInit+0xf0>)
 8001f22:	f000 fff7 	bl	8002f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f26:	e040      	b.n	8001faa <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM3)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a23      	ldr	r2, [pc, #140]	; (8001fbc <HAL_TIM_MspPostInit+0xf4>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d13b      	bne.n	8001faa <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	4b1f      	ldr	r3, [pc, #124]	; (8001fb4 <HAL_TIM_MspPostInit+0xec>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	4a1e      	ldr	r2, [pc, #120]	; (8001fb4 <HAL_TIM_MspPostInit+0xec>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	6313      	str	r3, [r2, #48]	; 0x30
 8001f42:	4b1c      	ldr	r3, [pc, #112]	; (8001fb4 <HAL_TIM_MspPostInit+0xec>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <HAL_TIM_MspPostInit+0xec>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	4a17      	ldr	r2, [pc, #92]	; (8001fb4 <HAL_TIM_MspPostInit+0xec>)
 8001f58:	f043 0302 	orr.w	r3, r3, #2
 8001f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5e:	4b15      	ldr	r3, [pc, #84]	; (8001fb4 <HAL_TIM_MspPostInit+0xec>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f6a:	2340      	movs	r3, #64	; 0x40
 8001f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f76:	2300      	movs	r3, #0
 8001f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f7e:	f107 0314 	add.w	r3, r7, #20
 8001f82:	4619      	mov	r1, r3
 8001f84:	480c      	ldr	r0, [pc, #48]	; (8001fb8 <HAL_TIM_MspPostInit+0xf0>)
 8001f86:	f000 ffc5 	bl	8002f14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f96:	2300      	movs	r3, #0
 8001f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f9e:	f107 0314 	add.w	r3, r7, #20
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4806      	ldr	r0, [pc, #24]	; (8001fc0 <HAL_TIM_MspPostInit+0xf8>)
 8001fa6:	f000 ffb5 	bl	8002f14 <HAL_GPIO_Init>
}
 8001faa:	bf00      	nop
 8001fac:	3728      	adds	r7, #40	; 0x28
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40020000 	.word	0x40020000
 8001fbc:	40000400 	.word	0x40000400
 8001fc0:	40020400 	.word	0x40020400

08001fc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08e      	sub	sp, #56	; 0x38
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a53      	ldr	r2, [pc, #332]	; (8002130 <HAL_UART_MspInit+0x16c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d135      	bne.n	8002052 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	623b      	str	r3, [r7, #32]
 8001fea:	4b52      	ldr	r3, [pc, #328]	; (8002134 <HAL_UART_MspInit+0x170>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	4a51      	ldr	r2, [pc, #324]	; (8002134 <HAL_UART_MspInit+0x170>)
 8001ff0:	f043 0310 	orr.w	r3, r3, #16
 8001ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ff6:	4b4f      	ldr	r3, [pc, #316]	; (8002134 <HAL_UART_MspInit+0x170>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffa:	f003 0310 	and.w	r3, r3, #16
 8001ffe:	623b      	str	r3, [r7, #32]
 8002000:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
 8002006:	4b4b      	ldr	r3, [pc, #300]	; (8002134 <HAL_UART_MspInit+0x170>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	4a4a      	ldr	r2, [pc, #296]	; (8002134 <HAL_UART_MspInit+0x170>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	6313      	str	r3, [r2, #48]	; 0x30
 8002012:	4b48      	ldr	r3, [pc, #288]	; (8002134 <HAL_UART_MspInit+0x170>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	61fb      	str	r3, [r7, #28]
 800201c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800201e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002022:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002024:	2302      	movs	r3, #2
 8002026:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202c:	2303      	movs	r3, #3
 800202e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002030:	2307      	movs	r3, #7
 8002032:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002038:	4619      	mov	r1, r3
 800203a:	483f      	ldr	r0, [pc, #252]	; (8002138 <HAL_UART_MspInit+0x174>)
 800203c:	f000 ff6a 	bl	8002f14 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002040:	2200      	movs	r2, #0
 8002042:	2100      	movs	r1, #0
 8002044:	2025      	movs	r0, #37	; 0x25
 8002046:	f000 fe9c 	bl	8002d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800204a:	2025      	movs	r0, #37	; 0x25
 800204c:	f000 feb5 	bl	8002dba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002050:	e06a      	b.n	8002128 <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART2)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a39      	ldr	r2, [pc, #228]	; (800213c <HAL_UART_MspInit+0x178>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d12c      	bne.n	80020b6 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 800205c:	2300      	movs	r3, #0
 800205e:	61bb      	str	r3, [r7, #24]
 8002060:	4b34      	ldr	r3, [pc, #208]	; (8002134 <HAL_UART_MspInit+0x170>)
 8002062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002064:	4a33      	ldr	r2, [pc, #204]	; (8002134 <HAL_UART_MspInit+0x170>)
 8002066:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800206a:	6413      	str	r3, [r2, #64]	; 0x40
 800206c:	4b31      	ldr	r3, [pc, #196]	; (8002134 <HAL_UART_MspInit+0x170>)
 800206e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002074:	61bb      	str	r3, [r7, #24]
 8002076:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]
 800207c:	4b2d      	ldr	r3, [pc, #180]	; (8002134 <HAL_UART_MspInit+0x170>)
 800207e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002080:	4a2c      	ldr	r2, [pc, #176]	; (8002134 <HAL_UART_MspInit+0x170>)
 8002082:	f043 0301 	orr.w	r3, r3, #1
 8002086:	6313      	str	r3, [r2, #48]	; 0x30
 8002088:	4b2a      	ldr	r3, [pc, #168]	; (8002134 <HAL_UART_MspInit+0x170>)
 800208a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002094:	230c      	movs	r3, #12
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002098:	2302      	movs	r3, #2
 800209a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209c:	2300      	movs	r3, #0
 800209e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a0:	2300      	movs	r3, #0
 80020a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020a4:	2307      	movs	r3, #7
 80020a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ac:	4619      	mov	r1, r3
 80020ae:	4822      	ldr	r0, [pc, #136]	; (8002138 <HAL_UART_MspInit+0x174>)
 80020b0:	f000 ff30 	bl	8002f14 <HAL_GPIO_Init>
}
 80020b4:	e038      	b.n	8002128 <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART6)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a21      	ldr	r2, [pc, #132]	; (8002140 <HAL_UART_MspInit+0x17c>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d133      	bne.n	8002128 <HAL_UART_MspInit+0x164>
    __HAL_RCC_USART6_CLK_ENABLE();
 80020c0:	2300      	movs	r3, #0
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	4b1b      	ldr	r3, [pc, #108]	; (8002134 <HAL_UART_MspInit+0x170>)
 80020c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c8:	4a1a      	ldr	r2, [pc, #104]	; (8002134 <HAL_UART_MspInit+0x170>)
 80020ca:	f043 0320 	orr.w	r3, r3, #32
 80020ce:	6453      	str	r3, [r2, #68]	; 0x44
 80020d0:	4b18      	ldr	r3, [pc, #96]	; (8002134 <HAL_UART_MspInit+0x170>)
 80020d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d4:	f003 0320 	and.w	r3, r3, #32
 80020d8:	613b      	str	r3, [r7, #16]
 80020da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020dc:	2300      	movs	r3, #0
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	4b14      	ldr	r3, [pc, #80]	; (8002134 <HAL_UART_MspInit+0x170>)
 80020e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e4:	4a13      	ldr	r2, [pc, #76]	; (8002134 <HAL_UART_MspInit+0x170>)
 80020e6:	f043 0304 	orr.w	r3, r3, #4
 80020ea:	6313      	str	r3, [r2, #48]	; 0x30
 80020ec:	4b11      	ldr	r3, [pc, #68]	; (8002134 <HAL_UART_MspInit+0x170>)
 80020ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020f8:	23c0      	movs	r3, #192	; 0xc0
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fc:	2302      	movs	r3, #2
 80020fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002104:	2303      	movs	r3, #3
 8002106:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002108:	2308      	movs	r3, #8
 800210a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800210c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002110:	4619      	mov	r1, r3
 8002112:	480c      	ldr	r0, [pc, #48]	; (8002144 <HAL_UART_MspInit+0x180>)
 8002114:	f000 fefe 	bl	8002f14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002118:	2200      	movs	r2, #0
 800211a:	2100      	movs	r1, #0
 800211c:	2047      	movs	r0, #71	; 0x47
 800211e:	f000 fe30 	bl	8002d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002122:	2047      	movs	r0, #71	; 0x47
 8002124:	f000 fe49 	bl	8002dba <HAL_NVIC_EnableIRQ>
}
 8002128:	bf00      	nop
 800212a:	3738      	adds	r7, #56	; 0x38
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40011000 	.word	0x40011000
 8002134:	40023800 	.word	0x40023800
 8002138:	40020000 	.word	0x40020000
 800213c:	40004400 	.word	0x40004400
 8002140:	40011400 	.word	0x40011400
 8002144:	40020800 	.word	0x40020800

08002148 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800214c:	e7fe      	b.n	800214c <NMI_Handler+0x4>

0800214e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800214e:	b480      	push	{r7}
 8002150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002152:	e7fe      	b.n	8002152 <HardFault_Handler+0x4>

08002154 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002158:	e7fe      	b.n	8002158 <MemManage_Handler+0x4>

0800215a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800215a:	b480      	push	{r7}
 800215c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800215e:	e7fe      	b.n	800215e <BusFault_Handler+0x4>

08002160 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002164:	e7fe      	b.n	8002164 <UsageFault_Handler+0x4>

08002166 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002166:	b480      	push	{r7}
 8002168:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002194:	f000 f8f4 	bl	8002380 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002198:	bf00      	nop
 800219a:	bd80      	pop	{r7, pc}

0800219c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RPM_TICK_Pin);
 80021a0:	2004      	movs	r0, #4
 80021a2:	f001 f86f 	bl	8003284 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021b0:	4802      	ldr	r0, [pc, #8]	; (80021bc <USART1_IRQHandler+0x10>)
 80021b2:	f002 fe45 	bl	8004e40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	200001f4 	.word	0x200001f4

080021c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLU_PB_Pin);
 80021c4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80021c8:	f001 f85c 	bl	8003284 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021cc:	bf00      	nop
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80021d4:	4802      	ldr	r0, [pc, #8]	; (80021e0 <TIM5_IRQHandler+0x10>)
 80021d6:	f001 ff1b 	bl	8004010 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	200001ac 	.word	0x200001ac

080021e4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80021e8:	4802      	ldr	r0, [pc, #8]	; (80021f4 <USART6_IRQHandler+0x10>)
 80021ea:	f002 fe29 	bl	8004e40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	2000027c 	.word	0x2000027c

080021f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002200:	4a14      	ldr	r2, [pc, #80]	; (8002254 <_sbrk+0x5c>)
 8002202:	4b15      	ldr	r3, [pc, #84]	; (8002258 <_sbrk+0x60>)
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800220c:	4b13      	ldr	r3, [pc, #76]	; (800225c <_sbrk+0x64>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d102      	bne.n	800221a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002214:	4b11      	ldr	r3, [pc, #68]	; (800225c <_sbrk+0x64>)
 8002216:	4a12      	ldr	r2, [pc, #72]	; (8002260 <_sbrk+0x68>)
 8002218:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800221a:	4b10      	ldr	r3, [pc, #64]	; (800225c <_sbrk+0x64>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4413      	add	r3, r2
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	429a      	cmp	r2, r3
 8002226:	d207      	bcs.n	8002238 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002228:	f003 fe2a 	bl	8005e80 <__errno>
 800222c:	4603      	mov	r3, r0
 800222e:	220c      	movs	r2, #12
 8002230:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002232:	f04f 33ff 	mov.w	r3, #4294967295
 8002236:	e009      	b.n	800224c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002238:	4b08      	ldr	r3, [pc, #32]	; (800225c <_sbrk+0x64>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800223e:	4b07      	ldr	r3, [pc, #28]	; (800225c <_sbrk+0x64>)
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4413      	add	r3, r2
 8002246:	4a05      	ldr	r2, [pc, #20]	; (800225c <_sbrk+0x64>)
 8002248:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800224a:	68fb      	ldr	r3, [r7, #12]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20018000 	.word	0x20018000
 8002258:	00000400 	.word	0x00000400
 800225c:	200002c0 	.word	0x200002c0
 8002260:	20000410 	.word	0x20000410

08002264 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002268:	4b06      	ldr	r3, [pc, #24]	; (8002284 <SystemInit+0x20>)
 800226a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226e:	4a05      	ldr	r2, [pc, #20]	; (8002284 <SystemInit+0x20>)
 8002270:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002274:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002288:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800228c:	480d      	ldr	r0, [pc, #52]	; (80022c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800228e:	490e      	ldr	r1, [pc, #56]	; (80022c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002290:	4a0e      	ldr	r2, [pc, #56]	; (80022cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002294:	e002      	b.n	800229c <LoopCopyDataInit>

08002296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800229a:	3304      	adds	r3, #4

0800229c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800229c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800229e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022a0:	d3f9      	bcc.n	8002296 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022a2:	4a0b      	ldr	r2, [pc, #44]	; (80022d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022a4:	4c0b      	ldr	r4, [pc, #44]	; (80022d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022a8:	e001      	b.n	80022ae <LoopFillZerobss>

080022aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022ac:	3204      	adds	r2, #4

080022ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022b0:	d3fb      	bcc.n	80022aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022b2:	f7ff ffd7 	bl	8002264 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022b6:	f003 fde9 	bl	8005e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022ba:	f7fe f967 	bl	800058c <main>
  bx  lr    
 80022be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80022c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80022c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022c8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80022cc:	08006c94 	.word	0x08006c94
  ldr r2, =_sbss
 80022d0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80022d4:	20000410 	.word	0x20000410

080022d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022d8:	e7fe      	b.n	80022d8 <ADC_IRQHandler>
	...

080022dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022e0:	4b0e      	ldr	r3, [pc, #56]	; (800231c <HAL_Init+0x40>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a0d      	ldr	r2, [pc, #52]	; (800231c <HAL_Init+0x40>)
 80022e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022ec:	4b0b      	ldr	r3, [pc, #44]	; (800231c <HAL_Init+0x40>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a0a      	ldr	r2, [pc, #40]	; (800231c <HAL_Init+0x40>)
 80022f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022f8:	4b08      	ldr	r3, [pc, #32]	; (800231c <HAL_Init+0x40>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a07      	ldr	r2, [pc, #28]	; (800231c <HAL_Init+0x40>)
 80022fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002302:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002304:	2003      	movs	r0, #3
 8002306:	f000 fd31 	bl	8002d6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800230a:	2000      	movs	r0, #0
 800230c:	f000 f808 	bl	8002320 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002310:	f7ff fd1c 	bl	8001d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40023c00 	.word	0x40023c00

08002320 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002328:	4b12      	ldr	r3, [pc, #72]	; (8002374 <HAL_InitTick+0x54>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	4b12      	ldr	r3, [pc, #72]	; (8002378 <HAL_InitTick+0x58>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	4619      	mov	r1, r3
 8002332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002336:	fbb3 f3f1 	udiv	r3, r3, r1
 800233a:	fbb2 f3f3 	udiv	r3, r2, r3
 800233e:	4618      	mov	r0, r3
 8002340:	f000 fd49 	bl	8002dd6 <HAL_SYSTICK_Config>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e00e      	b.n	800236c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b0f      	cmp	r3, #15
 8002352:	d80a      	bhi.n	800236a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002354:	2200      	movs	r2, #0
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	f04f 30ff 	mov.w	r0, #4294967295
 800235c:	f000 fd11 	bl	8002d82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002360:	4a06      	ldr	r2, [pc, #24]	; (800237c <HAL_InitTick+0x5c>)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002366:	2300      	movs	r3, #0
 8002368:	e000      	b.n	800236c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
}
 800236c:	4618      	mov	r0, r3
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	20000018 	.word	0x20000018
 8002378:	20000020 	.word	0x20000020
 800237c:	2000001c 	.word	0x2000001c

08002380 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002384:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <HAL_IncTick+0x20>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	461a      	mov	r2, r3
 800238a:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <HAL_IncTick+0x24>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4413      	add	r3, r2
 8002390:	4a04      	ldr	r2, [pc, #16]	; (80023a4 <HAL_IncTick+0x24>)
 8002392:	6013      	str	r3, [r2, #0]
}
 8002394:	bf00      	nop
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20000020 	.word	0x20000020
 80023a4:	200002c4 	.word	0x200002c4

080023a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  return uwTick;
 80023ac:	4b03      	ldr	r3, [pc, #12]	; (80023bc <HAL_GetTick+0x14>)
 80023ae:	681b      	ldr	r3, [r3, #0]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	200002c4 	.word	0x200002c4

080023c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023c8:	f7ff ffee 	bl	80023a8 <HAL_GetTick>
 80023cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d8:	d005      	beq.n	80023e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023da:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <HAL_Delay+0x44>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	461a      	mov	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4413      	add	r3, r2
 80023e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023e6:	bf00      	nop
 80023e8:	f7ff ffde 	bl	80023a8 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d8f7      	bhi.n	80023e8 <HAL_Delay+0x28>
  {
  }
}
 80023f8:	bf00      	nop
 80023fa:	bf00      	nop
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20000020 	.word	0x20000020

08002408 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002410:	2300      	movs	r3, #0
 8002412:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e033      	b.n	8002486 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	2b00      	cmp	r3, #0
 8002424:	d109      	bne.n	800243a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7ff fcb8 	bl	8001d9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	f003 0310 	and.w	r3, r3, #16
 8002442:	2b00      	cmp	r3, #0
 8002444:	d118      	bne.n	8002478 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800244e:	f023 0302 	bic.w	r3, r3, #2
 8002452:	f043 0202 	orr.w	r2, r3, #2
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 faba 	bl	80029d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	f023 0303 	bic.w	r3, r3, #3
 800246e:	f043 0201 	orr.w	r2, r3, #1
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	641a      	str	r2, [r3, #64]	; 0x40
 8002476:	e001      	b.n	800247c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002484:	7bfb      	ldrb	r3, [r7, #15]
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002498:	2300      	movs	r3, #0
 800249a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d101      	bne.n	80024aa <HAL_ADC_Start+0x1a>
 80024a6:	2302      	movs	r3, #2
 80024a8:	e097      	b.n	80025da <HAL_ADC_Start+0x14a>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d018      	beq.n	80024f2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0201 	orr.w	r2, r2, #1
 80024ce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024d0:	4b45      	ldr	r3, [pc, #276]	; (80025e8 <HAL_ADC_Start+0x158>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a45      	ldr	r2, [pc, #276]	; (80025ec <HAL_ADC_Start+0x15c>)
 80024d6:	fba2 2303 	umull	r2, r3, r2, r3
 80024da:	0c9a      	lsrs	r2, r3, #18
 80024dc:	4613      	mov	r3, r2
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	4413      	add	r3, r2
 80024e2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80024e4:	e002      	b.n	80024ec <HAL_ADC_Start+0x5c>
    {
      counter--;
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	3b01      	subs	r3, #1
 80024ea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f9      	bne.n	80024e6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d15f      	bne.n	80025c0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002504:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002508:	f023 0301 	bic.w	r3, r3, #1
 800250c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800251e:	2b00      	cmp	r3, #0
 8002520:	d007      	beq.n	8002532 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800252a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800253a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800253e:	d106      	bne.n	800254e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002544:	f023 0206 	bic.w	r2, r3, #6
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	645a      	str	r2, [r3, #68]	; 0x44
 800254c:	e002      	b.n	8002554 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800255c:	4b24      	ldr	r3, [pc, #144]	; (80025f0 <HAL_ADC_Start+0x160>)
 800255e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002568:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f003 031f 	and.w	r3, r3, #31
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10f      	bne.n	8002596 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d129      	bne.n	80025d8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002592:	609a      	str	r2, [r3, #8]
 8002594:	e020      	b.n	80025d8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a16      	ldr	r2, [pc, #88]	; (80025f4 <HAL_ADC_Start+0x164>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d11b      	bne.n	80025d8 <HAL_ADC_Start+0x148>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d114      	bne.n	80025d8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80025bc:	609a      	str	r2, [r3, #8]
 80025be:	e00b      	b.n	80025d8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c4:	f043 0210 	orr.w	r2, r3, #16
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d0:	f043 0201 	orr.w	r2, r3, #1
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	20000018 	.word	0x20000018
 80025ec:	431bde83 	.word	0x431bde83
 80025f0:	40012300 	.word	0x40012300
 80025f4:	40012000 	.word	0x40012000

080025f8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <HAL_ADC_Stop+0x16>
 800260a:	2302      	movs	r3, #2
 800260c:	e021      	b.n	8002652 <HAL_ADC_Stop+0x5a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0201 	bic.w	r2, r2, #1
 8002624:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b00      	cmp	r3, #0
 8002632:	d109      	bne.n	8002648 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800263c:	f023 0301 	bic.w	r3, r3, #1
 8002640:	f043 0201 	orr.w	r2, r3, #1
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b084      	sub	sp, #16
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
 8002666:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002668:	2300      	movs	r3, #0
 800266a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800267a:	d113      	bne.n	80026a4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800268a:	d10b      	bne.n	80026a4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	f043 0220 	orr.w	r2, r3, #32
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e063      	b.n	800276c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80026a4:	f7ff fe80 	bl	80023a8 <HAL_GetTick>
 80026a8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026aa:	e021      	b.n	80026f0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b2:	d01d      	beq.n	80026f0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d007      	beq.n	80026ca <HAL_ADC_PollForConversion+0x6c>
 80026ba:	f7ff fe75 	bl	80023a8 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d212      	bcs.n	80026f0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d00b      	beq.n	80026f0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026dc:	f043 0204 	orr.w	r2, r3, #4
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e03d      	b.n	800276c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d1d6      	bne.n	80026ac <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f06f 0212 	mvn.w	r2, #18
 8002706:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d123      	bne.n	800276a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002726:	2b00      	cmp	r3, #0
 8002728:	d11f      	bne.n	800276a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002730:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002734:	2b00      	cmp	r3, #0
 8002736:	d006      	beq.n	8002746 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002742:	2b00      	cmp	r3, #0
 8002744:	d111      	bne.n	800276a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d105      	bne.n	800276a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f043 0201 	orr.w	r2, r3, #1
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002782:	4618      	mov	r0, r3
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
	...

08002790 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800279a:	2300      	movs	r3, #0
 800279c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d101      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x1c>
 80027a8:	2302      	movs	r3, #2
 80027aa:	e105      	b.n	80029b8 <HAL_ADC_ConfigChannel+0x228>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b09      	cmp	r3, #9
 80027ba:	d925      	bls.n	8002808 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68d9      	ldr	r1, [r3, #12]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	461a      	mov	r2, r3
 80027ca:	4613      	mov	r3, r2
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	4413      	add	r3, r2
 80027d0:	3b1e      	subs	r3, #30
 80027d2:	2207      	movs	r2, #7
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43da      	mvns	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	400a      	ands	r2, r1
 80027e0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68d9      	ldr	r1, [r3, #12]
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	4618      	mov	r0, r3
 80027f4:	4603      	mov	r3, r0
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	4403      	add	r3, r0
 80027fa:	3b1e      	subs	r3, #30
 80027fc:	409a      	lsls	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	60da      	str	r2, [r3, #12]
 8002806:	e022      	b.n	800284e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6919      	ldr	r1, [r3, #16]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	b29b      	uxth	r3, r3
 8002814:	461a      	mov	r2, r3
 8002816:	4613      	mov	r3, r2
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	4413      	add	r3, r2
 800281c:	2207      	movs	r2, #7
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43da      	mvns	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	400a      	ands	r2, r1
 800282a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6919      	ldr	r1, [r3, #16]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	689a      	ldr	r2, [r3, #8]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	b29b      	uxth	r3, r3
 800283c:	4618      	mov	r0, r3
 800283e:	4603      	mov	r3, r0
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	4403      	add	r3, r0
 8002844:	409a      	lsls	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	430a      	orrs	r2, r1
 800284c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b06      	cmp	r3, #6
 8002854:	d824      	bhi.n	80028a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	4613      	mov	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	3b05      	subs	r3, #5
 8002868:	221f      	movs	r2, #31
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43da      	mvns	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	400a      	ands	r2, r1
 8002876:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	b29b      	uxth	r3, r3
 8002884:	4618      	mov	r0, r3
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	4613      	mov	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	3b05      	subs	r3, #5
 8002892:	fa00 f203 	lsl.w	r2, r0, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	635a      	str	r2, [r3, #52]	; 0x34
 800289e:	e04c      	b.n	800293a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b0c      	cmp	r3, #12
 80028a6:	d824      	bhi.n	80028f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	4613      	mov	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	3b23      	subs	r3, #35	; 0x23
 80028ba:	221f      	movs	r2, #31
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43da      	mvns	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	400a      	ands	r2, r1
 80028c8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	4618      	mov	r0, r3
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	3b23      	subs	r3, #35	; 0x23
 80028e4:	fa00 f203 	lsl.w	r2, r0, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	631a      	str	r2, [r3, #48]	; 0x30
 80028f0:	e023      	b.n	800293a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	4613      	mov	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	3b41      	subs	r3, #65	; 0x41
 8002904:	221f      	movs	r2, #31
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43da      	mvns	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	400a      	ands	r2, r1
 8002912:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	b29b      	uxth	r3, r3
 8002920:	4618      	mov	r0, r3
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	4613      	mov	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	3b41      	subs	r3, #65	; 0x41
 800292e:	fa00 f203 	lsl.w	r2, r0, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	430a      	orrs	r2, r1
 8002938:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800293a:	4b22      	ldr	r3, [pc, #136]	; (80029c4 <HAL_ADC_ConfigChannel+0x234>)
 800293c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a21      	ldr	r2, [pc, #132]	; (80029c8 <HAL_ADC_ConfigChannel+0x238>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d109      	bne.n	800295c <HAL_ADC_ConfigChannel+0x1cc>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2b12      	cmp	r3, #18
 800294e:	d105      	bne.n	800295c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a19      	ldr	r2, [pc, #100]	; (80029c8 <HAL_ADC_ConfigChannel+0x238>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d123      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x21e>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2b10      	cmp	r3, #16
 800296c:	d003      	beq.n	8002976 <HAL_ADC_ConfigChannel+0x1e6>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2b11      	cmp	r3, #17
 8002974:	d11b      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2b10      	cmp	r3, #16
 8002988:	d111      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800298a:	4b10      	ldr	r3, [pc, #64]	; (80029cc <HAL_ADC_ConfigChannel+0x23c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a10      	ldr	r2, [pc, #64]	; (80029d0 <HAL_ADC_ConfigChannel+0x240>)
 8002990:	fba2 2303 	umull	r2, r3, r2, r3
 8002994:	0c9a      	lsrs	r2, r3, #18
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029a0:	e002      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	3b01      	subs	r3, #1
 80029a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f9      	bne.n	80029a2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	40012300 	.word	0x40012300
 80029c8:	40012000 	.word	0x40012000
 80029cc:	20000018 	.word	0x20000018
 80029d0:	431bde83 	.word	0x431bde83

080029d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029dc:	4b79      	ldr	r3, [pc, #484]	; (8002bc4 <ADC_Init+0x1f0>)
 80029de:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	431a      	orrs	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6859      	ldr	r1, [r3, #4]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	021a      	lsls	r2, r3, #8
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6859      	ldr	r1, [r3, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689a      	ldr	r2, [r3, #8]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6899      	ldr	r1, [r3, #8]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a66:	4a58      	ldr	r2, [pc, #352]	; (8002bc8 <ADC_Init+0x1f4>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d022      	beq.n	8002ab2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6899      	ldr	r1, [r3, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6899      	ldr	r1, [r3, #8]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	e00f      	b.n	8002ad2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ac0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ad0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 0202 	bic.w	r2, r2, #2
 8002ae0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6899      	ldr	r1, [r3, #8]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	7e1b      	ldrb	r3, [r3, #24]
 8002aec:	005a      	lsls	r2, r3, #1
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d01b      	beq.n	8002b38 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b0e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b1e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6859      	ldr	r1, [r3, #4]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	035a      	lsls	r2, r3, #13
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	605a      	str	r2, [r3, #4]
 8002b36:	e007      	b.n	8002b48 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b46:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	3b01      	subs	r3, #1
 8002b64:	051a      	lsls	r2, r3, #20
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6899      	ldr	r1, [r3, #8]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b8a:	025a      	lsls	r2, r3, #9
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689a      	ldr	r2, [r3, #8]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ba2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6899      	ldr	r1, [r3, #8]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	029a      	lsls	r2, r3, #10
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	609a      	str	r2, [r3, #8]
}
 8002bb8:	bf00      	nop
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	40012300 	.word	0x40012300
 8002bc8:	0f000001 	.word	0x0f000001

08002bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bdc:	4b0c      	ldr	r3, [pc, #48]	; (8002c10 <__NVIC_SetPriorityGrouping+0x44>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002be8:	4013      	ands	r3, r2
 8002bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bfe:	4a04      	ldr	r2, [pc, #16]	; (8002c10 <__NVIC_SetPriorityGrouping+0x44>)
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	60d3      	str	r3, [r2, #12]
}
 8002c04:	bf00      	nop
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	e000ed00 	.word	0xe000ed00

08002c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c18:	4b04      	ldr	r3, [pc, #16]	; (8002c2c <__NVIC_GetPriorityGrouping+0x18>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	0a1b      	lsrs	r3, r3, #8
 8002c1e:	f003 0307 	and.w	r3, r3, #7
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	e000ed00 	.word	0xe000ed00

08002c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	4603      	mov	r3, r0
 8002c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	db0b      	blt.n	8002c5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	f003 021f 	and.w	r2, r3, #31
 8002c48:	4907      	ldr	r1, [pc, #28]	; (8002c68 <__NVIC_EnableIRQ+0x38>)
 8002c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4e:	095b      	lsrs	r3, r3, #5
 8002c50:	2001      	movs	r0, #1
 8002c52:	fa00 f202 	lsl.w	r2, r0, r2
 8002c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	e000e100 	.word	0xe000e100

08002c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	6039      	str	r1, [r7, #0]
 8002c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	db0a      	blt.n	8002c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	490c      	ldr	r1, [pc, #48]	; (8002cb8 <__NVIC_SetPriority+0x4c>)
 8002c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8a:	0112      	lsls	r2, r2, #4
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	440b      	add	r3, r1
 8002c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c94:	e00a      	b.n	8002cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	4908      	ldr	r1, [pc, #32]	; (8002cbc <__NVIC_SetPriority+0x50>)
 8002c9c:	79fb      	ldrb	r3, [r7, #7]
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	3b04      	subs	r3, #4
 8002ca4:	0112      	lsls	r2, r2, #4
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	440b      	add	r3, r1
 8002caa:	761a      	strb	r2, [r3, #24]
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr
 8002cb8:	e000e100 	.word	0xe000e100
 8002cbc:	e000ed00 	.word	0xe000ed00

08002cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b089      	sub	sp, #36	; 0x24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	f1c3 0307 	rsb	r3, r3, #7
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	bf28      	it	cs
 8002cde:	2304      	movcs	r3, #4
 8002ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	2b06      	cmp	r3, #6
 8002ce8:	d902      	bls.n	8002cf0 <NVIC_EncodePriority+0x30>
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	3b03      	subs	r3, #3
 8002cee:	e000      	b.n	8002cf2 <NVIC_EncodePriority+0x32>
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	43da      	mvns	r2, r3
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	401a      	ands	r2, r3
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d08:	f04f 31ff 	mov.w	r1, #4294967295
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d12:	43d9      	mvns	r1, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d18:	4313      	orrs	r3, r2
         );
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3724      	adds	r7, #36	; 0x24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
	...

08002d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d38:	d301      	bcc.n	8002d3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e00f      	b.n	8002d5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d3e:	4a0a      	ldr	r2, [pc, #40]	; (8002d68 <SysTick_Config+0x40>)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3b01      	subs	r3, #1
 8002d44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d46:	210f      	movs	r1, #15
 8002d48:	f04f 30ff 	mov.w	r0, #4294967295
 8002d4c:	f7ff ff8e 	bl	8002c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d50:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <SysTick_Config+0x40>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d56:	4b04      	ldr	r3, [pc, #16]	; (8002d68 <SysTick_Config+0x40>)
 8002d58:	2207      	movs	r2, #7
 8002d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	e000e010 	.word	0xe000e010

08002d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f7ff ff29 	bl	8002bcc <__NVIC_SetPriorityGrouping>
}
 8002d7a:	bf00      	nop
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b086      	sub	sp, #24
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	4603      	mov	r3, r0
 8002d8a:	60b9      	str	r1, [r7, #8]
 8002d8c:	607a      	str	r2, [r7, #4]
 8002d8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d94:	f7ff ff3e 	bl	8002c14 <__NVIC_GetPriorityGrouping>
 8002d98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	68b9      	ldr	r1, [r7, #8]
 8002d9e:	6978      	ldr	r0, [r7, #20]
 8002da0:	f7ff ff8e 	bl	8002cc0 <NVIC_EncodePriority>
 8002da4:	4602      	mov	r2, r0
 8002da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002daa:	4611      	mov	r1, r2
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff ff5d 	bl	8002c6c <__NVIC_SetPriority>
}
 8002db2:	bf00      	nop
 8002db4:	3718      	adds	r7, #24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b082      	sub	sp, #8
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff ff31 	bl	8002c30 <__NVIC_EnableIRQ>
}
 8002dce:	bf00      	nop
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b082      	sub	sp, #8
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7ff ffa2 	bl	8002d28 <SysTick_Config>
 8002de4:	4603      	mov	r3, r0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b084      	sub	sp, #16
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002dfc:	f7ff fad4 	bl	80023a8 <HAL_GetTick>
 8002e00:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d008      	beq.n	8002e20 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2280      	movs	r2, #128	; 0x80
 8002e12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e052      	b.n	8002ec6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0216 	bic.w	r2, r2, #22
 8002e2e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	695a      	ldr	r2, [r3, #20]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e3e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d103      	bne.n	8002e50 <HAL_DMA_Abort+0x62>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d007      	beq.n	8002e60 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0208 	bic.w	r2, r2, #8
 8002e5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 0201 	bic.w	r2, r2, #1
 8002e6e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e70:	e013      	b.n	8002e9a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e72:	f7ff fa99 	bl	80023a8 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b05      	cmp	r3, #5
 8002e7e:	d90c      	bls.n	8002e9a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2220      	movs	r2, #32
 8002e84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2203      	movs	r2, #3
 8002e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e015      	b.n	8002ec6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1e4      	bne.n	8002e72 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eac:	223f      	movs	r2, #63	; 0x3f
 8002eae:	409a      	lsls	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d004      	beq.n	8002eec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2280      	movs	r2, #128	; 0x80
 8002ee6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e00c      	b.n	8002f06 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2205      	movs	r2, #5
 8002ef0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0201 	bic.w	r2, r2, #1
 8002f02:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
	...

08002f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b089      	sub	sp, #36	; 0x24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61fb      	str	r3, [r7, #28]
 8002f2e:	e159      	b.n	80031e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f30:	2201      	movs	r2, #1
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	4013      	ands	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	f040 8148 	bne.w	80031de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f003 0303 	and.w	r3, r3, #3
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d005      	beq.n	8002f66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d130      	bne.n	8002fc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	2203      	movs	r2, #3
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	43db      	mvns	r3, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	68da      	ldr	r2, [r3, #12]
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	091b      	lsrs	r3, r3, #4
 8002fb2:	f003 0201 	and.w	r2, r3, #1
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 0303 	and.w	r3, r3, #3
 8002fd0:	2b03      	cmp	r3, #3
 8002fd2:	d017      	beq.n	8003004 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	2203      	movs	r2, #3
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f003 0303 	and.w	r3, r3, #3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d123      	bne.n	8003058 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	08da      	lsrs	r2, r3, #3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3208      	adds	r2, #8
 8003018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800301c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	220f      	movs	r2, #15
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	43db      	mvns	r3, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4013      	ands	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	691a      	ldr	r2, [r3, #16]
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4313      	orrs	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	08da      	lsrs	r2, r3, #3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	3208      	adds	r2, #8
 8003052:	69b9      	ldr	r1, [r7, #24]
 8003054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	2203      	movs	r2, #3
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	4013      	ands	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f003 0203 	and.w	r2, r3, #3
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4313      	orrs	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 80a2 	beq.w	80031de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	4b57      	ldr	r3, [pc, #348]	; (80031fc <HAL_GPIO_Init+0x2e8>)
 80030a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a2:	4a56      	ldr	r2, [pc, #344]	; (80031fc <HAL_GPIO_Init+0x2e8>)
 80030a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030a8:	6453      	str	r3, [r2, #68]	; 0x44
 80030aa:	4b54      	ldr	r3, [pc, #336]	; (80031fc <HAL_GPIO_Init+0x2e8>)
 80030ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030b6:	4a52      	ldr	r2, [pc, #328]	; (8003200 <HAL_GPIO_Init+0x2ec>)
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	089b      	lsrs	r3, r3, #2
 80030bc:	3302      	adds	r3, #2
 80030be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	220f      	movs	r2, #15
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	43db      	mvns	r3, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4013      	ands	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a49      	ldr	r2, [pc, #292]	; (8003204 <HAL_GPIO_Init+0x2f0>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d019      	beq.n	8003116 <HAL_GPIO_Init+0x202>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a48      	ldr	r2, [pc, #288]	; (8003208 <HAL_GPIO_Init+0x2f4>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d013      	beq.n	8003112 <HAL_GPIO_Init+0x1fe>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a47      	ldr	r2, [pc, #284]	; (800320c <HAL_GPIO_Init+0x2f8>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d00d      	beq.n	800310e <HAL_GPIO_Init+0x1fa>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a46      	ldr	r2, [pc, #280]	; (8003210 <HAL_GPIO_Init+0x2fc>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d007      	beq.n	800310a <HAL_GPIO_Init+0x1f6>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a45      	ldr	r2, [pc, #276]	; (8003214 <HAL_GPIO_Init+0x300>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d101      	bne.n	8003106 <HAL_GPIO_Init+0x1f2>
 8003102:	2304      	movs	r3, #4
 8003104:	e008      	b.n	8003118 <HAL_GPIO_Init+0x204>
 8003106:	2307      	movs	r3, #7
 8003108:	e006      	b.n	8003118 <HAL_GPIO_Init+0x204>
 800310a:	2303      	movs	r3, #3
 800310c:	e004      	b.n	8003118 <HAL_GPIO_Init+0x204>
 800310e:	2302      	movs	r3, #2
 8003110:	e002      	b.n	8003118 <HAL_GPIO_Init+0x204>
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <HAL_GPIO_Init+0x204>
 8003116:	2300      	movs	r3, #0
 8003118:	69fa      	ldr	r2, [r7, #28]
 800311a:	f002 0203 	and.w	r2, r2, #3
 800311e:	0092      	lsls	r2, r2, #2
 8003120:	4093      	lsls	r3, r2
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4313      	orrs	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003128:	4935      	ldr	r1, [pc, #212]	; (8003200 <HAL_GPIO_Init+0x2ec>)
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	089b      	lsrs	r3, r3, #2
 800312e:	3302      	adds	r3, #2
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003136:	4b38      	ldr	r3, [pc, #224]	; (8003218 <HAL_GPIO_Init+0x304>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	43db      	mvns	r3, r3
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	4013      	ands	r3, r2
 8003144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	4313      	orrs	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800315a:	4a2f      	ldr	r2, [pc, #188]	; (8003218 <HAL_GPIO_Init+0x304>)
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003160:	4b2d      	ldr	r3, [pc, #180]	; (8003218 <HAL_GPIO_Init+0x304>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	43db      	mvns	r3, r3
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	4013      	ands	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003184:	4a24      	ldr	r2, [pc, #144]	; (8003218 <HAL_GPIO_Init+0x304>)
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800318a:	4b23      	ldr	r3, [pc, #140]	; (8003218 <HAL_GPIO_Init+0x304>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	43db      	mvns	r3, r3
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	4013      	ands	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031ae:	4a1a      	ldr	r2, [pc, #104]	; (8003218 <HAL_GPIO_Init+0x304>)
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031b4:	4b18      	ldr	r3, [pc, #96]	; (8003218 <HAL_GPIO_Init+0x304>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	43db      	mvns	r3, r3
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4013      	ands	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031d8:	4a0f      	ldr	r2, [pc, #60]	; (8003218 <HAL_GPIO_Init+0x304>)
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	3301      	adds	r3, #1
 80031e2:	61fb      	str	r3, [r7, #28]
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	2b0f      	cmp	r3, #15
 80031e8:	f67f aea2 	bls.w	8002f30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031ec:	bf00      	nop
 80031ee:	bf00      	nop
 80031f0:	3724      	adds	r7, #36	; 0x24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	40023800 	.word	0x40023800
 8003200:	40013800 	.word	0x40013800
 8003204:	40020000 	.word	0x40020000
 8003208:	40020400 	.word	0x40020400
 800320c:	40020800 	.word	0x40020800
 8003210:	40020c00 	.word	0x40020c00
 8003214:	40021000 	.word	0x40021000
 8003218:	40013c00 	.word	0x40013c00

0800321c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	460b      	mov	r3, r1
 8003226:	807b      	strh	r3, [r7, #2]
 8003228:	4613      	mov	r3, r2
 800322a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800322c:	787b      	ldrb	r3, [r7, #1]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003232:	887a      	ldrh	r2, [r7, #2]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003238:	e003      	b.n	8003242 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800323a:	887b      	ldrh	r3, [r7, #2]
 800323c:	041a      	lsls	r2, r3, #16
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	619a      	str	r2, [r3, #24]
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800324e:	b480      	push	{r7}
 8003250:	b085      	sub	sp, #20
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
 8003256:	460b      	mov	r3, r1
 8003258:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003260:	887a      	ldrh	r2, [r7, #2]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	4013      	ands	r3, r2
 8003266:	041a      	lsls	r2, r3, #16
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	43d9      	mvns	r1, r3
 800326c:	887b      	ldrh	r3, [r7, #2]
 800326e:	400b      	ands	r3, r1
 8003270:	431a      	orrs	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	619a      	str	r2, [r3, #24]
}
 8003276:	bf00      	nop
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
	...

08003284 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800328e:	4b08      	ldr	r3, [pc, #32]	; (80032b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003290:	695a      	ldr	r2, [r3, #20]
 8003292:	88fb      	ldrh	r3, [r7, #6]
 8003294:	4013      	ands	r3, r2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d006      	beq.n	80032a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800329a:	4a05      	ldr	r2, [pc, #20]	; (80032b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800329c:	88fb      	ldrh	r3, [r7, #6]
 800329e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032a0:	88fb      	ldrh	r3, [r7, #6]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fe fa78 	bl	8001798 <HAL_GPIO_EXTI_Callback>
  }
}
 80032a8:	bf00      	nop
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40013c00 	.word	0x40013c00

080032b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e267      	b.n	8003796 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d075      	beq.n	80033be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032d2:	4b88      	ldr	r3, [pc, #544]	; (80034f4 <HAL_RCC_OscConfig+0x240>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 030c 	and.w	r3, r3, #12
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d00c      	beq.n	80032f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032de:	4b85      	ldr	r3, [pc, #532]	; (80034f4 <HAL_RCC_OscConfig+0x240>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032e6:	2b08      	cmp	r3, #8
 80032e8:	d112      	bne.n	8003310 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ea:	4b82      	ldr	r3, [pc, #520]	; (80034f4 <HAL_RCC_OscConfig+0x240>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032f6:	d10b      	bne.n	8003310 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f8:	4b7e      	ldr	r3, [pc, #504]	; (80034f4 <HAL_RCC_OscConfig+0x240>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d05b      	beq.n	80033bc <HAL_RCC_OscConfig+0x108>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d157      	bne.n	80033bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e242      	b.n	8003796 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003318:	d106      	bne.n	8003328 <HAL_RCC_OscConfig+0x74>
 800331a:	4b76      	ldr	r3, [pc, #472]	; (80034f4 <HAL_RCC_OscConfig+0x240>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a75      	ldr	r2, [pc, #468]	; (80034f4 <HAL_RCC_OscConfig+0x240>)
 8003320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	e01d      	b.n	8003364 <HAL_RCC_OscConfig+0xb0>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003330:	d10c      	bne.n	800334c <HAL_RCC_OscConfig+0x98>
 8003332:	4b70      	ldr	r3, [pc, #448]	; (80034f4 <HAL_RCC_OscConfig+0x240>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a6f      	ldr	r2, [pc, #444]	; (80034f4 <HAL_RCC_OscConfig+0x240>)
 8003338:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	4b6d      	ldr	r3, [pc, #436]	; (80034f4 <HAL_RCC_OscConfig+0x240>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a6c      	ldr	r2, [pc, #432]	; (80034f4 <HAL_RCC_OscConfig+0x240>)
 8003344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003348:	6013      	str	r3, [r2, #0]
 800334a:	e00b      	b.n	8003364 <HAL_RCC_OscConfig+0xb0>
 800334c:	4b69      	ldr	r3, [pc, #420]	; (80034f4 <HAL_RCC_OscConfig+0x240>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a68      	ldr	r2, [pc, #416]	; (80034f4 <HAL_RCC_OscConfig+0x240>)
 8003352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003356:	6013      	str	r3, [r2, #0]
 8003358:	4b66      	ldr	r3, [pc, #408]	; (80034f4 <HAL_RCC_OscConfig+0x240>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a65      	ldr	r2, [pc, #404]	; (80034f4 <HAL_RCC_OscConfig+0x240>)
 800335e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003362:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d013      	beq.n	8003394 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336c:	f7ff f81c 	bl	80023a8 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003374:	f7ff f818 	bl	80023a8 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b64      	cmp	r3, #100	; 0x64
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e207      	b.n	8003796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003386:	4b5b      	ldr	r3, [pc, #364]	; (80034f4 <HAL_RCC_OscConfig+0x240>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0f0      	beq.n	8003374 <HAL_RCC_OscConfig+0xc0>
 8003392:	e014      	b.n	80033be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003394:	f7ff f808 	bl	80023a8 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800339c:	f7ff f804 	bl	80023a8 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b64      	cmp	r3, #100	; 0x64
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e1f3      	b.n	8003796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ae:	4b51      	ldr	r3, [pc, #324]	; (80034f4 <HAL_RCC_OscConfig+0x240>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1f0      	bne.n	800339c <HAL_RCC_OscConfig+0xe8>
 80033ba:	e000      	b.n	80033be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d063      	beq.n	8003492 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033ca:	4b4a      	ldr	r3, [pc, #296]	; (80034f4 <HAL_RCC_OscConfig+0x240>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 030c 	and.w	r3, r3, #12
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00b      	beq.n	80033ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033d6:	4b47      	ldr	r3, [pc, #284]	; (80034f4 <HAL_RCC_OscConfig+0x240>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033de:	2b08      	cmp	r3, #8
 80033e0:	d11c      	bne.n	800341c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033e2:	4b44      	ldr	r3, [pc, #272]	; (80034f4 <HAL_RCC_OscConfig+0x240>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d116      	bne.n	800341c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ee:	4b41      	ldr	r3, [pc, #260]	; (80034f4 <HAL_RCC_OscConfig+0x240>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d005      	beq.n	8003406 <HAL_RCC_OscConfig+0x152>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d001      	beq.n	8003406 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e1c7      	b.n	8003796 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003406:	4b3b      	ldr	r3, [pc, #236]	; (80034f4 <HAL_RCC_OscConfig+0x240>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	4937      	ldr	r1, [pc, #220]	; (80034f4 <HAL_RCC_OscConfig+0x240>)
 8003416:	4313      	orrs	r3, r2
 8003418:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800341a:	e03a      	b.n	8003492 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d020      	beq.n	8003466 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003424:	4b34      	ldr	r3, [pc, #208]	; (80034f8 <HAL_RCC_OscConfig+0x244>)
 8003426:	2201      	movs	r2, #1
 8003428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342a:	f7fe ffbd 	bl	80023a8 <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003430:	e008      	b.n	8003444 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003432:	f7fe ffb9 	bl	80023a8 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e1a8      	b.n	8003796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003444:	4b2b      	ldr	r3, [pc, #172]	; (80034f4 <HAL_RCC_OscConfig+0x240>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0f0      	beq.n	8003432 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003450:	4b28      	ldr	r3, [pc, #160]	; (80034f4 <HAL_RCC_OscConfig+0x240>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	4925      	ldr	r1, [pc, #148]	; (80034f4 <HAL_RCC_OscConfig+0x240>)
 8003460:	4313      	orrs	r3, r2
 8003462:	600b      	str	r3, [r1, #0]
 8003464:	e015      	b.n	8003492 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003466:	4b24      	ldr	r3, [pc, #144]	; (80034f8 <HAL_RCC_OscConfig+0x244>)
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346c:	f7fe ff9c 	bl	80023a8 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003474:	f7fe ff98 	bl	80023a8 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e187      	b.n	8003796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003486:	4b1b      	ldr	r3, [pc, #108]	; (80034f4 <HAL_RCC_OscConfig+0x240>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f0      	bne.n	8003474 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0308 	and.w	r3, r3, #8
 800349a:	2b00      	cmp	r3, #0
 800349c:	d036      	beq.n	800350c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d016      	beq.n	80034d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034a6:	4b15      	ldr	r3, [pc, #84]	; (80034fc <HAL_RCC_OscConfig+0x248>)
 80034a8:	2201      	movs	r2, #1
 80034aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ac:	f7fe ff7c 	bl	80023a8 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034b4:	f7fe ff78 	bl	80023a8 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e167      	b.n	8003796 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034c6:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <HAL_RCC_OscConfig+0x240>)
 80034c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0f0      	beq.n	80034b4 <HAL_RCC_OscConfig+0x200>
 80034d2:	e01b      	b.n	800350c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034d4:	4b09      	ldr	r3, [pc, #36]	; (80034fc <HAL_RCC_OscConfig+0x248>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034da:	f7fe ff65 	bl	80023a8 <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e0:	e00e      	b.n	8003500 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034e2:	f7fe ff61 	bl	80023a8 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d907      	bls.n	8003500 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e150      	b.n	8003796 <HAL_RCC_OscConfig+0x4e2>
 80034f4:	40023800 	.word	0x40023800
 80034f8:	42470000 	.word	0x42470000
 80034fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003500:	4b88      	ldr	r3, [pc, #544]	; (8003724 <HAL_RCC_OscConfig+0x470>)
 8003502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1ea      	bne.n	80034e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 8097 	beq.w	8003648 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800351a:	2300      	movs	r3, #0
 800351c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800351e:	4b81      	ldr	r3, [pc, #516]	; (8003724 <HAL_RCC_OscConfig+0x470>)
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10f      	bne.n	800354a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800352a:	2300      	movs	r3, #0
 800352c:	60bb      	str	r3, [r7, #8]
 800352e:	4b7d      	ldr	r3, [pc, #500]	; (8003724 <HAL_RCC_OscConfig+0x470>)
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	4a7c      	ldr	r2, [pc, #496]	; (8003724 <HAL_RCC_OscConfig+0x470>)
 8003534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003538:	6413      	str	r3, [r2, #64]	; 0x40
 800353a:	4b7a      	ldr	r3, [pc, #488]	; (8003724 <HAL_RCC_OscConfig+0x470>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003542:	60bb      	str	r3, [r7, #8]
 8003544:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003546:	2301      	movs	r3, #1
 8003548:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800354a:	4b77      	ldr	r3, [pc, #476]	; (8003728 <HAL_RCC_OscConfig+0x474>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003552:	2b00      	cmp	r3, #0
 8003554:	d118      	bne.n	8003588 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003556:	4b74      	ldr	r3, [pc, #464]	; (8003728 <HAL_RCC_OscConfig+0x474>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a73      	ldr	r2, [pc, #460]	; (8003728 <HAL_RCC_OscConfig+0x474>)
 800355c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003560:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003562:	f7fe ff21 	bl	80023a8 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003568:	e008      	b.n	800357c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800356a:	f7fe ff1d 	bl	80023a8 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e10c      	b.n	8003796 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800357c:	4b6a      	ldr	r3, [pc, #424]	; (8003728 <HAL_RCC_OscConfig+0x474>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0f0      	beq.n	800356a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d106      	bne.n	800359e <HAL_RCC_OscConfig+0x2ea>
 8003590:	4b64      	ldr	r3, [pc, #400]	; (8003724 <HAL_RCC_OscConfig+0x470>)
 8003592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003594:	4a63      	ldr	r2, [pc, #396]	; (8003724 <HAL_RCC_OscConfig+0x470>)
 8003596:	f043 0301 	orr.w	r3, r3, #1
 800359a:	6713      	str	r3, [r2, #112]	; 0x70
 800359c:	e01c      	b.n	80035d8 <HAL_RCC_OscConfig+0x324>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	2b05      	cmp	r3, #5
 80035a4:	d10c      	bne.n	80035c0 <HAL_RCC_OscConfig+0x30c>
 80035a6:	4b5f      	ldr	r3, [pc, #380]	; (8003724 <HAL_RCC_OscConfig+0x470>)
 80035a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035aa:	4a5e      	ldr	r2, [pc, #376]	; (8003724 <HAL_RCC_OscConfig+0x470>)
 80035ac:	f043 0304 	orr.w	r3, r3, #4
 80035b0:	6713      	str	r3, [r2, #112]	; 0x70
 80035b2:	4b5c      	ldr	r3, [pc, #368]	; (8003724 <HAL_RCC_OscConfig+0x470>)
 80035b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b6:	4a5b      	ldr	r2, [pc, #364]	; (8003724 <HAL_RCC_OscConfig+0x470>)
 80035b8:	f043 0301 	orr.w	r3, r3, #1
 80035bc:	6713      	str	r3, [r2, #112]	; 0x70
 80035be:	e00b      	b.n	80035d8 <HAL_RCC_OscConfig+0x324>
 80035c0:	4b58      	ldr	r3, [pc, #352]	; (8003724 <HAL_RCC_OscConfig+0x470>)
 80035c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c4:	4a57      	ldr	r2, [pc, #348]	; (8003724 <HAL_RCC_OscConfig+0x470>)
 80035c6:	f023 0301 	bic.w	r3, r3, #1
 80035ca:	6713      	str	r3, [r2, #112]	; 0x70
 80035cc:	4b55      	ldr	r3, [pc, #340]	; (8003724 <HAL_RCC_OscConfig+0x470>)
 80035ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d0:	4a54      	ldr	r2, [pc, #336]	; (8003724 <HAL_RCC_OscConfig+0x470>)
 80035d2:	f023 0304 	bic.w	r3, r3, #4
 80035d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d015      	beq.n	800360c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e0:	f7fe fee2 	bl	80023a8 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e6:	e00a      	b.n	80035fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035e8:	f7fe fede 	bl	80023a8 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e0cb      	b.n	8003796 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035fe:	4b49      	ldr	r3, [pc, #292]	; (8003724 <HAL_RCC_OscConfig+0x470>)
 8003600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0ee      	beq.n	80035e8 <HAL_RCC_OscConfig+0x334>
 800360a:	e014      	b.n	8003636 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800360c:	f7fe fecc 	bl	80023a8 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003612:	e00a      	b.n	800362a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003614:	f7fe fec8 	bl	80023a8 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003622:	4293      	cmp	r3, r2
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e0b5      	b.n	8003796 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800362a:	4b3e      	ldr	r3, [pc, #248]	; (8003724 <HAL_RCC_OscConfig+0x470>)
 800362c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1ee      	bne.n	8003614 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003636:	7dfb      	ldrb	r3, [r7, #23]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d105      	bne.n	8003648 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800363c:	4b39      	ldr	r3, [pc, #228]	; (8003724 <HAL_RCC_OscConfig+0x470>)
 800363e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003640:	4a38      	ldr	r2, [pc, #224]	; (8003724 <HAL_RCC_OscConfig+0x470>)
 8003642:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003646:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 80a1 	beq.w	8003794 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003652:	4b34      	ldr	r3, [pc, #208]	; (8003724 <HAL_RCC_OscConfig+0x470>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 030c 	and.w	r3, r3, #12
 800365a:	2b08      	cmp	r3, #8
 800365c:	d05c      	beq.n	8003718 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	2b02      	cmp	r3, #2
 8003664:	d141      	bne.n	80036ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003666:	4b31      	ldr	r3, [pc, #196]	; (800372c <HAL_RCC_OscConfig+0x478>)
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366c:	f7fe fe9c 	bl	80023a8 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003674:	f7fe fe98 	bl	80023a8 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e087      	b.n	8003796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003686:	4b27      	ldr	r3, [pc, #156]	; (8003724 <HAL_RCC_OscConfig+0x470>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f0      	bne.n	8003674 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	69da      	ldr	r2, [r3, #28]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	019b      	lsls	r3, r3, #6
 80036a2:	431a      	orrs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a8:	085b      	lsrs	r3, r3, #1
 80036aa:	3b01      	subs	r3, #1
 80036ac:	041b      	lsls	r3, r3, #16
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b4:	061b      	lsls	r3, r3, #24
 80036b6:	491b      	ldr	r1, [pc, #108]	; (8003724 <HAL_RCC_OscConfig+0x470>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036bc:	4b1b      	ldr	r3, [pc, #108]	; (800372c <HAL_RCC_OscConfig+0x478>)
 80036be:	2201      	movs	r2, #1
 80036c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c2:	f7fe fe71 	bl	80023a8 <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c8:	e008      	b.n	80036dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ca:	f7fe fe6d 	bl	80023a8 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e05c      	b.n	8003796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036dc:	4b11      	ldr	r3, [pc, #68]	; (8003724 <HAL_RCC_OscConfig+0x470>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0f0      	beq.n	80036ca <HAL_RCC_OscConfig+0x416>
 80036e8:	e054      	b.n	8003794 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ea:	4b10      	ldr	r3, [pc, #64]	; (800372c <HAL_RCC_OscConfig+0x478>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f0:	f7fe fe5a 	bl	80023a8 <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036f8:	f7fe fe56 	bl	80023a8 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e045      	b.n	8003796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800370a:	4b06      	ldr	r3, [pc, #24]	; (8003724 <HAL_RCC_OscConfig+0x470>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1f0      	bne.n	80036f8 <HAL_RCC_OscConfig+0x444>
 8003716:	e03d      	b.n	8003794 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d107      	bne.n	8003730 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e038      	b.n	8003796 <HAL_RCC_OscConfig+0x4e2>
 8003724:	40023800 	.word	0x40023800
 8003728:	40007000 	.word	0x40007000
 800372c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003730:	4b1b      	ldr	r3, [pc, #108]	; (80037a0 <HAL_RCC_OscConfig+0x4ec>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d028      	beq.n	8003790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003748:	429a      	cmp	r2, r3
 800374a:	d121      	bne.n	8003790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003756:	429a      	cmp	r2, r3
 8003758:	d11a      	bne.n	8003790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003760:	4013      	ands	r3, r2
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003766:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003768:	4293      	cmp	r3, r2
 800376a:	d111      	bne.n	8003790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003776:	085b      	lsrs	r3, r3, #1
 8003778:	3b01      	subs	r3, #1
 800377a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800377c:	429a      	cmp	r2, r3
 800377e:	d107      	bne.n	8003790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800378c:	429a      	cmp	r2, r3
 800378e:	d001      	beq.n	8003794 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e000      	b.n	8003796 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3718      	adds	r7, #24
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	40023800 	.word	0x40023800

080037a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0cc      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037b8:	4b68      	ldr	r3, [pc, #416]	; (800395c <HAL_RCC_ClockConfig+0x1b8>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d90c      	bls.n	80037e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037c6:	4b65      	ldr	r3, [pc, #404]	; (800395c <HAL_RCC_ClockConfig+0x1b8>)
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	b2d2      	uxtb	r2, r2
 80037cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ce:	4b63      	ldr	r3, [pc, #396]	; (800395c <HAL_RCC_ClockConfig+0x1b8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d001      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e0b8      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d020      	beq.n	800382e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d005      	beq.n	8003804 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037f8:	4b59      	ldr	r3, [pc, #356]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	4a58      	ldr	r2, [pc, #352]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 80037fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003802:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0308 	and.w	r3, r3, #8
 800380c:	2b00      	cmp	r3, #0
 800380e:	d005      	beq.n	800381c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003810:	4b53      	ldr	r3, [pc, #332]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	4a52      	ldr	r2, [pc, #328]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003816:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800381a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800381c:	4b50      	ldr	r3, [pc, #320]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	494d      	ldr	r1, [pc, #308]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 800382a:	4313      	orrs	r3, r2
 800382c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d044      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d107      	bne.n	8003852 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003842:	4b47      	ldr	r3, [pc, #284]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d119      	bne.n	8003882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e07f      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2b02      	cmp	r3, #2
 8003858:	d003      	beq.n	8003862 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800385e:	2b03      	cmp	r3, #3
 8003860:	d107      	bne.n	8003872 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003862:	4b3f      	ldr	r3, [pc, #252]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d109      	bne.n	8003882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e06f      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003872:	4b3b      	ldr	r3, [pc, #236]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e067      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003882:	4b37      	ldr	r3, [pc, #220]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f023 0203 	bic.w	r2, r3, #3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	4934      	ldr	r1, [pc, #208]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003890:	4313      	orrs	r3, r2
 8003892:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003894:	f7fe fd88 	bl	80023a8 <HAL_GetTick>
 8003898:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389a:	e00a      	b.n	80038b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800389c:	f7fe fd84 	bl	80023a8 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e04f      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b2:	4b2b      	ldr	r3, [pc, #172]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 020c 	and.w	r2, r3, #12
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d1eb      	bne.n	800389c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038c4:	4b25      	ldr	r3, [pc, #148]	; (800395c <HAL_RCC_ClockConfig+0x1b8>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0307 	and.w	r3, r3, #7
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d20c      	bcs.n	80038ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d2:	4b22      	ldr	r3, [pc, #136]	; (800395c <HAL_RCC_ClockConfig+0x1b8>)
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	b2d2      	uxtb	r2, r2
 80038d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038da:	4b20      	ldr	r3, [pc, #128]	; (800395c <HAL_RCC_ClockConfig+0x1b8>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0307 	and.w	r3, r3, #7
 80038e2:	683a      	ldr	r2, [r7, #0]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d001      	beq.n	80038ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e032      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d008      	beq.n	800390a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038f8:	4b19      	ldr	r3, [pc, #100]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	4916      	ldr	r1, [pc, #88]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003906:	4313      	orrs	r3, r2
 8003908:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d009      	beq.n	800392a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003916:	4b12      	ldr	r3, [pc, #72]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	490e      	ldr	r1, [pc, #56]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003926:	4313      	orrs	r3, r2
 8003928:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800392a:	f000 f821 	bl	8003970 <HAL_RCC_GetSysClockFreq>
 800392e:	4602      	mov	r2, r0
 8003930:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	091b      	lsrs	r3, r3, #4
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	490a      	ldr	r1, [pc, #40]	; (8003964 <HAL_RCC_ClockConfig+0x1c0>)
 800393c:	5ccb      	ldrb	r3, [r1, r3]
 800393e:	fa22 f303 	lsr.w	r3, r2, r3
 8003942:	4a09      	ldr	r2, [pc, #36]	; (8003968 <HAL_RCC_ClockConfig+0x1c4>)
 8003944:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003946:	4b09      	ldr	r3, [pc, #36]	; (800396c <HAL_RCC_ClockConfig+0x1c8>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f7fe fce8 	bl	8002320 <HAL_InitTick>

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	40023c00 	.word	0x40023c00
 8003960:	40023800 	.word	0x40023800
 8003964:	08006b38 	.word	0x08006b38
 8003968:	20000018 	.word	0x20000018
 800396c:	2000001c 	.word	0x2000001c

08003970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003974:	b094      	sub	sp, #80	; 0x50
 8003976:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	647b      	str	r3, [r7, #68]	; 0x44
 800397c:	2300      	movs	r3, #0
 800397e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003980:	2300      	movs	r3, #0
 8003982:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003984:	2300      	movs	r3, #0
 8003986:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003988:	4b79      	ldr	r3, [pc, #484]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x200>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f003 030c 	and.w	r3, r3, #12
 8003990:	2b08      	cmp	r3, #8
 8003992:	d00d      	beq.n	80039b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003994:	2b08      	cmp	r3, #8
 8003996:	f200 80e1 	bhi.w	8003b5c <HAL_RCC_GetSysClockFreq+0x1ec>
 800399a:	2b00      	cmp	r3, #0
 800399c:	d002      	beq.n	80039a4 <HAL_RCC_GetSysClockFreq+0x34>
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d003      	beq.n	80039aa <HAL_RCC_GetSysClockFreq+0x3a>
 80039a2:	e0db      	b.n	8003b5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039a4:	4b73      	ldr	r3, [pc, #460]	; (8003b74 <HAL_RCC_GetSysClockFreq+0x204>)
 80039a6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80039a8:	e0db      	b.n	8003b62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039aa:	4b73      	ldr	r3, [pc, #460]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x208>)
 80039ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039ae:	e0d8      	b.n	8003b62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039b0:	4b6f      	ldr	r3, [pc, #444]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x200>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039b8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039ba:	4b6d      	ldr	r3, [pc, #436]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x200>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d063      	beq.n	8003a8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039c6:	4b6a      	ldr	r3, [pc, #424]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x200>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	099b      	lsrs	r3, r3, #6
 80039cc:	2200      	movs	r2, #0
 80039ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80039d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80039d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d8:	633b      	str	r3, [r7, #48]	; 0x30
 80039da:	2300      	movs	r3, #0
 80039dc:	637b      	str	r3, [r7, #52]	; 0x34
 80039de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80039e2:	4622      	mov	r2, r4
 80039e4:	462b      	mov	r3, r5
 80039e6:	f04f 0000 	mov.w	r0, #0
 80039ea:	f04f 0100 	mov.w	r1, #0
 80039ee:	0159      	lsls	r1, r3, #5
 80039f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039f4:	0150      	lsls	r0, r2, #5
 80039f6:	4602      	mov	r2, r0
 80039f8:	460b      	mov	r3, r1
 80039fa:	4621      	mov	r1, r4
 80039fc:	1a51      	subs	r1, r2, r1
 80039fe:	6139      	str	r1, [r7, #16]
 8003a00:	4629      	mov	r1, r5
 8003a02:	eb63 0301 	sbc.w	r3, r3, r1
 8003a06:	617b      	str	r3, [r7, #20]
 8003a08:	f04f 0200 	mov.w	r2, #0
 8003a0c:	f04f 0300 	mov.w	r3, #0
 8003a10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a14:	4659      	mov	r1, fp
 8003a16:	018b      	lsls	r3, r1, #6
 8003a18:	4651      	mov	r1, sl
 8003a1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a1e:	4651      	mov	r1, sl
 8003a20:	018a      	lsls	r2, r1, #6
 8003a22:	4651      	mov	r1, sl
 8003a24:	ebb2 0801 	subs.w	r8, r2, r1
 8003a28:	4659      	mov	r1, fp
 8003a2a:	eb63 0901 	sbc.w	r9, r3, r1
 8003a2e:	f04f 0200 	mov.w	r2, #0
 8003a32:	f04f 0300 	mov.w	r3, #0
 8003a36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a42:	4690      	mov	r8, r2
 8003a44:	4699      	mov	r9, r3
 8003a46:	4623      	mov	r3, r4
 8003a48:	eb18 0303 	adds.w	r3, r8, r3
 8003a4c:	60bb      	str	r3, [r7, #8]
 8003a4e:	462b      	mov	r3, r5
 8003a50:	eb49 0303 	adc.w	r3, r9, r3
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	f04f 0200 	mov.w	r2, #0
 8003a5a:	f04f 0300 	mov.w	r3, #0
 8003a5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a62:	4629      	mov	r1, r5
 8003a64:	024b      	lsls	r3, r1, #9
 8003a66:	4621      	mov	r1, r4
 8003a68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a6c:	4621      	mov	r1, r4
 8003a6e:	024a      	lsls	r2, r1, #9
 8003a70:	4610      	mov	r0, r2
 8003a72:	4619      	mov	r1, r3
 8003a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a76:	2200      	movs	r2, #0
 8003a78:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a80:	f7fc fc06 	bl	8000290 <__aeabi_uldivmod>
 8003a84:	4602      	mov	r2, r0
 8003a86:	460b      	mov	r3, r1
 8003a88:	4613      	mov	r3, r2
 8003a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a8c:	e058      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a8e:	4b38      	ldr	r3, [pc, #224]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	099b      	lsrs	r3, r3, #6
 8003a94:	2200      	movs	r2, #0
 8003a96:	4618      	mov	r0, r3
 8003a98:	4611      	mov	r1, r2
 8003a9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a9e:	623b      	str	r3, [r7, #32]
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003aa8:	4642      	mov	r2, r8
 8003aaa:	464b      	mov	r3, r9
 8003aac:	f04f 0000 	mov.w	r0, #0
 8003ab0:	f04f 0100 	mov.w	r1, #0
 8003ab4:	0159      	lsls	r1, r3, #5
 8003ab6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aba:	0150      	lsls	r0, r2, #5
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4641      	mov	r1, r8
 8003ac2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ac6:	4649      	mov	r1, r9
 8003ac8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003acc:	f04f 0200 	mov.w	r2, #0
 8003ad0:	f04f 0300 	mov.w	r3, #0
 8003ad4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ad8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003adc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ae0:	ebb2 040a 	subs.w	r4, r2, sl
 8003ae4:	eb63 050b 	sbc.w	r5, r3, fp
 8003ae8:	f04f 0200 	mov.w	r2, #0
 8003aec:	f04f 0300 	mov.w	r3, #0
 8003af0:	00eb      	lsls	r3, r5, #3
 8003af2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003af6:	00e2      	lsls	r2, r4, #3
 8003af8:	4614      	mov	r4, r2
 8003afa:	461d      	mov	r5, r3
 8003afc:	4643      	mov	r3, r8
 8003afe:	18e3      	adds	r3, r4, r3
 8003b00:	603b      	str	r3, [r7, #0]
 8003b02:	464b      	mov	r3, r9
 8003b04:	eb45 0303 	adc.w	r3, r5, r3
 8003b08:	607b      	str	r3, [r7, #4]
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	f04f 0300 	mov.w	r3, #0
 8003b12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b16:	4629      	mov	r1, r5
 8003b18:	028b      	lsls	r3, r1, #10
 8003b1a:	4621      	mov	r1, r4
 8003b1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b20:	4621      	mov	r1, r4
 8003b22:	028a      	lsls	r2, r1, #10
 8003b24:	4610      	mov	r0, r2
 8003b26:	4619      	mov	r1, r3
 8003b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	61bb      	str	r3, [r7, #24]
 8003b2e:	61fa      	str	r2, [r7, #28]
 8003b30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b34:	f7fc fbac 	bl	8000290 <__aeabi_uldivmod>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b40:	4b0b      	ldr	r3, [pc, #44]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	0c1b      	lsrs	r3, r3, #16
 8003b46:	f003 0303 	and.w	r3, r3, #3
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003b50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b5a:	e002      	b.n	8003b62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b5c:	4b05      	ldr	r3, [pc, #20]	; (8003b74 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b5e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3750      	adds	r7, #80	; 0x50
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b6e:	bf00      	nop
 8003b70:	40023800 	.word	0x40023800
 8003b74:	00f42400 	.word	0x00f42400
 8003b78:	007a1200 	.word	0x007a1200

08003b7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b80:	4b03      	ldr	r3, [pc, #12]	; (8003b90 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b82:	681b      	ldr	r3, [r3, #0]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	20000018 	.word	0x20000018

08003b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b98:	f7ff fff0 	bl	8003b7c <HAL_RCC_GetHCLKFreq>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	0a9b      	lsrs	r3, r3, #10
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	4903      	ldr	r1, [pc, #12]	; (8003bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003baa:	5ccb      	ldrb	r3, [r1, r3]
 8003bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40023800 	.word	0x40023800
 8003bb8:	08006b48 	.word	0x08006b48

08003bbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bc0:	f7ff ffdc 	bl	8003b7c <HAL_RCC_GetHCLKFreq>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	4b05      	ldr	r3, [pc, #20]	; (8003bdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	0b5b      	lsrs	r3, r3, #13
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	4903      	ldr	r1, [pc, #12]	; (8003be0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bd2:	5ccb      	ldrb	r3, [r1, r3]
 8003bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	08006b48 	.word	0x08006b48

08003be4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e041      	b.n	8003c7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d106      	bne.n	8003c10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7fe f90a 	bl	8001e24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3304      	adds	r3, #4
 8003c20:	4619      	mov	r1, r3
 8003c22:	4610      	mov	r0, r2
 8003c24:	f000 fcae 	bl	8004584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
	...

08003c84 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d001      	beq.n	8003c9c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e03c      	b.n	8003d16 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a1e      	ldr	r2, [pc, #120]	; (8003d24 <HAL_TIM_Base_Start+0xa0>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d018      	beq.n	8003ce0 <HAL_TIM_Base_Start+0x5c>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb6:	d013      	beq.n	8003ce0 <HAL_TIM_Base_Start+0x5c>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a1a      	ldr	r2, [pc, #104]	; (8003d28 <HAL_TIM_Base_Start+0xa4>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d00e      	beq.n	8003ce0 <HAL_TIM_Base_Start+0x5c>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a19      	ldr	r2, [pc, #100]	; (8003d2c <HAL_TIM_Base_Start+0xa8>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d009      	beq.n	8003ce0 <HAL_TIM_Base_Start+0x5c>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a17      	ldr	r2, [pc, #92]	; (8003d30 <HAL_TIM_Base_Start+0xac>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d004      	beq.n	8003ce0 <HAL_TIM_Base_Start+0x5c>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a16      	ldr	r2, [pc, #88]	; (8003d34 <HAL_TIM_Base_Start+0xb0>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d111      	bne.n	8003d04 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 0307 	and.w	r3, r3, #7
 8003cea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2b06      	cmp	r3, #6
 8003cf0:	d010      	beq.n	8003d14 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f042 0201 	orr.w	r2, r2, #1
 8003d00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d02:	e007      	b.n	8003d14 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0201 	orr.w	r2, r2, #1
 8003d12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3714      	adds	r7, #20
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	40010000 	.word	0x40010000
 8003d28:	40000400 	.word	0x40000400
 8003d2c:	40000800 	.word	0x40000800
 8003d30:	40000c00 	.word	0x40000c00
 8003d34:	40014000 	.word	0x40014000

08003d38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d001      	beq.n	8003d50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e044      	b.n	8003dda <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68da      	ldr	r2, [r3, #12]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0201 	orr.w	r2, r2, #1
 8003d66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a1e      	ldr	r2, [pc, #120]	; (8003de8 <HAL_TIM_Base_Start_IT+0xb0>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d018      	beq.n	8003da4 <HAL_TIM_Base_Start_IT+0x6c>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d7a:	d013      	beq.n	8003da4 <HAL_TIM_Base_Start_IT+0x6c>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a1a      	ldr	r2, [pc, #104]	; (8003dec <HAL_TIM_Base_Start_IT+0xb4>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d00e      	beq.n	8003da4 <HAL_TIM_Base_Start_IT+0x6c>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a19      	ldr	r2, [pc, #100]	; (8003df0 <HAL_TIM_Base_Start_IT+0xb8>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d009      	beq.n	8003da4 <HAL_TIM_Base_Start_IT+0x6c>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a17      	ldr	r2, [pc, #92]	; (8003df4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d004      	beq.n	8003da4 <HAL_TIM_Base_Start_IT+0x6c>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a16      	ldr	r2, [pc, #88]	; (8003df8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d111      	bne.n	8003dc8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 0307 	and.w	r3, r3, #7
 8003dae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2b06      	cmp	r3, #6
 8003db4:	d010      	beq.n	8003dd8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f042 0201 	orr.w	r2, r2, #1
 8003dc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc6:	e007      	b.n	8003dd8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0201 	orr.w	r2, r2, #1
 8003dd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3714      	adds	r7, #20
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	40010000 	.word	0x40010000
 8003dec:	40000400 	.word	0x40000400
 8003df0:	40000800 	.word	0x40000800
 8003df4:	40000c00 	.word	0x40000c00
 8003df8:	40014000 	.word	0x40014000

08003dfc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e041      	b.n	8003e92 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d106      	bne.n	8003e28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f839 	bl	8003e9a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3304      	adds	r3, #4
 8003e38:	4619      	mov	r1, r3
 8003e3a:	4610      	mov	r0, r2
 8003e3c:	f000 fba2 	bl	8004584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ea2:	bf00      	nop
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
	...

08003eb0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d109      	bne.n	8003ed4 <HAL_TIM_PWM_Start+0x24>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	bf14      	ite	ne
 8003ecc:	2301      	movne	r3, #1
 8003ece:	2300      	moveq	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	e022      	b.n	8003f1a <HAL_TIM_PWM_Start+0x6a>
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	2b04      	cmp	r3, #4
 8003ed8:	d109      	bne.n	8003eee <HAL_TIM_PWM_Start+0x3e>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	bf14      	ite	ne
 8003ee6:	2301      	movne	r3, #1
 8003ee8:	2300      	moveq	r3, #0
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	e015      	b.n	8003f1a <HAL_TIM_PWM_Start+0x6a>
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	2b08      	cmp	r3, #8
 8003ef2:	d109      	bne.n	8003f08 <HAL_TIM_PWM_Start+0x58>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	bf14      	ite	ne
 8003f00:	2301      	movne	r3, #1
 8003f02:	2300      	moveq	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	e008      	b.n	8003f1a <HAL_TIM_PWM_Start+0x6a>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	bf14      	ite	ne
 8003f14:	2301      	movne	r3, #1
 8003f16:	2300      	moveq	r3, #0
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e068      	b.n	8003ff4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d104      	bne.n	8003f32 <HAL_TIM_PWM_Start+0x82>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f30:	e013      	b.n	8003f5a <HAL_TIM_PWM_Start+0xaa>
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	2b04      	cmp	r3, #4
 8003f36:	d104      	bne.n	8003f42 <HAL_TIM_PWM_Start+0x92>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f40:	e00b      	b.n	8003f5a <HAL_TIM_PWM_Start+0xaa>
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d104      	bne.n	8003f52 <HAL_TIM_PWM_Start+0xa2>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f50:	e003      	b.n	8003f5a <HAL_TIM_PWM_Start+0xaa>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2202      	movs	r2, #2
 8003f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	6839      	ldr	r1, [r7, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 fdb4 	bl	8004ad0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a23      	ldr	r2, [pc, #140]	; (8003ffc <HAL_TIM_PWM_Start+0x14c>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d107      	bne.n	8003f82 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a1d      	ldr	r2, [pc, #116]	; (8003ffc <HAL_TIM_PWM_Start+0x14c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d018      	beq.n	8003fbe <HAL_TIM_PWM_Start+0x10e>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f94:	d013      	beq.n	8003fbe <HAL_TIM_PWM_Start+0x10e>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a19      	ldr	r2, [pc, #100]	; (8004000 <HAL_TIM_PWM_Start+0x150>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d00e      	beq.n	8003fbe <HAL_TIM_PWM_Start+0x10e>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a17      	ldr	r2, [pc, #92]	; (8004004 <HAL_TIM_PWM_Start+0x154>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d009      	beq.n	8003fbe <HAL_TIM_PWM_Start+0x10e>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a16      	ldr	r2, [pc, #88]	; (8004008 <HAL_TIM_PWM_Start+0x158>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d004      	beq.n	8003fbe <HAL_TIM_PWM_Start+0x10e>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a14      	ldr	r2, [pc, #80]	; (800400c <HAL_TIM_PWM_Start+0x15c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d111      	bne.n	8003fe2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2b06      	cmp	r3, #6
 8003fce:	d010      	beq.n	8003ff2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 0201 	orr.w	r2, r2, #1
 8003fde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe0:	e007      	b.n	8003ff2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f042 0201 	orr.w	r2, r2, #1
 8003ff0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	40010000 	.word	0x40010000
 8004000:	40000400 	.word	0x40000400
 8004004:	40000800 	.word	0x40000800
 8004008:	40000c00 	.word	0x40000c00
 800400c:	40014000 	.word	0x40014000

08004010 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b02      	cmp	r3, #2
 8004024:	d122      	bne.n	800406c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b02      	cmp	r3, #2
 8004032:	d11b      	bne.n	800406c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f06f 0202 	mvn.w	r2, #2
 800403c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 fa77 	bl	8004546 <HAL_TIM_IC_CaptureCallback>
 8004058:	e005      	b.n	8004066 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 fa69 	bl	8004532 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 fa7a 	bl	800455a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	f003 0304 	and.w	r3, r3, #4
 8004076:	2b04      	cmp	r3, #4
 8004078:	d122      	bne.n	80040c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f003 0304 	and.w	r3, r3, #4
 8004084:	2b04      	cmp	r3, #4
 8004086:	d11b      	bne.n	80040c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f06f 0204 	mvn.w	r2, #4
 8004090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2202      	movs	r2, #2
 8004096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 fa4d 	bl	8004546 <HAL_TIM_IC_CaptureCallback>
 80040ac:	e005      	b.n	80040ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 fa3f 	bl	8004532 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 fa50 	bl	800455a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	f003 0308 	and.w	r3, r3, #8
 80040ca:	2b08      	cmp	r3, #8
 80040cc:	d122      	bne.n	8004114 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	f003 0308 	and.w	r3, r3, #8
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d11b      	bne.n	8004114 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f06f 0208 	mvn.w	r2, #8
 80040e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2204      	movs	r2, #4
 80040ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 fa23 	bl	8004546 <HAL_TIM_IC_CaptureCallback>
 8004100:	e005      	b.n	800410e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 fa15 	bl	8004532 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 fa26 	bl	800455a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f003 0310 	and.w	r3, r3, #16
 800411e:	2b10      	cmp	r3, #16
 8004120:	d122      	bne.n	8004168 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f003 0310 	and.w	r3, r3, #16
 800412c:	2b10      	cmp	r3, #16
 800412e:	d11b      	bne.n	8004168 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f06f 0210 	mvn.w	r2, #16
 8004138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2208      	movs	r2, #8
 800413e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f9f9 	bl	8004546 <HAL_TIM_IC_CaptureCallback>
 8004154:	e005      	b.n	8004162 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f9eb 	bl	8004532 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f9fc 	bl	800455a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b01      	cmp	r3, #1
 8004174:	d10e      	bne.n	8004194 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b01      	cmp	r3, #1
 8004182:	d107      	bne.n	8004194 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f06f 0201 	mvn.w	r2, #1
 800418c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7fd fb24 	bl	80017dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419e:	2b80      	cmp	r3, #128	; 0x80
 80041a0:	d10e      	bne.n	80041c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ac:	2b80      	cmp	r3, #128	; 0x80
 80041ae:	d107      	bne.n	80041c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 fd26 	bl	8004c0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ca:	2b40      	cmp	r3, #64	; 0x40
 80041cc:	d10e      	bne.n	80041ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d8:	2b40      	cmp	r3, #64	; 0x40
 80041da:	d107      	bne.n	80041ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f9c1 	bl	800456e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f003 0320 	and.w	r3, r3, #32
 80041f6:	2b20      	cmp	r3, #32
 80041f8:	d10e      	bne.n	8004218 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f003 0320 	and.w	r3, r3, #32
 8004204:	2b20      	cmp	r3, #32
 8004206:	d107      	bne.n	8004218 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f06f 0220 	mvn.w	r2, #32
 8004210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 fcf0 	bl	8004bf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004218:	bf00      	nop
 800421a:	3708      	adds	r7, #8
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800422c:	2300      	movs	r3, #0
 800422e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004236:	2b01      	cmp	r3, #1
 8004238:	d101      	bne.n	800423e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800423a:	2302      	movs	r3, #2
 800423c:	e0ae      	b.n	800439c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b0c      	cmp	r3, #12
 800424a:	f200 809f 	bhi.w	800438c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800424e:	a201      	add	r2, pc, #4	; (adr r2, 8004254 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004254:	08004289 	.word	0x08004289
 8004258:	0800438d 	.word	0x0800438d
 800425c:	0800438d 	.word	0x0800438d
 8004260:	0800438d 	.word	0x0800438d
 8004264:	080042c9 	.word	0x080042c9
 8004268:	0800438d 	.word	0x0800438d
 800426c:	0800438d 	.word	0x0800438d
 8004270:	0800438d 	.word	0x0800438d
 8004274:	0800430b 	.word	0x0800430b
 8004278:	0800438d 	.word	0x0800438d
 800427c:	0800438d 	.word	0x0800438d
 8004280:	0800438d 	.word	0x0800438d
 8004284:	0800434b 	.word	0x0800434b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68b9      	ldr	r1, [r7, #8]
 800428e:	4618      	mov	r0, r3
 8004290:	f000 f9f8 	bl	8004684 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	699a      	ldr	r2, [r3, #24]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0208 	orr.w	r2, r2, #8
 80042a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	699a      	ldr	r2, [r3, #24]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 0204 	bic.w	r2, r2, #4
 80042b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6999      	ldr	r1, [r3, #24]
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	691a      	ldr	r2, [r3, #16]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	619a      	str	r2, [r3, #24]
      break;
 80042c6:	e064      	b.n	8004392 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68b9      	ldr	r1, [r7, #8]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 fa3e 	bl	8004750 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	699a      	ldr	r2, [r3, #24]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	699a      	ldr	r2, [r3, #24]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6999      	ldr	r1, [r3, #24]
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	021a      	lsls	r2, r3, #8
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	619a      	str	r2, [r3, #24]
      break;
 8004308:	e043      	b.n	8004392 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68b9      	ldr	r1, [r7, #8]
 8004310:	4618      	mov	r0, r3
 8004312:	f000 fa89 	bl	8004828 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	69da      	ldr	r2, [r3, #28]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f042 0208 	orr.w	r2, r2, #8
 8004324:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	69da      	ldr	r2, [r3, #28]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0204 	bic.w	r2, r2, #4
 8004334:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	69d9      	ldr	r1, [r3, #28]
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	691a      	ldr	r2, [r3, #16]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	61da      	str	r2, [r3, #28]
      break;
 8004348:	e023      	b.n	8004392 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68b9      	ldr	r1, [r7, #8]
 8004350:	4618      	mov	r0, r3
 8004352:	f000 fad3 	bl	80048fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	69da      	ldr	r2, [r3, #28]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004364:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	69da      	ldr	r2, [r3, #28]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004374:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	69d9      	ldr	r1, [r3, #28]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	021a      	lsls	r2, r3, #8
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	430a      	orrs	r2, r1
 8004388:	61da      	str	r2, [r3, #28]
      break;
 800438a:	e002      	b.n	8004392 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	75fb      	strb	r3, [r7, #23]
      break;
 8004390:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800439a:	7dfb      	ldrb	r3, [r7, #23]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3718      	adds	r7, #24
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043ae:	2300      	movs	r3, #0
 80043b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d101      	bne.n	80043c0 <HAL_TIM_ConfigClockSource+0x1c>
 80043bc:	2302      	movs	r3, #2
 80043be:	e0b4      	b.n	800452a <HAL_TIM_ConfigClockSource+0x186>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2202      	movs	r2, #2
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68ba      	ldr	r2, [r7, #8]
 80043ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043f8:	d03e      	beq.n	8004478 <HAL_TIM_ConfigClockSource+0xd4>
 80043fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043fe:	f200 8087 	bhi.w	8004510 <HAL_TIM_ConfigClockSource+0x16c>
 8004402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004406:	f000 8086 	beq.w	8004516 <HAL_TIM_ConfigClockSource+0x172>
 800440a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800440e:	d87f      	bhi.n	8004510 <HAL_TIM_ConfigClockSource+0x16c>
 8004410:	2b70      	cmp	r3, #112	; 0x70
 8004412:	d01a      	beq.n	800444a <HAL_TIM_ConfigClockSource+0xa6>
 8004414:	2b70      	cmp	r3, #112	; 0x70
 8004416:	d87b      	bhi.n	8004510 <HAL_TIM_ConfigClockSource+0x16c>
 8004418:	2b60      	cmp	r3, #96	; 0x60
 800441a:	d050      	beq.n	80044be <HAL_TIM_ConfigClockSource+0x11a>
 800441c:	2b60      	cmp	r3, #96	; 0x60
 800441e:	d877      	bhi.n	8004510 <HAL_TIM_ConfigClockSource+0x16c>
 8004420:	2b50      	cmp	r3, #80	; 0x50
 8004422:	d03c      	beq.n	800449e <HAL_TIM_ConfigClockSource+0xfa>
 8004424:	2b50      	cmp	r3, #80	; 0x50
 8004426:	d873      	bhi.n	8004510 <HAL_TIM_ConfigClockSource+0x16c>
 8004428:	2b40      	cmp	r3, #64	; 0x40
 800442a:	d058      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x13a>
 800442c:	2b40      	cmp	r3, #64	; 0x40
 800442e:	d86f      	bhi.n	8004510 <HAL_TIM_ConfigClockSource+0x16c>
 8004430:	2b30      	cmp	r3, #48	; 0x30
 8004432:	d064      	beq.n	80044fe <HAL_TIM_ConfigClockSource+0x15a>
 8004434:	2b30      	cmp	r3, #48	; 0x30
 8004436:	d86b      	bhi.n	8004510 <HAL_TIM_ConfigClockSource+0x16c>
 8004438:	2b20      	cmp	r3, #32
 800443a:	d060      	beq.n	80044fe <HAL_TIM_ConfigClockSource+0x15a>
 800443c:	2b20      	cmp	r3, #32
 800443e:	d867      	bhi.n	8004510 <HAL_TIM_ConfigClockSource+0x16c>
 8004440:	2b00      	cmp	r3, #0
 8004442:	d05c      	beq.n	80044fe <HAL_TIM_ConfigClockSource+0x15a>
 8004444:	2b10      	cmp	r3, #16
 8004446:	d05a      	beq.n	80044fe <HAL_TIM_ConfigClockSource+0x15a>
 8004448:	e062      	b.n	8004510 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6818      	ldr	r0, [r3, #0]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	6899      	ldr	r1, [r3, #8]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f000 fb19 	bl	8004a90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800446c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	609a      	str	r2, [r3, #8]
      break;
 8004476:	e04f      	b.n	8004518 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6818      	ldr	r0, [r3, #0]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	6899      	ldr	r1, [r3, #8]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f000 fb02 	bl	8004a90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689a      	ldr	r2, [r3, #8]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800449a:	609a      	str	r2, [r3, #8]
      break;
 800449c:	e03c      	b.n	8004518 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6818      	ldr	r0, [r3, #0]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	6859      	ldr	r1, [r3, #4]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	461a      	mov	r2, r3
 80044ac:	f000 fa76 	bl	800499c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2150      	movs	r1, #80	; 0x50
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 facf 	bl	8004a5a <TIM_ITRx_SetConfig>
      break;
 80044bc:	e02c      	b.n	8004518 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6818      	ldr	r0, [r3, #0]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	6859      	ldr	r1, [r3, #4]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	461a      	mov	r2, r3
 80044cc:	f000 fa95 	bl	80049fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2160      	movs	r1, #96	; 0x60
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 fabf 	bl	8004a5a <TIM_ITRx_SetConfig>
      break;
 80044dc:	e01c      	b.n	8004518 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6818      	ldr	r0, [r3, #0]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	6859      	ldr	r1, [r3, #4]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	461a      	mov	r2, r3
 80044ec:	f000 fa56 	bl	800499c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2140      	movs	r1, #64	; 0x40
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 faaf 	bl	8004a5a <TIM_ITRx_SetConfig>
      break;
 80044fc:	e00c      	b.n	8004518 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4619      	mov	r1, r3
 8004508:	4610      	mov	r0, r2
 800450a:	f000 faa6 	bl	8004a5a <TIM_ITRx_SetConfig>
      break;
 800450e:	e003      	b.n	8004518 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	73fb      	strb	r3, [r7, #15]
      break;
 8004514:	e000      	b.n	8004518 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004516:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004528:	7bfb      	ldrb	r3, [r7, #15]
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004532:	b480      	push	{r7}
 8004534:	b083      	sub	sp, #12
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800453a:	bf00      	nop
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004546:	b480      	push	{r7}
 8004548:	b083      	sub	sp, #12
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800454e:	bf00      	nop
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004562:	bf00      	nop
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800456e:	b480      	push	{r7}
 8004570:	b083      	sub	sp, #12
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004576:	bf00      	nop
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
	...

08004584 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a34      	ldr	r2, [pc, #208]	; (8004668 <TIM_Base_SetConfig+0xe4>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d00f      	beq.n	80045bc <TIM_Base_SetConfig+0x38>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a2:	d00b      	beq.n	80045bc <TIM_Base_SetConfig+0x38>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a31      	ldr	r2, [pc, #196]	; (800466c <TIM_Base_SetConfig+0xe8>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d007      	beq.n	80045bc <TIM_Base_SetConfig+0x38>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a30      	ldr	r2, [pc, #192]	; (8004670 <TIM_Base_SetConfig+0xec>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d003      	beq.n	80045bc <TIM_Base_SetConfig+0x38>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a2f      	ldr	r2, [pc, #188]	; (8004674 <TIM_Base_SetConfig+0xf0>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d108      	bne.n	80045ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a25      	ldr	r2, [pc, #148]	; (8004668 <TIM_Base_SetConfig+0xe4>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d01b      	beq.n	800460e <TIM_Base_SetConfig+0x8a>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045dc:	d017      	beq.n	800460e <TIM_Base_SetConfig+0x8a>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a22      	ldr	r2, [pc, #136]	; (800466c <TIM_Base_SetConfig+0xe8>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d013      	beq.n	800460e <TIM_Base_SetConfig+0x8a>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a21      	ldr	r2, [pc, #132]	; (8004670 <TIM_Base_SetConfig+0xec>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d00f      	beq.n	800460e <TIM_Base_SetConfig+0x8a>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a20      	ldr	r2, [pc, #128]	; (8004674 <TIM_Base_SetConfig+0xf0>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d00b      	beq.n	800460e <TIM_Base_SetConfig+0x8a>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a1f      	ldr	r2, [pc, #124]	; (8004678 <TIM_Base_SetConfig+0xf4>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d007      	beq.n	800460e <TIM_Base_SetConfig+0x8a>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a1e      	ldr	r2, [pc, #120]	; (800467c <TIM_Base_SetConfig+0xf8>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d003      	beq.n	800460e <TIM_Base_SetConfig+0x8a>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a1d      	ldr	r2, [pc, #116]	; (8004680 <TIM_Base_SetConfig+0xfc>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d108      	bne.n	8004620 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004614:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	4313      	orrs	r3, r2
 800461e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	4313      	orrs	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a08      	ldr	r2, [pc, #32]	; (8004668 <TIM_Base_SetConfig+0xe4>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d103      	bne.n	8004654 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	691a      	ldr	r2, [r3, #16]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	615a      	str	r2, [r3, #20]
}
 800465a:	bf00      	nop
 800465c:	3714      	adds	r7, #20
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	40010000 	.word	0x40010000
 800466c:	40000400 	.word	0x40000400
 8004670:	40000800 	.word	0x40000800
 8004674:	40000c00 	.word	0x40000c00
 8004678:	40014000 	.word	0x40014000
 800467c:	40014400 	.word	0x40014400
 8004680:	40014800 	.word	0x40014800

08004684 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004684:	b480      	push	{r7}
 8004686:	b087      	sub	sp, #28
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	f023 0201 	bic.w	r2, r3, #1
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f023 0303 	bic.w	r3, r3, #3
 80046ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f023 0302 	bic.w	r3, r3, #2
 80046cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a1c      	ldr	r2, [pc, #112]	; (800474c <TIM_OC1_SetConfig+0xc8>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d10c      	bne.n	80046fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f023 0308 	bic.w	r3, r3, #8
 80046e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f023 0304 	bic.w	r3, r3, #4
 80046f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a13      	ldr	r2, [pc, #76]	; (800474c <TIM_OC1_SetConfig+0xc8>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d111      	bne.n	8004726 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004708:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004710:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	4313      	orrs	r3, r2
 800471a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	4313      	orrs	r3, r2
 8004724:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685a      	ldr	r2, [r3, #4]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	621a      	str	r2, [r3, #32]
}
 8004740:	bf00      	nop
 8004742:	371c      	adds	r7, #28
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	40010000 	.word	0x40010000

08004750 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004750:	b480      	push	{r7}
 8004752:	b087      	sub	sp, #28
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	f023 0210 	bic.w	r2, r3, #16
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800477e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004786:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	021b      	lsls	r3, r3, #8
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	4313      	orrs	r3, r2
 8004792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f023 0320 	bic.w	r3, r3, #32
 800479a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	011b      	lsls	r3, r3, #4
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a1e      	ldr	r2, [pc, #120]	; (8004824 <TIM_OC2_SetConfig+0xd4>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d10d      	bne.n	80047cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a15      	ldr	r2, [pc, #84]	; (8004824 <TIM_OC2_SetConfig+0xd4>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d113      	bne.n	80047fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	621a      	str	r2, [r3, #32]
}
 8004816:	bf00      	nop
 8004818:	371c      	adds	r7, #28
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	40010000 	.word	0x40010000

08004828 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004828:	b480      	push	{r7}
 800482a:	b087      	sub	sp, #28
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f023 0303 	bic.w	r3, r3, #3
 800485e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	4313      	orrs	r3, r2
 8004868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	021b      	lsls	r3, r3, #8
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	4313      	orrs	r3, r2
 800487c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a1d      	ldr	r2, [pc, #116]	; (80048f8 <TIM_OC3_SetConfig+0xd0>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d10d      	bne.n	80048a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800488c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	021b      	lsls	r3, r3, #8
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	4313      	orrs	r3, r2
 8004898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a14      	ldr	r2, [pc, #80]	; (80048f8 <TIM_OC3_SetConfig+0xd0>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d113      	bne.n	80048d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	011b      	lsls	r3, r3, #4
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	011b      	lsls	r3, r3, #4
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	685a      	ldr	r2, [r3, #4]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	621a      	str	r2, [r3, #32]
}
 80048ec:	bf00      	nop
 80048ee:	371c      	adds	r7, #28
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	40010000 	.word	0x40010000

080048fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b087      	sub	sp, #28
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800492a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004932:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	021b      	lsls	r3, r3, #8
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	4313      	orrs	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004946:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	031b      	lsls	r3, r3, #12
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	4313      	orrs	r3, r2
 8004952:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a10      	ldr	r2, [pc, #64]	; (8004998 <TIM_OC4_SetConfig+0x9c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d109      	bne.n	8004970 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004962:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	019b      	lsls	r3, r3, #6
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	4313      	orrs	r3, r2
 800496e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	621a      	str	r2, [r3, #32]
}
 800498a:	bf00      	nop
 800498c:	371c      	adds	r7, #28
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	40010000 	.word	0x40010000

0800499c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800499c:	b480      	push	{r7}
 800499e:	b087      	sub	sp, #28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	f023 0201 	bic.w	r2, r3, #1
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	011b      	lsls	r3, r3, #4
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f023 030a 	bic.w	r3, r3, #10
 80049d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	4313      	orrs	r3, r2
 80049e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	621a      	str	r2, [r3, #32]
}
 80049ee:	bf00      	nop
 80049f0:	371c      	adds	r7, #28
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr

080049fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049fa:	b480      	push	{r7}
 80049fc:	b087      	sub	sp, #28
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	60f8      	str	r0, [r7, #12]
 8004a02:	60b9      	str	r1, [r7, #8]
 8004a04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	f023 0210 	bic.w	r2, r3, #16
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	031b      	lsls	r3, r3, #12
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	011b      	lsls	r3, r3, #4
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	621a      	str	r2, [r3, #32]
}
 8004a4e:	bf00      	nop
 8004a50:	371c      	adds	r7, #28
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr

08004a5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b085      	sub	sp, #20
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
 8004a62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	f043 0307 	orr.w	r3, r3, #7
 8004a7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	609a      	str	r2, [r3, #8]
}
 8004a84:	bf00      	nop
 8004a86:	3714      	adds	r7, #20
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b087      	sub	sp, #28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
 8004a9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004aaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	021a      	lsls	r2, r3, #8
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	609a      	str	r2, [r3, #8]
}
 8004ac4:	bf00      	nop
 8004ac6:	371c      	adds	r7, #28
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	f003 031f 	and.w	r3, r3, #31
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6a1a      	ldr	r2, [r3, #32]
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	43db      	mvns	r3, r3
 8004af2:	401a      	ands	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6a1a      	ldr	r2, [r3, #32]
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	f003 031f 	and.w	r3, r3, #31
 8004b02:	6879      	ldr	r1, [r7, #4]
 8004b04:	fa01 f303 	lsl.w	r3, r1, r3
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	621a      	str	r2, [r3, #32]
}
 8004b0e:	bf00      	nop
 8004b10:	371c      	adds	r7, #28
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
	...

08004b1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d101      	bne.n	8004b34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b30:	2302      	movs	r3, #2
 8004b32:	e050      	b.n	8004bd6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a1c      	ldr	r2, [pc, #112]	; (8004be4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d018      	beq.n	8004baa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b80:	d013      	beq.n	8004baa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a18      	ldr	r2, [pc, #96]	; (8004be8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d00e      	beq.n	8004baa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a16      	ldr	r2, [pc, #88]	; (8004bec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d009      	beq.n	8004baa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a15      	ldr	r2, [pc, #84]	; (8004bf0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d004      	beq.n	8004baa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a13      	ldr	r2, [pc, #76]	; (8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d10c      	bne.n	8004bc4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	40010000 	.word	0x40010000
 8004be8:	40000400 	.word	0x40000400
 8004bec:	40000800 	.word	0x40000800
 8004bf0:	40000c00 	.word	0x40000c00
 8004bf4:	40014000 	.word	0x40014000

08004bf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e03f      	b.n	8004cb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d106      	bne.n	8004c4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7fd f9bc 	bl	8001fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2224      	movs	r2, #36	; 0x24
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68da      	ldr	r2, [r3, #12]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 fddf 	bl	8005828 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	691a      	ldr	r2, [r3, #16]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	695a      	ldr	r2, [r3, #20]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68da      	ldr	r2, [r3, #12]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2220      	movs	r2, #32
 8004cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b08a      	sub	sp, #40	; 0x28
 8004cbe:	af02      	add	r7, sp, #8
 8004cc0:	60f8      	str	r0, [r7, #12]
 8004cc2:	60b9      	str	r1, [r7, #8]
 8004cc4:	603b      	str	r3, [r7, #0]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b20      	cmp	r3, #32
 8004cd8:	d17c      	bne.n	8004dd4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d002      	beq.n	8004ce6 <HAL_UART_Transmit+0x2c>
 8004ce0:	88fb      	ldrh	r3, [r7, #6]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e075      	b.n	8004dd6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d101      	bne.n	8004cf8 <HAL_UART_Transmit+0x3e>
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	e06e      	b.n	8004dd6 <HAL_UART_Transmit+0x11c>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2221      	movs	r2, #33	; 0x21
 8004d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d0e:	f7fd fb4b 	bl	80023a8 <HAL_GetTick>
 8004d12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	88fa      	ldrh	r2, [r7, #6]
 8004d18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	88fa      	ldrh	r2, [r7, #6]
 8004d1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d28:	d108      	bne.n	8004d3c <HAL_UART_Transmit+0x82>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d104      	bne.n	8004d3c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004d32:	2300      	movs	r3, #0
 8004d34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	61bb      	str	r3, [r7, #24]
 8004d3a:	e003      	b.n	8004d44 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d40:	2300      	movs	r3, #0
 8004d42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004d4c:	e02a      	b.n	8004da4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	2200      	movs	r2, #0
 8004d56:	2180      	movs	r1, #128	; 0x80
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 fb1f 	bl	800539c <UART_WaitOnFlagUntilTimeout>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d001      	beq.n	8004d68 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e036      	b.n	8004dd6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10b      	bne.n	8004d86 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	461a      	mov	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	3302      	adds	r3, #2
 8004d82:	61bb      	str	r3, [r7, #24]
 8004d84:	e007      	b.n	8004d96 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	781a      	ldrb	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	3301      	adds	r3, #1
 8004d94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1cf      	bne.n	8004d4e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	2200      	movs	r2, #0
 8004db6:	2140      	movs	r1, #64	; 0x40
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 faef 	bl	800539c <UART_WaitOnFlagUntilTimeout>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d001      	beq.n	8004dc8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e006      	b.n	8004dd6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	e000      	b.n	8004dd6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004dd4:	2302      	movs	r3, #2
  }
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3720      	adds	r7, #32
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b084      	sub	sp, #16
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	60f8      	str	r0, [r7, #12]
 8004de6:	60b9      	str	r1, [r7, #8]
 8004de8:	4613      	mov	r3, r2
 8004dea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b20      	cmp	r3, #32
 8004df6:	d11d      	bne.n	8004e34 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d002      	beq.n	8004e04 <HAL_UART_Receive_IT+0x26>
 8004dfe:	88fb      	ldrh	r3, [r7, #6]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d101      	bne.n	8004e08 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e016      	b.n	8004e36 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d101      	bne.n	8004e16 <HAL_UART_Receive_IT+0x38>
 8004e12:	2302      	movs	r3, #2
 8004e14:	e00f      	b.n	8004e36 <HAL_UART_Receive_IT+0x58>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004e24:	88fb      	ldrh	r3, [r7, #6]
 8004e26:	461a      	mov	r2, r3
 8004e28:	68b9      	ldr	r1, [r7, #8]
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f000 fb24 	bl	8005478 <UART_Start_Receive_IT>
 8004e30:	4603      	mov	r3, r0
 8004e32:	e000      	b.n	8004e36 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004e34:	2302      	movs	r3, #2
  }
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
	...

08004e40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b0ba      	sub	sp, #232	; 0xe8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e76:	f003 030f 	and.w	r3, r3, #15
 8004e7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004e7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10f      	bne.n	8004ea6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e8a:	f003 0320 	and.w	r3, r3, #32
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d009      	beq.n	8004ea6 <HAL_UART_IRQHandler+0x66>
 8004e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e96:	f003 0320 	and.w	r3, r3, #32
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 fc07 	bl	80056b2 <UART_Receive_IT>
      return;
 8004ea4:	e256      	b.n	8005354 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004ea6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 80de 	beq.w	800506c <HAL_UART_IRQHandler+0x22c>
 8004eb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d106      	bne.n	8004eca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ec0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 80d1 	beq.w	800506c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00b      	beq.n	8004eee <HAL_UART_IRQHandler+0xae>
 8004ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d005      	beq.n	8004eee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	f043 0201 	orr.w	r2, r3, #1
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ef2:	f003 0304 	and.w	r3, r3, #4
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00b      	beq.n	8004f12 <HAL_UART_IRQHandler+0xd2>
 8004efa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d005      	beq.n	8004f12 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	f043 0202 	orr.w	r2, r3, #2
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00b      	beq.n	8004f36 <HAL_UART_IRQHandler+0xf6>
 8004f1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d005      	beq.n	8004f36 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2e:	f043 0204 	orr.w	r2, r3, #4
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f3a:	f003 0308 	and.w	r3, r3, #8
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d011      	beq.n	8004f66 <HAL_UART_IRQHandler+0x126>
 8004f42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f46:	f003 0320 	and.w	r3, r3, #32
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d105      	bne.n	8004f5a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d005      	beq.n	8004f66 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5e:	f043 0208 	orr.w	r2, r3, #8
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f000 81ed 	beq.w	800534a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f74:	f003 0320 	and.w	r3, r3, #32
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d008      	beq.n	8004f8e <HAL_UART_IRQHandler+0x14e>
 8004f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f80:	f003 0320 	and.w	r3, r3, #32
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d002      	beq.n	8004f8e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 fb92 	bl	80056b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f98:	2b40      	cmp	r3, #64	; 0x40
 8004f9a:	bf0c      	ite	eq
 8004f9c:	2301      	moveq	r3, #1
 8004f9e:	2300      	movne	r3, #0
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004faa:	f003 0308 	and.w	r3, r3, #8
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d103      	bne.n	8004fba <HAL_UART_IRQHandler+0x17a>
 8004fb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d04f      	beq.n	800505a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 fa9a 	bl	80054f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fca:	2b40      	cmp	r3, #64	; 0x40
 8004fcc:	d141      	bne.n	8005052 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	3314      	adds	r3, #20
 8004fd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fdc:	e853 3f00 	ldrex	r3, [r3]
 8004fe0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004fe4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fe8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	3314      	adds	r3, #20
 8004ff6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004ffa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004ffe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005002:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005006:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800500a:	e841 2300 	strex	r3, r2, [r1]
 800500e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005012:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1d9      	bne.n	8004fce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501e:	2b00      	cmp	r3, #0
 8005020:	d013      	beq.n	800504a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005026:	4a7d      	ldr	r2, [pc, #500]	; (800521c <HAL_UART_IRQHandler+0x3dc>)
 8005028:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502e:	4618      	mov	r0, r3
 8005030:	f7fd ff4d 	bl	8002ece <HAL_DMA_Abort_IT>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d016      	beq.n	8005068 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005044:	4610      	mov	r0, r2
 8005046:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005048:	e00e      	b.n	8005068 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f990 	bl	8005370 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005050:	e00a      	b.n	8005068 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f98c 	bl	8005370 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005058:	e006      	b.n	8005068 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f988 	bl	8005370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005066:	e170      	b.n	800534a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005068:	bf00      	nop
    return;
 800506a:	e16e      	b.n	800534a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005070:	2b01      	cmp	r3, #1
 8005072:	f040 814a 	bne.w	800530a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800507a:	f003 0310 	and.w	r3, r3, #16
 800507e:	2b00      	cmp	r3, #0
 8005080:	f000 8143 	beq.w	800530a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005088:	f003 0310 	and.w	r3, r3, #16
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 813c 	beq.w	800530a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005092:	2300      	movs	r3, #0
 8005094:	60bb      	str	r3, [r7, #8]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	60bb      	str	r3, [r7, #8]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	60bb      	str	r3, [r7, #8]
 80050a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b2:	2b40      	cmp	r3, #64	; 0x40
 80050b4:	f040 80b4 	bne.w	8005220 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f000 8140 	beq.w	800534e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050d6:	429a      	cmp	r2, r3
 80050d8:	f080 8139 	bcs.w	800534e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e8:	69db      	ldr	r3, [r3, #28]
 80050ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ee:	f000 8088 	beq.w	8005202 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	330c      	adds	r3, #12
 80050f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005100:	e853 3f00 	ldrex	r3, [r3]
 8005104:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005108:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800510c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005110:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	330c      	adds	r3, #12
 800511a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800511e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005122:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005126:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800512a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800512e:	e841 2300 	strex	r3, r2, [r1]
 8005132:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005136:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1d9      	bne.n	80050f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	3314      	adds	r3, #20
 8005144:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005146:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005148:	e853 3f00 	ldrex	r3, [r3]
 800514c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800514e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005150:	f023 0301 	bic.w	r3, r3, #1
 8005154:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	3314      	adds	r3, #20
 800515e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005162:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005166:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005168:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800516a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800516e:	e841 2300 	strex	r3, r2, [r1]
 8005172:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005174:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1e1      	bne.n	800513e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	3314      	adds	r3, #20
 8005180:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005182:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005184:	e853 3f00 	ldrex	r3, [r3]
 8005188:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800518a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800518c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005190:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	3314      	adds	r3, #20
 800519a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800519e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80051a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80051a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80051a6:	e841 2300 	strex	r3, r2, [r1]
 80051aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80051ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1e3      	bne.n	800517a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2220      	movs	r2, #32
 80051b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	330c      	adds	r3, #12
 80051c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ca:	e853 3f00 	ldrex	r3, [r3]
 80051ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80051d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051d2:	f023 0310 	bic.w	r3, r3, #16
 80051d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	330c      	adds	r3, #12
 80051e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80051e4:	65ba      	str	r2, [r7, #88]	; 0x58
 80051e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051ec:	e841 2300 	strex	r3, r2, [r1]
 80051f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80051f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1e3      	bne.n	80051c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7fd fdf6 	bl	8002dee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800520a:	b29b      	uxth	r3, r3
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	b29b      	uxth	r3, r3
 8005210:	4619      	mov	r1, r3
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f8b6 	bl	8005384 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005218:	e099      	b.n	800534e <HAL_UART_IRQHandler+0x50e>
 800521a:	bf00      	nop
 800521c:	080055bb 	.word	0x080055bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005228:	b29b      	uxth	r3, r3
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005234:	b29b      	uxth	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	f000 808b 	beq.w	8005352 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800523c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 8086 	beq.w	8005352 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	330c      	adds	r3, #12
 800524c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005250:	e853 3f00 	ldrex	r3, [r3]
 8005254:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005258:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800525c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	330c      	adds	r3, #12
 8005266:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800526a:	647a      	str	r2, [r7, #68]	; 0x44
 800526c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005270:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005272:	e841 2300 	strex	r3, r2, [r1]
 8005276:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1e3      	bne.n	8005246 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	3314      	adds	r3, #20
 8005284:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	e853 3f00 	ldrex	r3, [r3]
 800528c:	623b      	str	r3, [r7, #32]
   return(result);
 800528e:	6a3b      	ldr	r3, [r7, #32]
 8005290:	f023 0301 	bic.w	r3, r3, #1
 8005294:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	3314      	adds	r3, #20
 800529e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80052a2:	633a      	str	r2, [r7, #48]	; 0x30
 80052a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052aa:	e841 2300 	strex	r3, r2, [r1]
 80052ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1e3      	bne.n	800527e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2220      	movs	r2, #32
 80052ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	330c      	adds	r3, #12
 80052ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	e853 3f00 	ldrex	r3, [r3]
 80052d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f023 0310 	bic.w	r3, r3, #16
 80052da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	330c      	adds	r3, #12
 80052e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80052e8:	61fa      	str	r2, [r7, #28]
 80052ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ec:	69b9      	ldr	r1, [r7, #24]
 80052ee:	69fa      	ldr	r2, [r7, #28]
 80052f0:	e841 2300 	strex	r3, r2, [r1]
 80052f4:	617b      	str	r3, [r7, #20]
   return(result);
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1e3      	bne.n	80052c4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005300:	4619      	mov	r1, r3
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f83e 	bl	8005384 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005308:	e023      	b.n	8005352 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800530a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800530e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005312:	2b00      	cmp	r3, #0
 8005314:	d009      	beq.n	800532a <HAL_UART_IRQHandler+0x4ea>
 8005316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800531a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f95d 	bl	80055e2 <UART_Transmit_IT>
    return;
 8005328:	e014      	b.n	8005354 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800532a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800532e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00e      	beq.n	8005354 <HAL_UART_IRQHandler+0x514>
 8005336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800533a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533e:	2b00      	cmp	r3, #0
 8005340:	d008      	beq.n	8005354 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f99d 	bl	8005682 <UART_EndTransmit_IT>
    return;
 8005348:	e004      	b.n	8005354 <HAL_UART_IRQHandler+0x514>
    return;
 800534a:	bf00      	nop
 800534c:	e002      	b.n	8005354 <HAL_UART_IRQHandler+0x514>
      return;
 800534e:	bf00      	nop
 8005350:	e000      	b.n	8005354 <HAL_UART_IRQHandler+0x514>
      return;
 8005352:	bf00      	nop
  }
}
 8005354:	37e8      	adds	r7, #232	; 0xe8
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop

0800535c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	460b      	mov	r3, r1
 800538e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b090      	sub	sp, #64	; 0x40
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	603b      	str	r3, [r7, #0]
 80053a8:	4613      	mov	r3, r2
 80053aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053ac:	e050      	b.n	8005450 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b4:	d04c      	beq.n	8005450 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80053b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d007      	beq.n	80053cc <UART_WaitOnFlagUntilTimeout+0x30>
 80053bc:	f7fc fff4 	bl	80023a8 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d241      	bcs.n	8005450 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	330c      	adds	r3, #12
 80053d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d6:	e853 3f00 	ldrex	r3, [r3]
 80053da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	330c      	adds	r3, #12
 80053ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80053ec:	637a      	str	r2, [r7, #52]	; 0x34
 80053ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053f4:	e841 2300 	strex	r3, r2, [r1]
 80053f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80053fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1e5      	bne.n	80053cc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	3314      	adds	r3, #20
 8005406:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	e853 3f00 	ldrex	r3, [r3]
 800540e:	613b      	str	r3, [r7, #16]
   return(result);
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	f023 0301 	bic.w	r3, r3, #1
 8005416:	63bb      	str	r3, [r7, #56]	; 0x38
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	3314      	adds	r3, #20
 800541e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005420:	623a      	str	r2, [r7, #32]
 8005422:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005424:	69f9      	ldr	r1, [r7, #28]
 8005426:	6a3a      	ldr	r2, [r7, #32]
 8005428:	e841 2300 	strex	r3, r2, [r1]
 800542c:	61bb      	str	r3, [r7, #24]
   return(result);
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1e5      	bne.n	8005400 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2220      	movs	r2, #32
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2220      	movs	r2, #32
 8005440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e00f      	b.n	8005470 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	4013      	ands	r3, r2
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	429a      	cmp	r2, r3
 800545e:	bf0c      	ite	eq
 8005460:	2301      	moveq	r3, #1
 8005462:	2300      	movne	r3, #0
 8005464:	b2db      	uxtb	r3, r3
 8005466:	461a      	mov	r2, r3
 8005468:	79fb      	ldrb	r3, [r7, #7]
 800546a:	429a      	cmp	r2, r3
 800546c:	d09f      	beq.n	80053ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3740      	adds	r7, #64	; 0x40
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	4613      	mov	r3, r2
 8005484:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	88fa      	ldrh	r2, [r7, #6]
 8005490:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	88fa      	ldrh	r2, [r7, #6]
 8005496:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2222      	movs	r2, #34	; 0x22
 80054a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d007      	beq.n	80054c6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68da      	ldr	r2, [r3, #12]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054c4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	695a      	ldr	r2, [r3, #20]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f042 0201 	orr.w	r2, r2, #1
 80054d4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68da      	ldr	r2, [r3, #12]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f042 0220 	orr.w	r2, r2, #32
 80054e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3714      	adds	r7, #20
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b095      	sub	sp, #84	; 0x54
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	330c      	adds	r3, #12
 8005502:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005506:	e853 3f00 	ldrex	r3, [r3]
 800550a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800550c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005512:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	330c      	adds	r3, #12
 800551a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800551c:	643a      	str	r2, [r7, #64]	; 0x40
 800551e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005520:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005522:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005524:	e841 2300 	strex	r3, r2, [r1]
 8005528:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800552a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1e5      	bne.n	80054fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	3314      	adds	r3, #20
 8005536:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	e853 3f00 	ldrex	r3, [r3]
 800553e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	f023 0301 	bic.w	r3, r3, #1
 8005546:	64bb      	str	r3, [r7, #72]	; 0x48
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	3314      	adds	r3, #20
 800554e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005550:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005552:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005554:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005556:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005558:	e841 2300 	strex	r3, r2, [r1]
 800555c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	2b00      	cmp	r3, #0
 8005562:	d1e5      	bne.n	8005530 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005568:	2b01      	cmp	r3, #1
 800556a:	d119      	bne.n	80055a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	330c      	adds	r3, #12
 8005572:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	e853 3f00 	ldrex	r3, [r3]
 800557a:	60bb      	str	r3, [r7, #8]
   return(result);
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	f023 0310 	bic.w	r3, r3, #16
 8005582:	647b      	str	r3, [r7, #68]	; 0x44
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	330c      	adds	r3, #12
 800558a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800558c:	61ba      	str	r2, [r7, #24]
 800558e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005590:	6979      	ldr	r1, [r7, #20]
 8005592:	69ba      	ldr	r2, [r7, #24]
 8005594:	e841 2300 	strex	r3, r2, [r1]
 8005598:	613b      	str	r3, [r7, #16]
   return(result);
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1e5      	bne.n	800556c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2220      	movs	r2, #32
 80055a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80055ae:	bf00      	nop
 80055b0:	3754      	adds	r7, #84	; 0x54
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b084      	sub	sp, #16
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f7ff fecb 	bl	8005370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055da:	bf00      	nop
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b085      	sub	sp, #20
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	2b21      	cmp	r3, #33	; 0x21
 80055f4:	d13e      	bne.n	8005674 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055fe:	d114      	bne.n	800562a <UART_Transmit_IT+0x48>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d110      	bne.n	800562a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a1b      	ldr	r3, [r3, #32]
 800560c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	881b      	ldrh	r3, [r3, #0]
 8005612:	461a      	mov	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800561c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	1c9a      	adds	r2, r3, #2
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	621a      	str	r2, [r3, #32]
 8005628:	e008      	b.n	800563c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	1c59      	adds	r1, r3, #1
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	6211      	str	r1, [r2, #32]
 8005634:	781a      	ldrb	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005640:	b29b      	uxth	r3, r3
 8005642:	3b01      	subs	r3, #1
 8005644:	b29b      	uxth	r3, r3
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	4619      	mov	r1, r3
 800564a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800564c:	2b00      	cmp	r3, #0
 800564e:	d10f      	bne.n	8005670 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68da      	ldr	r2, [r3, #12]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800565e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68da      	ldr	r2, [r3, #12]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800566e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005670:	2300      	movs	r3, #0
 8005672:	e000      	b.n	8005676 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005674:	2302      	movs	r3, #2
  }
}
 8005676:	4618      	mov	r0, r3
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b082      	sub	sp, #8
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68da      	ldr	r2, [r3, #12]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005698:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2220      	movs	r2, #32
 800569e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7ff fe5a 	bl	800535c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b08c      	sub	sp, #48	; 0x30
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b22      	cmp	r3, #34	; 0x22
 80056c4:	f040 80ab 	bne.w	800581e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d0:	d117      	bne.n	8005702 <UART_Receive_IT+0x50>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d113      	bne.n	8005702 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80056da:	2300      	movs	r3, #0
 80056dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056fa:	1c9a      	adds	r2, r3, #2
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	629a      	str	r2, [r3, #40]	; 0x28
 8005700:	e026      	b.n	8005750 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005706:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005708:	2300      	movs	r3, #0
 800570a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005714:	d007      	beq.n	8005726 <UART_Receive_IT+0x74>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d10a      	bne.n	8005734 <UART_Receive_IT+0x82>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d106      	bne.n	8005734 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	b2da      	uxtb	r2, r3
 800572e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005730:	701a      	strb	r2, [r3, #0]
 8005732:	e008      	b.n	8005746 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	b2db      	uxtb	r3, r3
 800573c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005740:	b2da      	uxtb	r2, r3
 8005742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005744:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800574a:	1c5a      	adds	r2, r3, #1
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005754:	b29b      	uxth	r3, r3
 8005756:	3b01      	subs	r3, #1
 8005758:	b29b      	uxth	r3, r3
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	4619      	mov	r1, r3
 800575e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005760:	2b00      	cmp	r3, #0
 8005762:	d15a      	bne.n	800581a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f022 0220 	bic.w	r2, r2, #32
 8005772:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68da      	ldr	r2, [r3, #12]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005782:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	695a      	ldr	r2, [r3, #20]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f022 0201 	bic.w	r2, r2, #1
 8005792:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2220      	movs	r2, #32
 8005798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d135      	bne.n	8005810 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	330c      	adds	r3, #12
 80057b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	e853 3f00 	ldrex	r3, [r3]
 80057b8:	613b      	str	r3, [r7, #16]
   return(result);
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	f023 0310 	bic.w	r3, r3, #16
 80057c0:	627b      	str	r3, [r7, #36]	; 0x24
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	330c      	adds	r3, #12
 80057c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ca:	623a      	str	r2, [r7, #32]
 80057cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ce:	69f9      	ldr	r1, [r7, #28]
 80057d0:	6a3a      	ldr	r2, [r7, #32]
 80057d2:	e841 2300 	strex	r3, r2, [r1]
 80057d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1e5      	bne.n	80057aa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0310 	and.w	r3, r3, #16
 80057e8:	2b10      	cmp	r3, #16
 80057ea:	d10a      	bne.n	8005802 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057ec:	2300      	movs	r3, #0
 80057ee:	60fb      	str	r3, [r7, #12]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	60fb      	str	r3, [r7, #12]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	60fb      	str	r3, [r7, #12]
 8005800:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005806:	4619      	mov	r1, r3
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f7ff fdbb 	bl	8005384 <HAL_UARTEx_RxEventCallback>
 800580e:	e002      	b.n	8005816 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f7fb ff9f 	bl	8001754 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005816:	2300      	movs	r3, #0
 8005818:	e002      	b.n	8005820 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800581a:	2300      	movs	r3, #0
 800581c:	e000      	b.n	8005820 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800581e:	2302      	movs	r3, #2
  }
}
 8005820:	4618      	mov	r0, r3
 8005822:	3730      	adds	r7, #48	; 0x30
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800582c:	b0c0      	sub	sp, #256	; 0x100
 800582e:	af00      	add	r7, sp, #0
 8005830:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005844:	68d9      	ldr	r1, [r3, #12]
 8005846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	ea40 0301 	orr.w	r3, r0, r1
 8005850:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005856:	689a      	ldr	r2, [r3, #8]
 8005858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	431a      	orrs	r2, r3
 8005860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	431a      	orrs	r2, r3
 8005868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	4313      	orrs	r3, r2
 8005870:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005880:	f021 010c 	bic.w	r1, r1, #12
 8005884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800588e:	430b      	orrs	r3, r1
 8005890:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800589e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a2:	6999      	ldr	r1, [r3, #24]
 80058a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	ea40 0301 	orr.w	r3, r0, r1
 80058ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	4b8f      	ldr	r3, [pc, #572]	; (8005af4 <UART_SetConfig+0x2cc>)
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d005      	beq.n	80058c8 <UART_SetConfig+0xa0>
 80058bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	4b8d      	ldr	r3, [pc, #564]	; (8005af8 <UART_SetConfig+0x2d0>)
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d104      	bne.n	80058d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058c8:	f7fe f978 	bl	8003bbc <HAL_RCC_GetPCLK2Freq>
 80058cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80058d0:	e003      	b.n	80058da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058d2:	f7fe f95f 	bl	8003b94 <HAL_RCC_GetPCLK1Freq>
 80058d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058de:	69db      	ldr	r3, [r3, #28]
 80058e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058e4:	f040 810c 	bne.w	8005b00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058ec:	2200      	movs	r2, #0
 80058ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80058f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80058f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80058fa:	4622      	mov	r2, r4
 80058fc:	462b      	mov	r3, r5
 80058fe:	1891      	adds	r1, r2, r2
 8005900:	65b9      	str	r1, [r7, #88]	; 0x58
 8005902:	415b      	adcs	r3, r3
 8005904:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005906:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800590a:	4621      	mov	r1, r4
 800590c:	eb12 0801 	adds.w	r8, r2, r1
 8005910:	4629      	mov	r1, r5
 8005912:	eb43 0901 	adc.w	r9, r3, r1
 8005916:	f04f 0200 	mov.w	r2, #0
 800591a:	f04f 0300 	mov.w	r3, #0
 800591e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005922:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005926:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800592a:	4690      	mov	r8, r2
 800592c:	4699      	mov	r9, r3
 800592e:	4623      	mov	r3, r4
 8005930:	eb18 0303 	adds.w	r3, r8, r3
 8005934:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005938:	462b      	mov	r3, r5
 800593a:	eb49 0303 	adc.w	r3, r9, r3
 800593e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800594e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005952:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005956:	460b      	mov	r3, r1
 8005958:	18db      	adds	r3, r3, r3
 800595a:	653b      	str	r3, [r7, #80]	; 0x50
 800595c:	4613      	mov	r3, r2
 800595e:	eb42 0303 	adc.w	r3, r2, r3
 8005962:	657b      	str	r3, [r7, #84]	; 0x54
 8005964:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005968:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800596c:	f7fa fc90 	bl	8000290 <__aeabi_uldivmod>
 8005970:	4602      	mov	r2, r0
 8005972:	460b      	mov	r3, r1
 8005974:	4b61      	ldr	r3, [pc, #388]	; (8005afc <UART_SetConfig+0x2d4>)
 8005976:	fba3 2302 	umull	r2, r3, r3, r2
 800597a:	095b      	lsrs	r3, r3, #5
 800597c:	011c      	lsls	r4, r3, #4
 800597e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005982:	2200      	movs	r2, #0
 8005984:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005988:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800598c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005990:	4642      	mov	r2, r8
 8005992:	464b      	mov	r3, r9
 8005994:	1891      	adds	r1, r2, r2
 8005996:	64b9      	str	r1, [r7, #72]	; 0x48
 8005998:	415b      	adcs	r3, r3
 800599a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800599c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80059a0:	4641      	mov	r1, r8
 80059a2:	eb12 0a01 	adds.w	sl, r2, r1
 80059a6:	4649      	mov	r1, r9
 80059a8:	eb43 0b01 	adc.w	fp, r3, r1
 80059ac:	f04f 0200 	mov.w	r2, #0
 80059b0:	f04f 0300 	mov.w	r3, #0
 80059b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80059bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059c0:	4692      	mov	sl, r2
 80059c2:	469b      	mov	fp, r3
 80059c4:	4643      	mov	r3, r8
 80059c6:	eb1a 0303 	adds.w	r3, sl, r3
 80059ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059ce:	464b      	mov	r3, r9
 80059d0:	eb4b 0303 	adc.w	r3, fp, r3
 80059d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80059d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80059e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80059ec:	460b      	mov	r3, r1
 80059ee:	18db      	adds	r3, r3, r3
 80059f0:	643b      	str	r3, [r7, #64]	; 0x40
 80059f2:	4613      	mov	r3, r2
 80059f4:	eb42 0303 	adc.w	r3, r2, r3
 80059f8:	647b      	str	r3, [r7, #68]	; 0x44
 80059fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80059fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005a02:	f7fa fc45 	bl	8000290 <__aeabi_uldivmod>
 8005a06:	4602      	mov	r2, r0
 8005a08:	460b      	mov	r3, r1
 8005a0a:	4611      	mov	r1, r2
 8005a0c:	4b3b      	ldr	r3, [pc, #236]	; (8005afc <UART_SetConfig+0x2d4>)
 8005a0e:	fba3 2301 	umull	r2, r3, r3, r1
 8005a12:	095b      	lsrs	r3, r3, #5
 8005a14:	2264      	movs	r2, #100	; 0x64
 8005a16:	fb02 f303 	mul.w	r3, r2, r3
 8005a1a:	1acb      	subs	r3, r1, r3
 8005a1c:	00db      	lsls	r3, r3, #3
 8005a1e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005a22:	4b36      	ldr	r3, [pc, #216]	; (8005afc <UART_SetConfig+0x2d4>)
 8005a24:	fba3 2302 	umull	r2, r3, r3, r2
 8005a28:	095b      	lsrs	r3, r3, #5
 8005a2a:	005b      	lsls	r3, r3, #1
 8005a2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a30:	441c      	add	r4, r3
 8005a32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a36:	2200      	movs	r2, #0
 8005a38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a3c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005a40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005a44:	4642      	mov	r2, r8
 8005a46:	464b      	mov	r3, r9
 8005a48:	1891      	adds	r1, r2, r2
 8005a4a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a4c:	415b      	adcs	r3, r3
 8005a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a54:	4641      	mov	r1, r8
 8005a56:	1851      	adds	r1, r2, r1
 8005a58:	6339      	str	r1, [r7, #48]	; 0x30
 8005a5a:	4649      	mov	r1, r9
 8005a5c:	414b      	adcs	r3, r1
 8005a5e:	637b      	str	r3, [r7, #52]	; 0x34
 8005a60:	f04f 0200 	mov.w	r2, #0
 8005a64:	f04f 0300 	mov.w	r3, #0
 8005a68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005a6c:	4659      	mov	r1, fp
 8005a6e:	00cb      	lsls	r3, r1, #3
 8005a70:	4651      	mov	r1, sl
 8005a72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a76:	4651      	mov	r1, sl
 8005a78:	00ca      	lsls	r2, r1, #3
 8005a7a:	4610      	mov	r0, r2
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	4603      	mov	r3, r0
 8005a80:	4642      	mov	r2, r8
 8005a82:	189b      	adds	r3, r3, r2
 8005a84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a88:	464b      	mov	r3, r9
 8005a8a:	460a      	mov	r2, r1
 8005a8c:	eb42 0303 	adc.w	r3, r2, r3
 8005a90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005aa0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005aa4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	18db      	adds	r3, r3, r3
 8005aac:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aae:	4613      	mov	r3, r2
 8005ab0:	eb42 0303 	adc.w	r3, r2, r3
 8005ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ab6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005aba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005abe:	f7fa fbe7 	bl	8000290 <__aeabi_uldivmod>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	4b0d      	ldr	r3, [pc, #52]	; (8005afc <UART_SetConfig+0x2d4>)
 8005ac8:	fba3 1302 	umull	r1, r3, r3, r2
 8005acc:	095b      	lsrs	r3, r3, #5
 8005ace:	2164      	movs	r1, #100	; 0x64
 8005ad0:	fb01 f303 	mul.w	r3, r1, r3
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	00db      	lsls	r3, r3, #3
 8005ad8:	3332      	adds	r3, #50	; 0x32
 8005ada:	4a08      	ldr	r2, [pc, #32]	; (8005afc <UART_SetConfig+0x2d4>)
 8005adc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae0:	095b      	lsrs	r3, r3, #5
 8005ae2:	f003 0207 	and.w	r2, r3, #7
 8005ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4422      	add	r2, r4
 8005aee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005af0:	e106      	b.n	8005d00 <UART_SetConfig+0x4d8>
 8005af2:	bf00      	nop
 8005af4:	40011000 	.word	0x40011000
 8005af8:	40011400 	.word	0x40011400
 8005afc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b04:	2200      	movs	r2, #0
 8005b06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b0a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005b0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005b12:	4642      	mov	r2, r8
 8005b14:	464b      	mov	r3, r9
 8005b16:	1891      	adds	r1, r2, r2
 8005b18:	6239      	str	r1, [r7, #32]
 8005b1a:	415b      	adcs	r3, r3
 8005b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b22:	4641      	mov	r1, r8
 8005b24:	1854      	adds	r4, r2, r1
 8005b26:	4649      	mov	r1, r9
 8005b28:	eb43 0501 	adc.w	r5, r3, r1
 8005b2c:	f04f 0200 	mov.w	r2, #0
 8005b30:	f04f 0300 	mov.w	r3, #0
 8005b34:	00eb      	lsls	r3, r5, #3
 8005b36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b3a:	00e2      	lsls	r2, r4, #3
 8005b3c:	4614      	mov	r4, r2
 8005b3e:	461d      	mov	r5, r3
 8005b40:	4643      	mov	r3, r8
 8005b42:	18e3      	adds	r3, r4, r3
 8005b44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b48:	464b      	mov	r3, r9
 8005b4a:	eb45 0303 	adc.w	r3, r5, r3
 8005b4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b62:	f04f 0200 	mov.w	r2, #0
 8005b66:	f04f 0300 	mov.w	r3, #0
 8005b6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005b6e:	4629      	mov	r1, r5
 8005b70:	008b      	lsls	r3, r1, #2
 8005b72:	4621      	mov	r1, r4
 8005b74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b78:	4621      	mov	r1, r4
 8005b7a:	008a      	lsls	r2, r1, #2
 8005b7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005b80:	f7fa fb86 	bl	8000290 <__aeabi_uldivmod>
 8005b84:	4602      	mov	r2, r0
 8005b86:	460b      	mov	r3, r1
 8005b88:	4b60      	ldr	r3, [pc, #384]	; (8005d0c <UART_SetConfig+0x4e4>)
 8005b8a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b8e:	095b      	lsrs	r3, r3, #5
 8005b90:	011c      	lsls	r4, r3, #4
 8005b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b96:	2200      	movs	r2, #0
 8005b98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005ba0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005ba4:	4642      	mov	r2, r8
 8005ba6:	464b      	mov	r3, r9
 8005ba8:	1891      	adds	r1, r2, r2
 8005baa:	61b9      	str	r1, [r7, #24]
 8005bac:	415b      	adcs	r3, r3
 8005bae:	61fb      	str	r3, [r7, #28]
 8005bb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bb4:	4641      	mov	r1, r8
 8005bb6:	1851      	adds	r1, r2, r1
 8005bb8:	6139      	str	r1, [r7, #16]
 8005bba:	4649      	mov	r1, r9
 8005bbc:	414b      	adcs	r3, r1
 8005bbe:	617b      	str	r3, [r7, #20]
 8005bc0:	f04f 0200 	mov.w	r2, #0
 8005bc4:	f04f 0300 	mov.w	r3, #0
 8005bc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bcc:	4659      	mov	r1, fp
 8005bce:	00cb      	lsls	r3, r1, #3
 8005bd0:	4651      	mov	r1, sl
 8005bd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bd6:	4651      	mov	r1, sl
 8005bd8:	00ca      	lsls	r2, r1, #3
 8005bda:	4610      	mov	r0, r2
 8005bdc:	4619      	mov	r1, r3
 8005bde:	4603      	mov	r3, r0
 8005be0:	4642      	mov	r2, r8
 8005be2:	189b      	adds	r3, r3, r2
 8005be4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005be8:	464b      	mov	r3, r9
 8005bea:	460a      	mov	r2, r1
 8005bec:	eb42 0303 	adc.w	r3, r2, r3
 8005bf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	67bb      	str	r3, [r7, #120]	; 0x78
 8005bfe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005c00:	f04f 0200 	mov.w	r2, #0
 8005c04:	f04f 0300 	mov.w	r3, #0
 8005c08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005c0c:	4649      	mov	r1, r9
 8005c0e:	008b      	lsls	r3, r1, #2
 8005c10:	4641      	mov	r1, r8
 8005c12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c16:	4641      	mov	r1, r8
 8005c18:	008a      	lsls	r2, r1, #2
 8005c1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005c1e:	f7fa fb37 	bl	8000290 <__aeabi_uldivmod>
 8005c22:	4602      	mov	r2, r0
 8005c24:	460b      	mov	r3, r1
 8005c26:	4611      	mov	r1, r2
 8005c28:	4b38      	ldr	r3, [pc, #224]	; (8005d0c <UART_SetConfig+0x4e4>)
 8005c2a:	fba3 2301 	umull	r2, r3, r3, r1
 8005c2e:	095b      	lsrs	r3, r3, #5
 8005c30:	2264      	movs	r2, #100	; 0x64
 8005c32:	fb02 f303 	mul.w	r3, r2, r3
 8005c36:	1acb      	subs	r3, r1, r3
 8005c38:	011b      	lsls	r3, r3, #4
 8005c3a:	3332      	adds	r3, #50	; 0x32
 8005c3c:	4a33      	ldr	r2, [pc, #204]	; (8005d0c <UART_SetConfig+0x4e4>)
 8005c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c42:	095b      	lsrs	r3, r3, #5
 8005c44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c48:	441c      	add	r4, r3
 8005c4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c4e:	2200      	movs	r2, #0
 8005c50:	673b      	str	r3, [r7, #112]	; 0x70
 8005c52:	677a      	str	r2, [r7, #116]	; 0x74
 8005c54:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005c58:	4642      	mov	r2, r8
 8005c5a:	464b      	mov	r3, r9
 8005c5c:	1891      	adds	r1, r2, r2
 8005c5e:	60b9      	str	r1, [r7, #8]
 8005c60:	415b      	adcs	r3, r3
 8005c62:	60fb      	str	r3, [r7, #12]
 8005c64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c68:	4641      	mov	r1, r8
 8005c6a:	1851      	adds	r1, r2, r1
 8005c6c:	6039      	str	r1, [r7, #0]
 8005c6e:	4649      	mov	r1, r9
 8005c70:	414b      	adcs	r3, r1
 8005c72:	607b      	str	r3, [r7, #4]
 8005c74:	f04f 0200 	mov.w	r2, #0
 8005c78:	f04f 0300 	mov.w	r3, #0
 8005c7c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c80:	4659      	mov	r1, fp
 8005c82:	00cb      	lsls	r3, r1, #3
 8005c84:	4651      	mov	r1, sl
 8005c86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c8a:	4651      	mov	r1, sl
 8005c8c:	00ca      	lsls	r2, r1, #3
 8005c8e:	4610      	mov	r0, r2
 8005c90:	4619      	mov	r1, r3
 8005c92:	4603      	mov	r3, r0
 8005c94:	4642      	mov	r2, r8
 8005c96:	189b      	adds	r3, r3, r2
 8005c98:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c9a:	464b      	mov	r3, r9
 8005c9c:	460a      	mov	r2, r1
 8005c9e:	eb42 0303 	adc.w	r3, r2, r3
 8005ca2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	663b      	str	r3, [r7, #96]	; 0x60
 8005cae:	667a      	str	r2, [r7, #100]	; 0x64
 8005cb0:	f04f 0200 	mov.w	r2, #0
 8005cb4:	f04f 0300 	mov.w	r3, #0
 8005cb8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005cbc:	4649      	mov	r1, r9
 8005cbe:	008b      	lsls	r3, r1, #2
 8005cc0:	4641      	mov	r1, r8
 8005cc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cc6:	4641      	mov	r1, r8
 8005cc8:	008a      	lsls	r2, r1, #2
 8005cca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005cce:	f7fa fadf 	bl	8000290 <__aeabi_uldivmod>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	4b0d      	ldr	r3, [pc, #52]	; (8005d0c <UART_SetConfig+0x4e4>)
 8005cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8005cdc:	095b      	lsrs	r3, r3, #5
 8005cde:	2164      	movs	r1, #100	; 0x64
 8005ce0:	fb01 f303 	mul.w	r3, r1, r3
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	011b      	lsls	r3, r3, #4
 8005ce8:	3332      	adds	r3, #50	; 0x32
 8005cea:	4a08      	ldr	r2, [pc, #32]	; (8005d0c <UART_SetConfig+0x4e4>)
 8005cec:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf0:	095b      	lsrs	r3, r3, #5
 8005cf2:	f003 020f 	and.w	r2, r3, #15
 8005cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4422      	add	r2, r4
 8005cfe:	609a      	str	r2, [r3, #8]
}
 8005d00:	bf00      	nop
 8005d02:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005d06:	46bd      	mov	sp, r7
 8005d08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d0c:	51eb851f 	.word	0x51eb851f

08005d10 <atoi>:
 8005d10:	220a      	movs	r2, #10
 8005d12:	2100      	movs	r1, #0
 8005d14:	f000 b882 	b.w	8005e1c <strtol>

08005d18 <_strtol_l.constprop.0>:
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d1e:	d001      	beq.n	8005d24 <_strtol_l.constprop.0+0xc>
 8005d20:	2b24      	cmp	r3, #36	; 0x24
 8005d22:	d906      	bls.n	8005d32 <_strtol_l.constprop.0+0x1a>
 8005d24:	f000 f8ac 	bl	8005e80 <__errno>
 8005d28:	2316      	movs	r3, #22
 8005d2a:	6003      	str	r3, [r0, #0]
 8005d2c:	2000      	movs	r0, #0
 8005d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d32:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005e18 <_strtol_l.constprop.0+0x100>
 8005d36:	460d      	mov	r5, r1
 8005d38:	462e      	mov	r6, r5
 8005d3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d3e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8005d42:	f017 0708 	ands.w	r7, r7, #8
 8005d46:	d1f7      	bne.n	8005d38 <_strtol_l.constprop.0+0x20>
 8005d48:	2c2d      	cmp	r4, #45	; 0x2d
 8005d4a:	d132      	bne.n	8005db2 <_strtol_l.constprop.0+0x9a>
 8005d4c:	782c      	ldrb	r4, [r5, #0]
 8005d4e:	2701      	movs	r7, #1
 8005d50:	1cb5      	adds	r5, r6, #2
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d05b      	beq.n	8005e0e <_strtol_l.constprop.0+0xf6>
 8005d56:	2b10      	cmp	r3, #16
 8005d58:	d109      	bne.n	8005d6e <_strtol_l.constprop.0+0x56>
 8005d5a:	2c30      	cmp	r4, #48	; 0x30
 8005d5c:	d107      	bne.n	8005d6e <_strtol_l.constprop.0+0x56>
 8005d5e:	782c      	ldrb	r4, [r5, #0]
 8005d60:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005d64:	2c58      	cmp	r4, #88	; 0x58
 8005d66:	d14d      	bne.n	8005e04 <_strtol_l.constprop.0+0xec>
 8005d68:	786c      	ldrb	r4, [r5, #1]
 8005d6a:	2310      	movs	r3, #16
 8005d6c:	3502      	adds	r5, #2
 8005d6e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005d72:	f108 38ff 	add.w	r8, r8, #4294967295
 8005d76:	f04f 0e00 	mov.w	lr, #0
 8005d7a:	fbb8 f9f3 	udiv	r9, r8, r3
 8005d7e:	4676      	mov	r6, lr
 8005d80:	fb03 8a19 	mls	sl, r3, r9, r8
 8005d84:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005d88:	f1bc 0f09 	cmp.w	ip, #9
 8005d8c:	d816      	bhi.n	8005dbc <_strtol_l.constprop.0+0xa4>
 8005d8e:	4664      	mov	r4, ip
 8005d90:	42a3      	cmp	r3, r4
 8005d92:	dd24      	ble.n	8005dde <_strtol_l.constprop.0+0xc6>
 8005d94:	f1be 3fff 	cmp.w	lr, #4294967295
 8005d98:	d008      	beq.n	8005dac <_strtol_l.constprop.0+0x94>
 8005d9a:	45b1      	cmp	r9, r6
 8005d9c:	d31c      	bcc.n	8005dd8 <_strtol_l.constprop.0+0xc0>
 8005d9e:	d101      	bne.n	8005da4 <_strtol_l.constprop.0+0x8c>
 8005da0:	45a2      	cmp	sl, r4
 8005da2:	db19      	blt.n	8005dd8 <_strtol_l.constprop.0+0xc0>
 8005da4:	fb06 4603 	mla	r6, r6, r3, r4
 8005da8:	f04f 0e01 	mov.w	lr, #1
 8005dac:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005db0:	e7e8      	b.n	8005d84 <_strtol_l.constprop.0+0x6c>
 8005db2:	2c2b      	cmp	r4, #43	; 0x2b
 8005db4:	bf04      	itt	eq
 8005db6:	782c      	ldrbeq	r4, [r5, #0]
 8005db8:	1cb5      	addeq	r5, r6, #2
 8005dba:	e7ca      	b.n	8005d52 <_strtol_l.constprop.0+0x3a>
 8005dbc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005dc0:	f1bc 0f19 	cmp.w	ip, #25
 8005dc4:	d801      	bhi.n	8005dca <_strtol_l.constprop.0+0xb2>
 8005dc6:	3c37      	subs	r4, #55	; 0x37
 8005dc8:	e7e2      	b.n	8005d90 <_strtol_l.constprop.0+0x78>
 8005dca:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005dce:	f1bc 0f19 	cmp.w	ip, #25
 8005dd2:	d804      	bhi.n	8005dde <_strtol_l.constprop.0+0xc6>
 8005dd4:	3c57      	subs	r4, #87	; 0x57
 8005dd6:	e7db      	b.n	8005d90 <_strtol_l.constprop.0+0x78>
 8005dd8:	f04f 3eff 	mov.w	lr, #4294967295
 8005ddc:	e7e6      	b.n	8005dac <_strtol_l.constprop.0+0x94>
 8005dde:	f1be 3fff 	cmp.w	lr, #4294967295
 8005de2:	d105      	bne.n	8005df0 <_strtol_l.constprop.0+0xd8>
 8005de4:	2322      	movs	r3, #34	; 0x22
 8005de6:	6003      	str	r3, [r0, #0]
 8005de8:	4646      	mov	r6, r8
 8005dea:	b942      	cbnz	r2, 8005dfe <_strtol_l.constprop.0+0xe6>
 8005dec:	4630      	mov	r0, r6
 8005dee:	e79e      	b.n	8005d2e <_strtol_l.constprop.0+0x16>
 8005df0:	b107      	cbz	r7, 8005df4 <_strtol_l.constprop.0+0xdc>
 8005df2:	4276      	negs	r6, r6
 8005df4:	2a00      	cmp	r2, #0
 8005df6:	d0f9      	beq.n	8005dec <_strtol_l.constprop.0+0xd4>
 8005df8:	f1be 0f00 	cmp.w	lr, #0
 8005dfc:	d000      	beq.n	8005e00 <_strtol_l.constprop.0+0xe8>
 8005dfe:	1e69      	subs	r1, r5, #1
 8005e00:	6011      	str	r1, [r2, #0]
 8005e02:	e7f3      	b.n	8005dec <_strtol_l.constprop.0+0xd4>
 8005e04:	2430      	movs	r4, #48	; 0x30
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1b1      	bne.n	8005d6e <_strtol_l.constprop.0+0x56>
 8005e0a:	2308      	movs	r3, #8
 8005e0c:	e7af      	b.n	8005d6e <_strtol_l.constprop.0+0x56>
 8005e0e:	2c30      	cmp	r4, #48	; 0x30
 8005e10:	d0a5      	beq.n	8005d5e <_strtol_l.constprop.0+0x46>
 8005e12:	230a      	movs	r3, #10
 8005e14:	e7ab      	b.n	8005d6e <_strtol_l.constprop.0+0x56>
 8005e16:	bf00      	nop
 8005e18:	08006b51 	.word	0x08006b51

08005e1c <strtol>:
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	460a      	mov	r2, r1
 8005e20:	4601      	mov	r1, r0
 8005e22:	4802      	ldr	r0, [pc, #8]	; (8005e2c <strtol+0x10>)
 8005e24:	6800      	ldr	r0, [r0, #0]
 8005e26:	f7ff bf77 	b.w	8005d18 <_strtol_l.constprop.0>
 8005e2a:	bf00      	nop
 8005e2c:	20000070 	.word	0x20000070

08005e30 <siprintf>:
 8005e30:	b40e      	push	{r1, r2, r3}
 8005e32:	b500      	push	{lr}
 8005e34:	b09c      	sub	sp, #112	; 0x70
 8005e36:	ab1d      	add	r3, sp, #116	; 0x74
 8005e38:	9002      	str	r0, [sp, #8]
 8005e3a:	9006      	str	r0, [sp, #24]
 8005e3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e40:	4809      	ldr	r0, [pc, #36]	; (8005e68 <siprintf+0x38>)
 8005e42:	9107      	str	r1, [sp, #28]
 8005e44:	9104      	str	r1, [sp, #16]
 8005e46:	4909      	ldr	r1, [pc, #36]	; (8005e6c <siprintf+0x3c>)
 8005e48:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e4c:	9105      	str	r1, [sp, #20]
 8005e4e:	6800      	ldr	r0, [r0, #0]
 8005e50:	9301      	str	r3, [sp, #4]
 8005e52:	a902      	add	r1, sp, #8
 8005e54:	f000 f992 	bl	800617c <_svfiprintf_r>
 8005e58:	9b02      	ldr	r3, [sp, #8]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	701a      	strb	r2, [r3, #0]
 8005e5e:	b01c      	add	sp, #112	; 0x70
 8005e60:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e64:	b003      	add	sp, #12
 8005e66:	4770      	bx	lr
 8005e68:	20000070 	.word	0x20000070
 8005e6c:	ffff0208 	.word	0xffff0208

08005e70 <memset>:
 8005e70:	4402      	add	r2, r0
 8005e72:	4603      	mov	r3, r0
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d100      	bne.n	8005e7a <memset+0xa>
 8005e78:	4770      	bx	lr
 8005e7a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e7e:	e7f9      	b.n	8005e74 <memset+0x4>

08005e80 <__errno>:
 8005e80:	4b01      	ldr	r3, [pc, #4]	; (8005e88 <__errno+0x8>)
 8005e82:	6818      	ldr	r0, [r3, #0]
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	20000070 	.word	0x20000070

08005e8c <__libc_init_array>:
 8005e8c:	b570      	push	{r4, r5, r6, lr}
 8005e8e:	4d0d      	ldr	r5, [pc, #52]	; (8005ec4 <__libc_init_array+0x38>)
 8005e90:	4c0d      	ldr	r4, [pc, #52]	; (8005ec8 <__libc_init_array+0x3c>)
 8005e92:	1b64      	subs	r4, r4, r5
 8005e94:	10a4      	asrs	r4, r4, #2
 8005e96:	2600      	movs	r6, #0
 8005e98:	42a6      	cmp	r6, r4
 8005e9a:	d109      	bne.n	8005eb0 <__libc_init_array+0x24>
 8005e9c:	4d0b      	ldr	r5, [pc, #44]	; (8005ecc <__libc_init_array+0x40>)
 8005e9e:	4c0c      	ldr	r4, [pc, #48]	; (8005ed0 <__libc_init_array+0x44>)
 8005ea0:	f000 fc6a 	bl	8006778 <_init>
 8005ea4:	1b64      	subs	r4, r4, r5
 8005ea6:	10a4      	asrs	r4, r4, #2
 8005ea8:	2600      	movs	r6, #0
 8005eaa:	42a6      	cmp	r6, r4
 8005eac:	d105      	bne.n	8005eba <__libc_init_array+0x2e>
 8005eae:	bd70      	pop	{r4, r5, r6, pc}
 8005eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eb4:	4798      	blx	r3
 8005eb6:	3601      	adds	r6, #1
 8005eb8:	e7ee      	b.n	8005e98 <__libc_init_array+0xc>
 8005eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ebe:	4798      	blx	r3
 8005ec0:	3601      	adds	r6, #1
 8005ec2:	e7f2      	b.n	8005eaa <__libc_init_array+0x1e>
 8005ec4:	08006c8c 	.word	0x08006c8c
 8005ec8:	08006c8c 	.word	0x08006c8c
 8005ecc:	08006c8c 	.word	0x08006c8c
 8005ed0:	08006c90 	.word	0x08006c90

08005ed4 <__retarget_lock_acquire_recursive>:
 8005ed4:	4770      	bx	lr

08005ed6 <__retarget_lock_release_recursive>:
 8005ed6:	4770      	bx	lr

08005ed8 <_free_r>:
 8005ed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005eda:	2900      	cmp	r1, #0
 8005edc:	d044      	beq.n	8005f68 <_free_r+0x90>
 8005ede:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ee2:	9001      	str	r0, [sp, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f1a1 0404 	sub.w	r4, r1, #4
 8005eea:	bfb8      	it	lt
 8005eec:	18e4      	addlt	r4, r4, r3
 8005eee:	f000 f8df 	bl	80060b0 <__malloc_lock>
 8005ef2:	4a1e      	ldr	r2, [pc, #120]	; (8005f6c <_free_r+0x94>)
 8005ef4:	9801      	ldr	r0, [sp, #4]
 8005ef6:	6813      	ldr	r3, [r2, #0]
 8005ef8:	b933      	cbnz	r3, 8005f08 <_free_r+0x30>
 8005efa:	6063      	str	r3, [r4, #4]
 8005efc:	6014      	str	r4, [r2, #0]
 8005efe:	b003      	add	sp, #12
 8005f00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f04:	f000 b8da 	b.w	80060bc <__malloc_unlock>
 8005f08:	42a3      	cmp	r3, r4
 8005f0a:	d908      	bls.n	8005f1e <_free_r+0x46>
 8005f0c:	6825      	ldr	r5, [r4, #0]
 8005f0e:	1961      	adds	r1, r4, r5
 8005f10:	428b      	cmp	r3, r1
 8005f12:	bf01      	itttt	eq
 8005f14:	6819      	ldreq	r1, [r3, #0]
 8005f16:	685b      	ldreq	r3, [r3, #4]
 8005f18:	1949      	addeq	r1, r1, r5
 8005f1a:	6021      	streq	r1, [r4, #0]
 8005f1c:	e7ed      	b.n	8005efa <_free_r+0x22>
 8005f1e:	461a      	mov	r2, r3
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	b10b      	cbz	r3, 8005f28 <_free_r+0x50>
 8005f24:	42a3      	cmp	r3, r4
 8005f26:	d9fa      	bls.n	8005f1e <_free_r+0x46>
 8005f28:	6811      	ldr	r1, [r2, #0]
 8005f2a:	1855      	adds	r5, r2, r1
 8005f2c:	42a5      	cmp	r5, r4
 8005f2e:	d10b      	bne.n	8005f48 <_free_r+0x70>
 8005f30:	6824      	ldr	r4, [r4, #0]
 8005f32:	4421      	add	r1, r4
 8005f34:	1854      	adds	r4, r2, r1
 8005f36:	42a3      	cmp	r3, r4
 8005f38:	6011      	str	r1, [r2, #0]
 8005f3a:	d1e0      	bne.n	8005efe <_free_r+0x26>
 8005f3c:	681c      	ldr	r4, [r3, #0]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	6053      	str	r3, [r2, #4]
 8005f42:	440c      	add	r4, r1
 8005f44:	6014      	str	r4, [r2, #0]
 8005f46:	e7da      	b.n	8005efe <_free_r+0x26>
 8005f48:	d902      	bls.n	8005f50 <_free_r+0x78>
 8005f4a:	230c      	movs	r3, #12
 8005f4c:	6003      	str	r3, [r0, #0]
 8005f4e:	e7d6      	b.n	8005efe <_free_r+0x26>
 8005f50:	6825      	ldr	r5, [r4, #0]
 8005f52:	1961      	adds	r1, r4, r5
 8005f54:	428b      	cmp	r3, r1
 8005f56:	bf04      	itt	eq
 8005f58:	6819      	ldreq	r1, [r3, #0]
 8005f5a:	685b      	ldreq	r3, [r3, #4]
 8005f5c:	6063      	str	r3, [r4, #4]
 8005f5e:	bf04      	itt	eq
 8005f60:	1949      	addeq	r1, r1, r5
 8005f62:	6021      	streq	r1, [r4, #0]
 8005f64:	6054      	str	r4, [r2, #4]
 8005f66:	e7ca      	b.n	8005efe <_free_r+0x26>
 8005f68:	b003      	add	sp, #12
 8005f6a:	bd30      	pop	{r4, r5, pc}
 8005f6c:	20000408 	.word	0x20000408

08005f70 <sbrk_aligned>:
 8005f70:	b570      	push	{r4, r5, r6, lr}
 8005f72:	4e0e      	ldr	r6, [pc, #56]	; (8005fac <sbrk_aligned+0x3c>)
 8005f74:	460c      	mov	r4, r1
 8005f76:	6831      	ldr	r1, [r6, #0]
 8005f78:	4605      	mov	r5, r0
 8005f7a:	b911      	cbnz	r1, 8005f82 <sbrk_aligned+0x12>
 8005f7c:	f000 fba6 	bl	80066cc <_sbrk_r>
 8005f80:	6030      	str	r0, [r6, #0]
 8005f82:	4621      	mov	r1, r4
 8005f84:	4628      	mov	r0, r5
 8005f86:	f000 fba1 	bl	80066cc <_sbrk_r>
 8005f8a:	1c43      	adds	r3, r0, #1
 8005f8c:	d00a      	beq.n	8005fa4 <sbrk_aligned+0x34>
 8005f8e:	1cc4      	adds	r4, r0, #3
 8005f90:	f024 0403 	bic.w	r4, r4, #3
 8005f94:	42a0      	cmp	r0, r4
 8005f96:	d007      	beq.n	8005fa8 <sbrk_aligned+0x38>
 8005f98:	1a21      	subs	r1, r4, r0
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	f000 fb96 	bl	80066cc <_sbrk_r>
 8005fa0:	3001      	adds	r0, #1
 8005fa2:	d101      	bne.n	8005fa8 <sbrk_aligned+0x38>
 8005fa4:	f04f 34ff 	mov.w	r4, #4294967295
 8005fa8:	4620      	mov	r0, r4
 8005faa:	bd70      	pop	{r4, r5, r6, pc}
 8005fac:	2000040c 	.word	0x2000040c

08005fb0 <_malloc_r>:
 8005fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fb4:	1ccd      	adds	r5, r1, #3
 8005fb6:	f025 0503 	bic.w	r5, r5, #3
 8005fba:	3508      	adds	r5, #8
 8005fbc:	2d0c      	cmp	r5, #12
 8005fbe:	bf38      	it	cc
 8005fc0:	250c      	movcc	r5, #12
 8005fc2:	2d00      	cmp	r5, #0
 8005fc4:	4607      	mov	r7, r0
 8005fc6:	db01      	blt.n	8005fcc <_malloc_r+0x1c>
 8005fc8:	42a9      	cmp	r1, r5
 8005fca:	d905      	bls.n	8005fd8 <_malloc_r+0x28>
 8005fcc:	230c      	movs	r3, #12
 8005fce:	603b      	str	r3, [r7, #0]
 8005fd0:	2600      	movs	r6, #0
 8005fd2:	4630      	mov	r0, r6
 8005fd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fd8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80060ac <_malloc_r+0xfc>
 8005fdc:	f000 f868 	bl	80060b0 <__malloc_lock>
 8005fe0:	f8d8 3000 	ldr.w	r3, [r8]
 8005fe4:	461c      	mov	r4, r3
 8005fe6:	bb5c      	cbnz	r4, 8006040 <_malloc_r+0x90>
 8005fe8:	4629      	mov	r1, r5
 8005fea:	4638      	mov	r0, r7
 8005fec:	f7ff ffc0 	bl	8005f70 <sbrk_aligned>
 8005ff0:	1c43      	adds	r3, r0, #1
 8005ff2:	4604      	mov	r4, r0
 8005ff4:	d155      	bne.n	80060a2 <_malloc_r+0xf2>
 8005ff6:	f8d8 4000 	ldr.w	r4, [r8]
 8005ffa:	4626      	mov	r6, r4
 8005ffc:	2e00      	cmp	r6, #0
 8005ffe:	d145      	bne.n	800608c <_malloc_r+0xdc>
 8006000:	2c00      	cmp	r4, #0
 8006002:	d048      	beq.n	8006096 <_malloc_r+0xe6>
 8006004:	6823      	ldr	r3, [r4, #0]
 8006006:	4631      	mov	r1, r6
 8006008:	4638      	mov	r0, r7
 800600a:	eb04 0903 	add.w	r9, r4, r3
 800600e:	f000 fb5d 	bl	80066cc <_sbrk_r>
 8006012:	4581      	cmp	r9, r0
 8006014:	d13f      	bne.n	8006096 <_malloc_r+0xe6>
 8006016:	6821      	ldr	r1, [r4, #0]
 8006018:	1a6d      	subs	r5, r5, r1
 800601a:	4629      	mov	r1, r5
 800601c:	4638      	mov	r0, r7
 800601e:	f7ff ffa7 	bl	8005f70 <sbrk_aligned>
 8006022:	3001      	adds	r0, #1
 8006024:	d037      	beq.n	8006096 <_malloc_r+0xe6>
 8006026:	6823      	ldr	r3, [r4, #0]
 8006028:	442b      	add	r3, r5
 800602a:	6023      	str	r3, [r4, #0]
 800602c:	f8d8 3000 	ldr.w	r3, [r8]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d038      	beq.n	80060a6 <_malloc_r+0xf6>
 8006034:	685a      	ldr	r2, [r3, #4]
 8006036:	42a2      	cmp	r2, r4
 8006038:	d12b      	bne.n	8006092 <_malloc_r+0xe2>
 800603a:	2200      	movs	r2, #0
 800603c:	605a      	str	r2, [r3, #4]
 800603e:	e00f      	b.n	8006060 <_malloc_r+0xb0>
 8006040:	6822      	ldr	r2, [r4, #0]
 8006042:	1b52      	subs	r2, r2, r5
 8006044:	d41f      	bmi.n	8006086 <_malloc_r+0xd6>
 8006046:	2a0b      	cmp	r2, #11
 8006048:	d917      	bls.n	800607a <_malloc_r+0xca>
 800604a:	1961      	adds	r1, r4, r5
 800604c:	42a3      	cmp	r3, r4
 800604e:	6025      	str	r5, [r4, #0]
 8006050:	bf18      	it	ne
 8006052:	6059      	strne	r1, [r3, #4]
 8006054:	6863      	ldr	r3, [r4, #4]
 8006056:	bf08      	it	eq
 8006058:	f8c8 1000 	streq.w	r1, [r8]
 800605c:	5162      	str	r2, [r4, r5]
 800605e:	604b      	str	r3, [r1, #4]
 8006060:	4638      	mov	r0, r7
 8006062:	f104 060b 	add.w	r6, r4, #11
 8006066:	f000 f829 	bl	80060bc <__malloc_unlock>
 800606a:	f026 0607 	bic.w	r6, r6, #7
 800606e:	1d23      	adds	r3, r4, #4
 8006070:	1af2      	subs	r2, r6, r3
 8006072:	d0ae      	beq.n	8005fd2 <_malloc_r+0x22>
 8006074:	1b9b      	subs	r3, r3, r6
 8006076:	50a3      	str	r3, [r4, r2]
 8006078:	e7ab      	b.n	8005fd2 <_malloc_r+0x22>
 800607a:	42a3      	cmp	r3, r4
 800607c:	6862      	ldr	r2, [r4, #4]
 800607e:	d1dd      	bne.n	800603c <_malloc_r+0x8c>
 8006080:	f8c8 2000 	str.w	r2, [r8]
 8006084:	e7ec      	b.n	8006060 <_malloc_r+0xb0>
 8006086:	4623      	mov	r3, r4
 8006088:	6864      	ldr	r4, [r4, #4]
 800608a:	e7ac      	b.n	8005fe6 <_malloc_r+0x36>
 800608c:	4634      	mov	r4, r6
 800608e:	6876      	ldr	r6, [r6, #4]
 8006090:	e7b4      	b.n	8005ffc <_malloc_r+0x4c>
 8006092:	4613      	mov	r3, r2
 8006094:	e7cc      	b.n	8006030 <_malloc_r+0x80>
 8006096:	230c      	movs	r3, #12
 8006098:	603b      	str	r3, [r7, #0]
 800609a:	4638      	mov	r0, r7
 800609c:	f000 f80e 	bl	80060bc <__malloc_unlock>
 80060a0:	e797      	b.n	8005fd2 <_malloc_r+0x22>
 80060a2:	6025      	str	r5, [r4, #0]
 80060a4:	e7dc      	b.n	8006060 <_malloc_r+0xb0>
 80060a6:	605b      	str	r3, [r3, #4]
 80060a8:	deff      	udf	#255	; 0xff
 80060aa:	bf00      	nop
 80060ac:	20000408 	.word	0x20000408

080060b0 <__malloc_lock>:
 80060b0:	4801      	ldr	r0, [pc, #4]	; (80060b8 <__malloc_lock+0x8>)
 80060b2:	f7ff bf0f 	b.w	8005ed4 <__retarget_lock_acquire_recursive>
 80060b6:	bf00      	nop
 80060b8:	20000404 	.word	0x20000404

080060bc <__malloc_unlock>:
 80060bc:	4801      	ldr	r0, [pc, #4]	; (80060c4 <__malloc_unlock+0x8>)
 80060be:	f7ff bf0a 	b.w	8005ed6 <__retarget_lock_release_recursive>
 80060c2:	bf00      	nop
 80060c4:	20000404 	.word	0x20000404

080060c8 <__ssputs_r>:
 80060c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060cc:	688e      	ldr	r6, [r1, #8]
 80060ce:	461f      	mov	r7, r3
 80060d0:	42be      	cmp	r6, r7
 80060d2:	680b      	ldr	r3, [r1, #0]
 80060d4:	4682      	mov	sl, r0
 80060d6:	460c      	mov	r4, r1
 80060d8:	4690      	mov	r8, r2
 80060da:	d82c      	bhi.n	8006136 <__ssputs_r+0x6e>
 80060dc:	898a      	ldrh	r2, [r1, #12]
 80060de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80060e2:	d026      	beq.n	8006132 <__ssputs_r+0x6a>
 80060e4:	6965      	ldr	r5, [r4, #20]
 80060e6:	6909      	ldr	r1, [r1, #16]
 80060e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060ec:	eba3 0901 	sub.w	r9, r3, r1
 80060f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80060f4:	1c7b      	adds	r3, r7, #1
 80060f6:	444b      	add	r3, r9
 80060f8:	106d      	asrs	r5, r5, #1
 80060fa:	429d      	cmp	r5, r3
 80060fc:	bf38      	it	cc
 80060fe:	461d      	movcc	r5, r3
 8006100:	0553      	lsls	r3, r2, #21
 8006102:	d527      	bpl.n	8006154 <__ssputs_r+0x8c>
 8006104:	4629      	mov	r1, r5
 8006106:	f7ff ff53 	bl	8005fb0 <_malloc_r>
 800610a:	4606      	mov	r6, r0
 800610c:	b360      	cbz	r0, 8006168 <__ssputs_r+0xa0>
 800610e:	6921      	ldr	r1, [r4, #16]
 8006110:	464a      	mov	r2, r9
 8006112:	f000 faeb 	bl	80066ec <memcpy>
 8006116:	89a3      	ldrh	r3, [r4, #12]
 8006118:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800611c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006120:	81a3      	strh	r3, [r4, #12]
 8006122:	6126      	str	r6, [r4, #16]
 8006124:	6165      	str	r5, [r4, #20]
 8006126:	444e      	add	r6, r9
 8006128:	eba5 0509 	sub.w	r5, r5, r9
 800612c:	6026      	str	r6, [r4, #0]
 800612e:	60a5      	str	r5, [r4, #8]
 8006130:	463e      	mov	r6, r7
 8006132:	42be      	cmp	r6, r7
 8006134:	d900      	bls.n	8006138 <__ssputs_r+0x70>
 8006136:	463e      	mov	r6, r7
 8006138:	6820      	ldr	r0, [r4, #0]
 800613a:	4632      	mov	r2, r6
 800613c:	4641      	mov	r1, r8
 800613e:	f000 faab 	bl	8006698 <memmove>
 8006142:	68a3      	ldr	r3, [r4, #8]
 8006144:	1b9b      	subs	r3, r3, r6
 8006146:	60a3      	str	r3, [r4, #8]
 8006148:	6823      	ldr	r3, [r4, #0]
 800614a:	4433      	add	r3, r6
 800614c:	6023      	str	r3, [r4, #0]
 800614e:	2000      	movs	r0, #0
 8006150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006154:	462a      	mov	r2, r5
 8006156:	f000 fad7 	bl	8006708 <_realloc_r>
 800615a:	4606      	mov	r6, r0
 800615c:	2800      	cmp	r0, #0
 800615e:	d1e0      	bne.n	8006122 <__ssputs_r+0x5a>
 8006160:	6921      	ldr	r1, [r4, #16]
 8006162:	4650      	mov	r0, sl
 8006164:	f7ff feb8 	bl	8005ed8 <_free_r>
 8006168:	230c      	movs	r3, #12
 800616a:	f8ca 3000 	str.w	r3, [sl]
 800616e:	89a3      	ldrh	r3, [r4, #12]
 8006170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006174:	81a3      	strh	r3, [r4, #12]
 8006176:	f04f 30ff 	mov.w	r0, #4294967295
 800617a:	e7e9      	b.n	8006150 <__ssputs_r+0x88>

0800617c <_svfiprintf_r>:
 800617c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006180:	4698      	mov	r8, r3
 8006182:	898b      	ldrh	r3, [r1, #12]
 8006184:	061b      	lsls	r3, r3, #24
 8006186:	b09d      	sub	sp, #116	; 0x74
 8006188:	4607      	mov	r7, r0
 800618a:	460d      	mov	r5, r1
 800618c:	4614      	mov	r4, r2
 800618e:	d50e      	bpl.n	80061ae <_svfiprintf_r+0x32>
 8006190:	690b      	ldr	r3, [r1, #16]
 8006192:	b963      	cbnz	r3, 80061ae <_svfiprintf_r+0x32>
 8006194:	2140      	movs	r1, #64	; 0x40
 8006196:	f7ff ff0b 	bl	8005fb0 <_malloc_r>
 800619a:	6028      	str	r0, [r5, #0]
 800619c:	6128      	str	r0, [r5, #16]
 800619e:	b920      	cbnz	r0, 80061aa <_svfiprintf_r+0x2e>
 80061a0:	230c      	movs	r3, #12
 80061a2:	603b      	str	r3, [r7, #0]
 80061a4:	f04f 30ff 	mov.w	r0, #4294967295
 80061a8:	e0d0      	b.n	800634c <_svfiprintf_r+0x1d0>
 80061aa:	2340      	movs	r3, #64	; 0x40
 80061ac:	616b      	str	r3, [r5, #20]
 80061ae:	2300      	movs	r3, #0
 80061b0:	9309      	str	r3, [sp, #36]	; 0x24
 80061b2:	2320      	movs	r3, #32
 80061b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80061bc:	2330      	movs	r3, #48	; 0x30
 80061be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006364 <_svfiprintf_r+0x1e8>
 80061c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061c6:	f04f 0901 	mov.w	r9, #1
 80061ca:	4623      	mov	r3, r4
 80061cc:	469a      	mov	sl, r3
 80061ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061d2:	b10a      	cbz	r2, 80061d8 <_svfiprintf_r+0x5c>
 80061d4:	2a25      	cmp	r2, #37	; 0x25
 80061d6:	d1f9      	bne.n	80061cc <_svfiprintf_r+0x50>
 80061d8:	ebba 0b04 	subs.w	fp, sl, r4
 80061dc:	d00b      	beq.n	80061f6 <_svfiprintf_r+0x7a>
 80061de:	465b      	mov	r3, fp
 80061e0:	4622      	mov	r2, r4
 80061e2:	4629      	mov	r1, r5
 80061e4:	4638      	mov	r0, r7
 80061e6:	f7ff ff6f 	bl	80060c8 <__ssputs_r>
 80061ea:	3001      	adds	r0, #1
 80061ec:	f000 80a9 	beq.w	8006342 <_svfiprintf_r+0x1c6>
 80061f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061f2:	445a      	add	r2, fp
 80061f4:	9209      	str	r2, [sp, #36]	; 0x24
 80061f6:	f89a 3000 	ldrb.w	r3, [sl]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f000 80a1 	beq.w	8006342 <_svfiprintf_r+0x1c6>
 8006200:	2300      	movs	r3, #0
 8006202:	f04f 32ff 	mov.w	r2, #4294967295
 8006206:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800620a:	f10a 0a01 	add.w	sl, sl, #1
 800620e:	9304      	str	r3, [sp, #16]
 8006210:	9307      	str	r3, [sp, #28]
 8006212:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006216:	931a      	str	r3, [sp, #104]	; 0x68
 8006218:	4654      	mov	r4, sl
 800621a:	2205      	movs	r2, #5
 800621c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006220:	4850      	ldr	r0, [pc, #320]	; (8006364 <_svfiprintf_r+0x1e8>)
 8006222:	f7f9 ffe5 	bl	80001f0 <memchr>
 8006226:	9a04      	ldr	r2, [sp, #16]
 8006228:	b9d8      	cbnz	r0, 8006262 <_svfiprintf_r+0xe6>
 800622a:	06d0      	lsls	r0, r2, #27
 800622c:	bf44      	itt	mi
 800622e:	2320      	movmi	r3, #32
 8006230:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006234:	0711      	lsls	r1, r2, #28
 8006236:	bf44      	itt	mi
 8006238:	232b      	movmi	r3, #43	; 0x2b
 800623a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800623e:	f89a 3000 	ldrb.w	r3, [sl]
 8006242:	2b2a      	cmp	r3, #42	; 0x2a
 8006244:	d015      	beq.n	8006272 <_svfiprintf_r+0xf6>
 8006246:	9a07      	ldr	r2, [sp, #28]
 8006248:	4654      	mov	r4, sl
 800624a:	2000      	movs	r0, #0
 800624c:	f04f 0c0a 	mov.w	ip, #10
 8006250:	4621      	mov	r1, r4
 8006252:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006256:	3b30      	subs	r3, #48	; 0x30
 8006258:	2b09      	cmp	r3, #9
 800625a:	d94d      	bls.n	80062f8 <_svfiprintf_r+0x17c>
 800625c:	b1b0      	cbz	r0, 800628c <_svfiprintf_r+0x110>
 800625e:	9207      	str	r2, [sp, #28]
 8006260:	e014      	b.n	800628c <_svfiprintf_r+0x110>
 8006262:	eba0 0308 	sub.w	r3, r0, r8
 8006266:	fa09 f303 	lsl.w	r3, r9, r3
 800626a:	4313      	orrs	r3, r2
 800626c:	9304      	str	r3, [sp, #16]
 800626e:	46a2      	mov	sl, r4
 8006270:	e7d2      	b.n	8006218 <_svfiprintf_r+0x9c>
 8006272:	9b03      	ldr	r3, [sp, #12]
 8006274:	1d19      	adds	r1, r3, #4
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	9103      	str	r1, [sp, #12]
 800627a:	2b00      	cmp	r3, #0
 800627c:	bfbb      	ittet	lt
 800627e:	425b      	neglt	r3, r3
 8006280:	f042 0202 	orrlt.w	r2, r2, #2
 8006284:	9307      	strge	r3, [sp, #28]
 8006286:	9307      	strlt	r3, [sp, #28]
 8006288:	bfb8      	it	lt
 800628a:	9204      	strlt	r2, [sp, #16]
 800628c:	7823      	ldrb	r3, [r4, #0]
 800628e:	2b2e      	cmp	r3, #46	; 0x2e
 8006290:	d10c      	bne.n	80062ac <_svfiprintf_r+0x130>
 8006292:	7863      	ldrb	r3, [r4, #1]
 8006294:	2b2a      	cmp	r3, #42	; 0x2a
 8006296:	d134      	bne.n	8006302 <_svfiprintf_r+0x186>
 8006298:	9b03      	ldr	r3, [sp, #12]
 800629a:	1d1a      	adds	r2, r3, #4
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	9203      	str	r2, [sp, #12]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	bfb8      	it	lt
 80062a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80062a8:	3402      	adds	r4, #2
 80062aa:	9305      	str	r3, [sp, #20]
 80062ac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006374 <_svfiprintf_r+0x1f8>
 80062b0:	7821      	ldrb	r1, [r4, #0]
 80062b2:	2203      	movs	r2, #3
 80062b4:	4650      	mov	r0, sl
 80062b6:	f7f9 ff9b 	bl	80001f0 <memchr>
 80062ba:	b138      	cbz	r0, 80062cc <_svfiprintf_r+0x150>
 80062bc:	9b04      	ldr	r3, [sp, #16]
 80062be:	eba0 000a 	sub.w	r0, r0, sl
 80062c2:	2240      	movs	r2, #64	; 0x40
 80062c4:	4082      	lsls	r2, r0
 80062c6:	4313      	orrs	r3, r2
 80062c8:	3401      	adds	r4, #1
 80062ca:	9304      	str	r3, [sp, #16]
 80062cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062d0:	4825      	ldr	r0, [pc, #148]	; (8006368 <_svfiprintf_r+0x1ec>)
 80062d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062d6:	2206      	movs	r2, #6
 80062d8:	f7f9 ff8a 	bl	80001f0 <memchr>
 80062dc:	2800      	cmp	r0, #0
 80062de:	d038      	beq.n	8006352 <_svfiprintf_r+0x1d6>
 80062e0:	4b22      	ldr	r3, [pc, #136]	; (800636c <_svfiprintf_r+0x1f0>)
 80062e2:	bb1b      	cbnz	r3, 800632c <_svfiprintf_r+0x1b0>
 80062e4:	9b03      	ldr	r3, [sp, #12]
 80062e6:	3307      	adds	r3, #7
 80062e8:	f023 0307 	bic.w	r3, r3, #7
 80062ec:	3308      	adds	r3, #8
 80062ee:	9303      	str	r3, [sp, #12]
 80062f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062f2:	4433      	add	r3, r6
 80062f4:	9309      	str	r3, [sp, #36]	; 0x24
 80062f6:	e768      	b.n	80061ca <_svfiprintf_r+0x4e>
 80062f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80062fc:	460c      	mov	r4, r1
 80062fe:	2001      	movs	r0, #1
 8006300:	e7a6      	b.n	8006250 <_svfiprintf_r+0xd4>
 8006302:	2300      	movs	r3, #0
 8006304:	3401      	adds	r4, #1
 8006306:	9305      	str	r3, [sp, #20]
 8006308:	4619      	mov	r1, r3
 800630a:	f04f 0c0a 	mov.w	ip, #10
 800630e:	4620      	mov	r0, r4
 8006310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006314:	3a30      	subs	r2, #48	; 0x30
 8006316:	2a09      	cmp	r2, #9
 8006318:	d903      	bls.n	8006322 <_svfiprintf_r+0x1a6>
 800631a:	2b00      	cmp	r3, #0
 800631c:	d0c6      	beq.n	80062ac <_svfiprintf_r+0x130>
 800631e:	9105      	str	r1, [sp, #20]
 8006320:	e7c4      	b.n	80062ac <_svfiprintf_r+0x130>
 8006322:	fb0c 2101 	mla	r1, ip, r1, r2
 8006326:	4604      	mov	r4, r0
 8006328:	2301      	movs	r3, #1
 800632a:	e7f0      	b.n	800630e <_svfiprintf_r+0x192>
 800632c:	ab03      	add	r3, sp, #12
 800632e:	9300      	str	r3, [sp, #0]
 8006330:	462a      	mov	r2, r5
 8006332:	4b0f      	ldr	r3, [pc, #60]	; (8006370 <_svfiprintf_r+0x1f4>)
 8006334:	a904      	add	r1, sp, #16
 8006336:	4638      	mov	r0, r7
 8006338:	f3af 8000 	nop.w
 800633c:	1c42      	adds	r2, r0, #1
 800633e:	4606      	mov	r6, r0
 8006340:	d1d6      	bne.n	80062f0 <_svfiprintf_r+0x174>
 8006342:	89ab      	ldrh	r3, [r5, #12]
 8006344:	065b      	lsls	r3, r3, #25
 8006346:	f53f af2d 	bmi.w	80061a4 <_svfiprintf_r+0x28>
 800634a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800634c:	b01d      	add	sp, #116	; 0x74
 800634e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006352:	ab03      	add	r3, sp, #12
 8006354:	9300      	str	r3, [sp, #0]
 8006356:	462a      	mov	r2, r5
 8006358:	4b05      	ldr	r3, [pc, #20]	; (8006370 <_svfiprintf_r+0x1f4>)
 800635a:	a904      	add	r1, sp, #16
 800635c:	4638      	mov	r0, r7
 800635e:	f000 f879 	bl	8006454 <_printf_i>
 8006362:	e7eb      	b.n	800633c <_svfiprintf_r+0x1c0>
 8006364:	08006c51 	.word	0x08006c51
 8006368:	08006c5b 	.word	0x08006c5b
 800636c:	00000000 	.word	0x00000000
 8006370:	080060c9 	.word	0x080060c9
 8006374:	08006c57 	.word	0x08006c57

08006378 <_printf_common>:
 8006378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800637c:	4616      	mov	r6, r2
 800637e:	4699      	mov	r9, r3
 8006380:	688a      	ldr	r2, [r1, #8]
 8006382:	690b      	ldr	r3, [r1, #16]
 8006384:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006388:	4293      	cmp	r3, r2
 800638a:	bfb8      	it	lt
 800638c:	4613      	movlt	r3, r2
 800638e:	6033      	str	r3, [r6, #0]
 8006390:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006394:	4607      	mov	r7, r0
 8006396:	460c      	mov	r4, r1
 8006398:	b10a      	cbz	r2, 800639e <_printf_common+0x26>
 800639a:	3301      	adds	r3, #1
 800639c:	6033      	str	r3, [r6, #0]
 800639e:	6823      	ldr	r3, [r4, #0]
 80063a0:	0699      	lsls	r1, r3, #26
 80063a2:	bf42      	ittt	mi
 80063a4:	6833      	ldrmi	r3, [r6, #0]
 80063a6:	3302      	addmi	r3, #2
 80063a8:	6033      	strmi	r3, [r6, #0]
 80063aa:	6825      	ldr	r5, [r4, #0]
 80063ac:	f015 0506 	ands.w	r5, r5, #6
 80063b0:	d106      	bne.n	80063c0 <_printf_common+0x48>
 80063b2:	f104 0a19 	add.w	sl, r4, #25
 80063b6:	68e3      	ldr	r3, [r4, #12]
 80063b8:	6832      	ldr	r2, [r6, #0]
 80063ba:	1a9b      	subs	r3, r3, r2
 80063bc:	42ab      	cmp	r3, r5
 80063be:	dc26      	bgt.n	800640e <_printf_common+0x96>
 80063c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063c4:	1e13      	subs	r3, r2, #0
 80063c6:	6822      	ldr	r2, [r4, #0]
 80063c8:	bf18      	it	ne
 80063ca:	2301      	movne	r3, #1
 80063cc:	0692      	lsls	r2, r2, #26
 80063ce:	d42b      	bmi.n	8006428 <_printf_common+0xb0>
 80063d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063d4:	4649      	mov	r1, r9
 80063d6:	4638      	mov	r0, r7
 80063d8:	47c0      	blx	r8
 80063da:	3001      	adds	r0, #1
 80063dc:	d01e      	beq.n	800641c <_printf_common+0xa4>
 80063de:	6823      	ldr	r3, [r4, #0]
 80063e0:	6922      	ldr	r2, [r4, #16]
 80063e2:	f003 0306 	and.w	r3, r3, #6
 80063e6:	2b04      	cmp	r3, #4
 80063e8:	bf02      	ittt	eq
 80063ea:	68e5      	ldreq	r5, [r4, #12]
 80063ec:	6833      	ldreq	r3, [r6, #0]
 80063ee:	1aed      	subeq	r5, r5, r3
 80063f0:	68a3      	ldr	r3, [r4, #8]
 80063f2:	bf0c      	ite	eq
 80063f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063f8:	2500      	movne	r5, #0
 80063fa:	4293      	cmp	r3, r2
 80063fc:	bfc4      	itt	gt
 80063fe:	1a9b      	subgt	r3, r3, r2
 8006400:	18ed      	addgt	r5, r5, r3
 8006402:	2600      	movs	r6, #0
 8006404:	341a      	adds	r4, #26
 8006406:	42b5      	cmp	r5, r6
 8006408:	d11a      	bne.n	8006440 <_printf_common+0xc8>
 800640a:	2000      	movs	r0, #0
 800640c:	e008      	b.n	8006420 <_printf_common+0xa8>
 800640e:	2301      	movs	r3, #1
 8006410:	4652      	mov	r2, sl
 8006412:	4649      	mov	r1, r9
 8006414:	4638      	mov	r0, r7
 8006416:	47c0      	blx	r8
 8006418:	3001      	adds	r0, #1
 800641a:	d103      	bne.n	8006424 <_printf_common+0xac>
 800641c:	f04f 30ff 	mov.w	r0, #4294967295
 8006420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006424:	3501      	adds	r5, #1
 8006426:	e7c6      	b.n	80063b6 <_printf_common+0x3e>
 8006428:	18e1      	adds	r1, r4, r3
 800642a:	1c5a      	adds	r2, r3, #1
 800642c:	2030      	movs	r0, #48	; 0x30
 800642e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006432:	4422      	add	r2, r4
 8006434:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006438:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800643c:	3302      	adds	r3, #2
 800643e:	e7c7      	b.n	80063d0 <_printf_common+0x58>
 8006440:	2301      	movs	r3, #1
 8006442:	4622      	mov	r2, r4
 8006444:	4649      	mov	r1, r9
 8006446:	4638      	mov	r0, r7
 8006448:	47c0      	blx	r8
 800644a:	3001      	adds	r0, #1
 800644c:	d0e6      	beq.n	800641c <_printf_common+0xa4>
 800644e:	3601      	adds	r6, #1
 8006450:	e7d9      	b.n	8006406 <_printf_common+0x8e>
	...

08006454 <_printf_i>:
 8006454:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006458:	7e0f      	ldrb	r7, [r1, #24]
 800645a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800645c:	2f78      	cmp	r7, #120	; 0x78
 800645e:	4691      	mov	r9, r2
 8006460:	4680      	mov	r8, r0
 8006462:	460c      	mov	r4, r1
 8006464:	469a      	mov	sl, r3
 8006466:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800646a:	d807      	bhi.n	800647c <_printf_i+0x28>
 800646c:	2f62      	cmp	r7, #98	; 0x62
 800646e:	d80a      	bhi.n	8006486 <_printf_i+0x32>
 8006470:	2f00      	cmp	r7, #0
 8006472:	f000 80d4 	beq.w	800661e <_printf_i+0x1ca>
 8006476:	2f58      	cmp	r7, #88	; 0x58
 8006478:	f000 80c0 	beq.w	80065fc <_printf_i+0x1a8>
 800647c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006480:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006484:	e03a      	b.n	80064fc <_printf_i+0xa8>
 8006486:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800648a:	2b15      	cmp	r3, #21
 800648c:	d8f6      	bhi.n	800647c <_printf_i+0x28>
 800648e:	a101      	add	r1, pc, #4	; (adr r1, 8006494 <_printf_i+0x40>)
 8006490:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006494:	080064ed 	.word	0x080064ed
 8006498:	08006501 	.word	0x08006501
 800649c:	0800647d 	.word	0x0800647d
 80064a0:	0800647d 	.word	0x0800647d
 80064a4:	0800647d 	.word	0x0800647d
 80064a8:	0800647d 	.word	0x0800647d
 80064ac:	08006501 	.word	0x08006501
 80064b0:	0800647d 	.word	0x0800647d
 80064b4:	0800647d 	.word	0x0800647d
 80064b8:	0800647d 	.word	0x0800647d
 80064bc:	0800647d 	.word	0x0800647d
 80064c0:	08006605 	.word	0x08006605
 80064c4:	0800652d 	.word	0x0800652d
 80064c8:	080065bf 	.word	0x080065bf
 80064cc:	0800647d 	.word	0x0800647d
 80064d0:	0800647d 	.word	0x0800647d
 80064d4:	08006627 	.word	0x08006627
 80064d8:	0800647d 	.word	0x0800647d
 80064dc:	0800652d 	.word	0x0800652d
 80064e0:	0800647d 	.word	0x0800647d
 80064e4:	0800647d 	.word	0x0800647d
 80064e8:	080065c7 	.word	0x080065c7
 80064ec:	682b      	ldr	r3, [r5, #0]
 80064ee:	1d1a      	adds	r2, r3, #4
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	602a      	str	r2, [r5, #0]
 80064f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064fc:	2301      	movs	r3, #1
 80064fe:	e09f      	b.n	8006640 <_printf_i+0x1ec>
 8006500:	6820      	ldr	r0, [r4, #0]
 8006502:	682b      	ldr	r3, [r5, #0]
 8006504:	0607      	lsls	r7, r0, #24
 8006506:	f103 0104 	add.w	r1, r3, #4
 800650a:	6029      	str	r1, [r5, #0]
 800650c:	d501      	bpl.n	8006512 <_printf_i+0xbe>
 800650e:	681e      	ldr	r6, [r3, #0]
 8006510:	e003      	b.n	800651a <_printf_i+0xc6>
 8006512:	0646      	lsls	r6, r0, #25
 8006514:	d5fb      	bpl.n	800650e <_printf_i+0xba>
 8006516:	f9b3 6000 	ldrsh.w	r6, [r3]
 800651a:	2e00      	cmp	r6, #0
 800651c:	da03      	bge.n	8006526 <_printf_i+0xd2>
 800651e:	232d      	movs	r3, #45	; 0x2d
 8006520:	4276      	negs	r6, r6
 8006522:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006526:	485a      	ldr	r0, [pc, #360]	; (8006690 <_printf_i+0x23c>)
 8006528:	230a      	movs	r3, #10
 800652a:	e012      	b.n	8006552 <_printf_i+0xfe>
 800652c:	682b      	ldr	r3, [r5, #0]
 800652e:	6820      	ldr	r0, [r4, #0]
 8006530:	1d19      	adds	r1, r3, #4
 8006532:	6029      	str	r1, [r5, #0]
 8006534:	0605      	lsls	r5, r0, #24
 8006536:	d501      	bpl.n	800653c <_printf_i+0xe8>
 8006538:	681e      	ldr	r6, [r3, #0]
 800653a:	e002      	b.n	8006542 <_printf_i+0xee>
 800653c:	0641      	lsls	r1, r0, #25
 800653e:	d5fb      	bpl.n	8006538 <_printf_i+0xe4>
 8006540:	881e      	ldrh	r6, [r3, #0]
 8006542:	4853      	ldr	r0, [pc, #332]	; (8006690 <_printf_i+0x23c>)
 8006544:	2f6f      	cmp	r7, #111	; 0x6f
 8006546:	bf0c      	ite	eq
 8006548:	2308      	moveq	r3, #8
 800654a:	230a      	movne	r3, #10
 800654c:	2100      	movs	r1, #0
 800654e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006552:	6865      	ldr	r5, [r4, #4]
 8006554:	60a5      	str	r5, [r4, #8]
 8006556:	2d00      	cmp	r5, #0
 8006558:	bfa2      	ittt	ge
 800655a:	6821      	ldrge	r1, [r4, #0]
 800655c:	f021 0104 	bicge.w	r1, r1, #4
 8006560:	6021      	strge	r1, [r4, #0]
 8006562:	b90e      	cbnz	r6, 8006568 <_printf_i+0x114>
 8006564:	2d00      	cmp	r5, #0
 8006566:	d04b      	beq.n	8006600 <_printf_i+0x1ac>
 8006568:	4615      	mov	r5, r2
 800656a:	fbb6 f1f3 	udiv	r1, r6, r3
 800656e:	fb03 6711 	mls	r7, r3, r1, r6
 8006572:	5dc7      	ldrb	r7, [r0, r7]
 8006574:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006578:	4637      	mov	r7, r6
 800657a:	42bb      	cmp	r3, r7
 800657c:	460e      	mov	r6, r1
 800657e:	d9f4      	bls.n	800656a <_printf_i+0x116>
 8006580:	2b08      	cmp	r3, #8
 8006582:	d10b      	bne.n	800659c <_printf_i+0x148>
 8006584:	6823      	ldr	r3, [r4, #0]
 8006586:	07de      	lsls	r6, r3, #31
 8006588:	d508      	bpl.n	800659c <_printf_i+0x148>
 800658a:	6923      	ldr	r3, [r4, #16]
 800658c:	6861      	ldr	r1, [r4, #4]
 800658e:	4299      	cmp	r1, r3
 8006590:	bfde      	ittt	le
 8006592:	2330      	movle	r3, #48	; 0x30
 8006594:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006598:	f105 35ff 	addle.w	r5, r5, #4294967295
 800659c:	1b52      	subs	r2, r2, r5
 800659e:	6122      	str	r2, [r4, #16]
 80065a0:	f8cd a000 	str.w	sl, [sp]
 80065a4:	464b      	mov	r3, r9
 80065a6:	aa03      	add	r2, sp, #12
 80065a8:	4621      	mov	r1, r4
 80065aa:	4640      	mov	r0, r8
 80065ac:	f7ff fee4 	bl	8006378 <_printf_common>
 80065b0:	3001      	adds	r0, #1
 80065b2:	d14a      	bne.n	800664a <_printf_i+0x1f6>
 80065b4:	f04f 30ff 	mov.w	r0, #4294967295
 80065b8:	b004      	add	sp, #16
 80065ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065be:	6823      	ldr	r3, [r4, #0]
 80065c0:	f043 0320 	orr.w	r3, r3, #32
 80065c4:	6023      	str	r3, [r4, #0]
 80065c6:	4833      	ldr	r0, [pc, #204]	; (8006694 <_printf_i+0x240>)
 80065c8:	2778      	movs	r7, #120	; 0x78
 80065ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80065ce:	6823      	ldr	r3, [r4, #0]
 80065d0:	6829      	ldr	r1, [r5, #0]
 80065d2:	061f      	lsls	r7, r3, #24
 80065d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80065d8:	d402      	bmi.n	80065e0 <_printf_i+0x18c>
 80065da:	065f      	lsls	r7, r3, #25
 80065dc:	bf48      	it	mi
 80065de:	b2b6      	uxthmi	r6, r6
 80065e0:	07df      	lsls	r7, r3, #31
 80065e2:	bf48      	it	mi
 80065e4:	f043 0320 	orrmi.w	r3, r3, #32
 80065e8:	6029      	str	r1, [r5, #0]
 80065ea:	bf48      	it	mi
 80065ec:	6023      	strmi	r3, [r4, #0]
 80065ee:	b91e      	cbnz	r6, 80065f8 <_printf_i+0x1a4>
 80065f0:	6823      	ldr	r3, [r4, #0]
 80065f2:	f023 0320 	bic.w	r3, r3, #32
 80065f6:	6023      	str	r3, [r4, #0]
 80065f8:	2310      	movs	r3, #16
 80065fa:	e7a7      	b.n	800654c <_printf_i+0xf8>
 80065fc:	4824      	ldr	r0, [pc, #144]	; (8006690 <_printf_i+0x23c>)
 80065fe:	e7e4      	b.n	80065ca <_printf_i+0x176>
 8006600:	4615      	mov	r5, r2
 8006602:	e7bd      	b.n	8006580 <_printf_i+0x12c>
 8006604:	682b      	ldr	r3, [r5, #0]
 8006606:	6826      	ldr	r6, [r4, #0]
 8006608:	6961      	ldr	r1, [r4, #20]
 800660a:	1d18      	adds	r0, r3, #4
 800660c:	6028      	str	r0, [r5, #0]
 800660e:	0635      	lsls	r5, r6, #24
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	d501      	bpl.n	8006618 <_printf_i+0x1c4>
 8006614:	6019      	str	r1, [r3, #0]
 8006616:	e002      	b.n	800661e <_printf_i+0x1ca>
 8006618:	0670      	lsls	r0, r6, #25
 800661a:	d5fb      	bpl.n	8006614 <_printf_i+0x1c0>
 800661c:	8019      	strh	r1, [r3, #0]
 800661e:	2300      	movs	r3, #0
 8006620:	6123      	str	r3, [r4, #16]
 8006622:	4615      	mov	r5, r2
 8006624:	e7bc      	b.n	80065a0 <_printf_i+0x14c>
 8006626:	682b      	ldr	r3, [r5, #0]
 8006628:	1d1a      	adds	r2, r3, #4
 800662a:	602a      	str	r2, [r5, #0]
 800662c:	681d      	ldr	r5, [r3, #0]
 800662e:	6862      	ldr	r2, [r4, #4]
 8006630:	2100      	movs	r1, #0
 8006632:	4628      	mov	r0, r5
 8006634:	f7f9 fddc 	bl	80001f0 <memchr>
 8006638:	b108      	cbz	r0, 800663e <_printf_i+0x1ea>
 800663a:	1b40      	subs	r0, r0, r5
 800663c:	6060      	str	r0, [r4, #4]
 800663e:	6863      	ldr	r3, [r4, #4]
 8006640:	6123      	str	r3, [r4, #16]
 8006642:	2300      	movs	r3, #0
 8006644:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006648:	e7aa      	b.n	80065a0 <_printf_i+0x14c>
 800664a:	6923      	ldr	r3, [r4, #16]
 800664c:	462a      	mov	r2, r5
 800664e:	4649      	mov	r1, r9
 8006650:	4640      	mov	r0, r8
 8006652:	47d0      	blx	sl
 8006654:	3001      	adds	r0, #1
 8006656:	d0ad      	beq.n	80065b4 <_printf_i+0x160>
 8006658:	6823      	ldr	r3, [r4, #0]
 800665a:	079b      	lsls	r3, r3, #30
 800665c:	d413      	bmi.n	8006686 <_printf_i+0x232>
 800665e:	68e0      	ldr	r0, [r4, #12]
 8006660:	9b03      	ldr	r3, [sp, #12]
 8006662:	4298      	cmp	r0, r3
 8006664:	bfb8      	it	lt
 8006666:	4618      	movlt	r0, r3
 8006668:	e7a6      	b.n	80065b8 <_printf_i+0x164>
 800666a:	2301      	movs	r3, #1
 800666c:	4632      	mov	r2, r6
 800666e:	4649      	mov	r1, r9
 8006670:	4640      	mov	r0, r8
 8006672:	47d0      	blx	sl
 8006674:	3001      	adds	r0, #1
 8006676:	d09d      	beq.n	80065b4 <_printf_i+0x160>
 8006678:	3501      	adds	r5, #1
 800667a:	68e3      	ldr	r3, [r4, #12]
 800667c:	9903      	ldr	r1, [sp, #12]
 800667e:	1a5b      	subs	r3, r3, r1
 8006680:	42ab      	cmp	r3, r5
 8006682:	dcf2      	bgt.n	800666a <_printf_i+0x216>
 8006684:	e7eb      	b.n	800665e <_printf_i+0x20a>
 8006686:	2500      	movs	r5, #0
 8006688:	f104 0619 	add.w	r6, r4, #25
 800668c:	e7f5      	b.n	800667a <_printf_i+0x226>
 800668e:	bf00      	nop
 8006690:	08006c62 	.word	0x08006c62
 8006694:	08006c73 	.word	0x08006c73

08006698 <memmove>:
 8006698:	4288      	cmp	r0, r1
 800669a:	b510      	push	{r4, lr}
 800669c:	eb01 0402 	add.w	r4, r1, r2
 80066a0:	d902      	bls.n	80066a8 <memmove+0x10>
 80066a2:	4284      	cmp	r4, r0
 80066a4:	4623      	mov	r3, r4
 80066a6:	d807      	bhi.n	80066b8 <memmove+0x20>
 80066a8:	1e43      	subs	r3, r0, #1
 80066aa:	42a1      	cmp	r1, r4
 80066ac:	d008      	beq.n	80066c0 <memmove+0x28>
 80066ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066b6:	e7f8      	b.n	80066aa <memmove+0x12>
 80066b8:	4402      	add	r2, r0
 80066ba:	4601      	mov	r1, r0
 80066bc:	428a      	cmp	r2, r1
 80066be:	d100      	bne.n	80066c2 <memmove+0x2a>
 80066c0:	bd10      	pop	{r4, pc}
 80066c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066ca:	e7f7      	b.n	80066bc <memmove+0x24>

080066cc <_sbrk_r>:
 80066cc:	b538      	push	{r3, r4, r5, lr}
 80066ce:	4d06      	ldr	r5, [pc, #24]	; (80066e8 <_sbrk_r+0x1c>)
 80066d0:	2300      	movs	r3, #0
 80066d2:	4604      	mov	r4, r0
 80066d4:	4608      	mov	r0, r1
 80066d6:	602b      	str	r3, [r5, #0]
 80066d8:	f7fb fd8e 	bl	80021f8 <_sbrk>
 80066dc:	1c43      	adds	r3, r0, #1
 80066de:	d102      	bne.n	80066e6 <_sbrk_r+0x1a>
 80066e0:	682b      	ldr	r3, [r5, #0]
 80066e2:	b103      	cbz	r3, 80066e6 <_sbrk_r+0x1a>
 80066e4:	6023      	str	r3, [r4, #0]
 80066e6:	bd38      	pop	{r3, r4, r5, pc}
 80066e8:	20000400 	.word	0x20000400

080066ec <memcpy>:
 80066ec:	440a      	add	r2, r1
 80066ee:	4291      	cmp	r1, r2
 80066f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80066f4:	d100      	bne.n	80066f8 <memcpy+0xc>
 80066f6:	4770      	bx	lr
 80066f8:	b510      	push	{r4, lr}
 80066fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006702:	4291      	cmp	r1, r2
 8006704:	d1f9      	bne.n	80066fa <memcpy+0xe>
 8006706:	bd10      	pop	{r4, pc}

08006708 <_realloc_r>:
 8006708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800670c:	4680      	mov	r8, r0
 800670e:	4614      	mov	r4, r2
 8006710:	460e      	mov	r6, r1
 8006712:	b921      	cbnz	r1, 800671e <_realloc_r+0x16>
 8006714:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006718:	4611      	mov	r1, r2
 800671a:	f7ff bc49 	b.w	8005fb0 <_malloc_r>
 800671e:	b92a      	cbnz	r2, 800672c <_realloc_r+0x24>
 8006720:	f7ff fbda 	bl	8005ed8 <_free_r>
 8006724:	4625      	mov	r5, r4
 8006726:	4628      	mov	r0, r5
 8006728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800672c:	f000 f81b 	bl	8006766 <_malloc_usable_size_r>
 8006730:	4284      	cmp	r4, r0
 8006732:	4607      	mov	r7, r0
 8006734:	d802      	bhi.n	800673c <_realloc_r+0x34>
 8006736:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800673a:	d812      	bhi.n	8006762 <_realloc_r+0x5a>
 800673c:	4621      	mov	r1, r4
 800673e:	4640      	mov	r0, r8
 8006740:	f7ff fc36 	bl	8005fb0 <_malloc_r>
 8006744:	4605      	mov	r5, r0
 8006746:	2800      	cmp	r0, #0
 8006748:	d0ed      	beq.n	8006726 <_realloc_r+0x1e>
 800674a:	42bc      	cmp	r4, r7
 800674c:	4622      	mov	r2, r4
 800674e:	4631      	mov	r1, r6
 8006750:	bf28      	it	cs
 8006752:	463a      	movcs	r2, r7
 8006754:	f7ff ffca 	bl	80066ec <memcpy>
 8006758:	4631      	mov	r1, r6
 800675a:	4640      	mov	r0, r8
 800675c:	f7ff fbbc 	bl	8005ed8 <_free_r>
 8006760:	e7e1      	b.n	8006726 <_realloc_r+0x1e>
 8006762:	4635      	mov	r5, r6
 8006764:	e7df      	b.n	8006726 <_realloc_r+0x1e>

08006766 <_malloc_usable_size_r>:
 8006766:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800676a:	1f18      	subs	r0, r3, #4
 800676c:	2b00      	cmp	r3, #0
 800676e:	bfbc      	itt	lt
 8006770:	580b      	ldrlt	r3, [r1, r0]
 8006772:	18c0      	addlt	r0, r0, r3
 8006774:	4770      	bx	lr
	...

08006778 <_init>:
 8006778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800677a:	bf00      	nop
 800677c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800677e:	bc08      	pop	{r3}
 8006780:	469e      	mov	lr, r3
 8006782:	4770      	bx	lr

08006784 <_fini>:
 8006784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006786:	bf00      	nop
 8006788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800678a:	bc08      	pop	{r3}
 800678c:	469e      	mov	lr, r3
 800678e:	4770      	bx	lr
