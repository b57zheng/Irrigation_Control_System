
Irrigation_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006814  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  080069b4  080069b4  000169b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ea8  08006ea8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006ea8  08006ea8  00016ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006eb0  08006eb0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006eb0  08006eb0  00016eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006eb4  08006eb4  00016eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  20000078  08006f2c  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000428  08006f2c  00020428  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ebe1  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f6e  00000000  00000000  0002ecc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd0  00000000  00000000  00030c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000add  00000000  00000000  00031a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000178f9  00000000  00000000  000324e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000101d9  00000000  00000000  00049dde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009973e  00000000  00000000  00059fb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000402c  00000000  00000000  000f36f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000f7724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800699c 	.word	0x0800699c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800699c 	.word	0x0800699c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000590:	f001 ffb6 	bl	8002500 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 fba4 	bl	8000ce0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f000 fe18 	bl	80011cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059c:	f000 fdc2 	bl	8001124 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80005a0:	f000 fcc6 	bl	8000f30 <MX_TIM3_Init>
  MX_TIM2_Init();
 80005a4:	f000 fc4e 	bl	8000e44 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80005a8:	f000 fd92 	bl	80010d0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80005ac:	f000 fde4 	bl	8001178 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80005b0:	f000 fbf6 	bl	8000da0 <MX_ADC1_Init>
  MX_TIM5_Init();
 80005b4:	f000 fd3e 	bl	8001034 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

    /* ------------------ SET UP MODE BEGIN ------------------ */
  // Turn off Nucleo green LED
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2120      	movs	r1, #32
 80005bc:	48a5      	ldr	r0, [pc, #660]	; (8000854 <main+0x2c8>)
 80005be:	f002 ff3f 	bl	8003440 <HAL_GPIO_WritePin>
  UART_Send_MSG("\r SETUP MODE");
 80005c2:	48a5      	ldr	r0, [pc, #660]	; (8000858 <main+0x2cc>)
 80005c4:	f001 f972 	bl	80018ac <UART_Send_MSG>
  //parse PWM options
  UART_Parse_MSG("\r\n\n PMW option: 0) Manual Control; 1) 60% PMW; 2) 80% PMW; 3) 99% PMW;",
 80005c8:	2301      	movs	r3, #1
 80005ca:	4aa4      	ldr	r2, [pc, #656]	; (800085c <main+0x2d0>)
 80005cc:	49a4      	ldr	r1, [pc, #656]	; (8000860 <main+0x2d4>)
 80005ce:	48a5      	ldr	r0, [pc, #660]	; (8000864 <main+0x2d8>)
 80005d0:	f001 f8dc 	bl	800178c <UART_Parse_MSG>
			           "\r\n INLET MOTOR SPEED PWM (option 0-3): ", &INLET_PWM, 1);
  UART_Parse_MSG("",
 80005d4:	2301      	movs	r3, #1
 80005d6:	4aa4      	ldr	r2, [pc, #656]	; (8000868 <main+0x2dc>)
 80005d8:	49a4      	ldr	r1, [pc, #656]	; (800086c <main+0x2e0>)
 80005da:	48a5      	ldr	r0, [pc, #660]	; (8000870 <main+0x2e4>)
 80005dc:	f001 f8d6 	bl	800178c <UART_Parse_MSG>
			      		 "\r\n ZONE 1 MOTOR SPEED PWM (option 0-3): ", &Zone_1_PWM, 1);
  UART_Parse_MSG("",
 80005e0:	2301      	movs	r3, #1
 80005e2:	4aa4      	ldr	r2, [pc, #656]	; (8000874 <main+0x2e8>)
 80005e4:	49a4      	ldr	r1, [pc, #656]	; (8000878 <main+0x2ec>)
 80005e6:	48a2      	ldr	r0, [pc, #648]	; (8000870 <main+0x2e4>)
 80005e8:	f001 f8d0 	bl	800178c <UART_Parse_MSG>
			           "\r\n ZONE 2 MOTOR SPEED PWM (option 0-3): ", &Zone_2_PWM, 1);
  UART_Parse_MSG("",
 80005ec:	2301      	movs	r3, #1
 80005ee:	4aa3      	ldr	r2, [pc, #652]	; (800087c <main+0x2f0>)
 80005f0:	49a3      	ldr	r1, [pc, #652]	; (8000880 <main+0x2f4>)
 80005f2:	489f      	ldr	r0, [pc, #636]	; (8000870 <main+0x2e4>)
 80005f4:	f001 f8ca 	bl	800178c <UART_Parse_MSG>
			           "\r\n ZONE 3 MOTOR SPEED PWM (option 0-3): ", &Zone_3_PWM, 1);
  //parse CLOCK options
  UART_Parse_MSG("\r\n\n CLOCK option: 00 - Midnight, 01 - 1:00am, ... , 12 - noon, 13 - 1:00pm",
 80005f8:	2302      	movs	r3, #2
 80005fa:	4aa2      	ldr	r2, [pc, #648]	; (8000884 <main+0x2f8>)
 80005fc:	49a2      	ldr	r1, [pc, #648]	; (8000888 <main+0x2fc>)
 80005fe:	48a3      	ldr	r0, [pc, #652]	; (800088c <main+0x300>)
 8000600:	f001 f8c4 	bl	800178c <UART_Parse_MSG>
			           "\r\n CURRENT WALL CLOCK START TIME(0-23): ", &WALL_CLK_START, 2);
  UART_Parse_MSG("",
 8000604:	2302      	movs	r3, #2
 8000606:	4aa2      	ldr	r2, [pc, #648]	; (8000890 <main+0x304>)
 8000608:	49a2      	ldr	r1, [pc, #648]	; (8000894 <main+0x308>)
 800060a:	4899      	ldr	r0, [pc, #612]	; (8000870 <main+0x2e4>)
 800060c:	f001 f8be 	bl	800178c <UART_Parse_MSG>
			           "\r\n\n INLET WALL CLOCK START TIME(0-23): ", &INLET_CLK_START, 2);
  UART_Parse_MSG("",
 8000610:	2302      	movs	r3, #2
 8000612:	4aa1      	ldr	r2, [pc, #644]	; (8000898 <main+0x30c>)
 8000614:	49a1      	ldr	r1, [pc, #644]	; (800089c <main+0x310>)
 8000616:	4896      	ldr	r0, [pc, #600]	; (8000870 <main+0x2e4>)
 8000618:	f001 f8b8 	bl	800178c <UART_Parse_MSG>
			           "\r\n INLET WALL CLOCK STOP TIME(0-23): ", &INLET_CLK_STOP, 2);
  UART_Parse_MSG("",
 800061c:	2302      	movs	r3, #2
 800061e:	4aa0      	ldr	r2, [pc, #640]	; (80008a0 <main+0x314>)
 8000620:	49a0      	ldr	r1, [pc, #640]	; (80008a4 <main+0x318>)
 8000622:	4893      	ldr	r0, [pc, #588]	; (8000870 <main+0x2e4>)
 8000624:	f001 f8b2 	bl	800178c <UART_Parse_MSG>
			           "\r\n\n ZONE 1 WALL CLOCK START TIME(0-23): ", &Zone_1_CLK_START, 2);
  UART_Parse_MSG("",
 8000628:	2302      	movs	r3, #2
 800062a:	4a9f      	ldr	r2, [pc, #636]	; (80008a8 <main+0x31c>)
 800062c:	499f      	ldr	r1, [pc, #636]	; (80008ac <main+0x320>)
 800062e:	4890      	ldr	r0, [pc, #576]	; (8000870 <main+0x2e4>)
 8000630:	f001 f8ac 	bl	800178c <UART_Parse_MSG>
			           "\r\n ZONE 1 WALL CLOCK STOP TIME(0-23): ", &Zone_1_CLK_STOP, 2);
  UART_Parse_MSG("",
 8000634:	2302      	movs	r3, #2
 8000636:	4a9e      	ldr	r2, [pc, #632]	; (80008b0 <main+0x324>)
 8000638:	499e      	ldr	r1, [pc, #632]	; (80008b4 <main+0x328>)
 800063a:	488d      	ldr	r0, [pc, #564]	; (8000870 <main+0x2e4>)
 800063c:	f001 f8a6 	bl	800178c <UART_Parse_MSG>
			           "\r\n\n ZONE 2 WALL CLOCK START TIME(0-23): ", &Zone_2_CLK_START, 2);
  UART_Parse_MSG("",
 8000640:	2302      	movs	r3, #2
 8000642:	4a9d      	ldr	r2, [pc, #628]	; (80008b8 <main+0x32c>)
 8000644:	499d      	ldr	r1, [pc, #628]	; (80008bc <main+0x330>)
 8000646:	488a      	ldr	r0, [pc, #552]	; (8000870 <main+0x2e4>)
 8000648:	f001 f8a0 	bl	800178c <UART_Parse_MSG>
			           "\r\n ZONE 2 WALL CLOCK STOP TIME(0-23): ", &Zone_2_CLK_STOP, 2);
  UART_Parse_MSG("",
 800064c:	2302      	movs	r3, #2
 800064e:	4a9c      	ldr	r2, [pc, #624]	; (80008c0 <main+0x334>)
 8000650:	499c      	ldr	r1, [pc, #624]	; (80008c4 <main+0x338>)
 8000652:	4887      	ldr	r0, [pc, #540]	; (8000870 <main+0x2e4>)
 8000654:	f001 f89a 	bl	800178c <UART_Parse_MSG>
			           "\r\n\n ZONE 3 WALL CLOCK START TIME(0-23): ", &Zone_3_CLK_START, 2);
  UART_Parse_MSG("",
 8000658:	2302      	movs	r3, #2
 800065a:	4a9b      	ldr	r2, [pc, #620]	; (80008c8 <main+0x33c>)
 800065c:	499b      	ldr	r1, [pc, #620]	; (80008cc <main+0x340>)
 800065e:	4884      	ldr	r0, [pc, #528]	; (8000870 <main+0x2e4>)
 8000660:	f001 f894 	bl	800178c <UART_Parse_MSG>
			           "\r\n ZONE 3 WALL CLOCK STOP TIME(0-23): ", &Zone_3_CLK_STOP, 2);
  UART_Send_MSG("\r\n\n SETUP MODE END");
 8000664:	489a      	ldr	r0, [pc, #616]	; (80008d0 <main+0x344>)
 8000666:	f001 f921 	bl	80018ac <UART_Send_MSG>
  Current_Wall_CLK_Hour = WALL_CLK_START; // Update System Clock
 800066a:	4b86      	ldr	r3, [pc, #536]	; (8000884 <main+0x2f8>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	b2da      	uxtb	r2, r3
 8000670:	4b98      	ldr	r3, [pc, #608]	; (80008d4 <main+0x348>)
 8000672:	701a      	strb	r2, [r3, #0]
  // wait for run mode to start (blue PB)
  while (RUN_MODE_START_FLAG == 0) {
 8000674:	e006      	b.n	8000684 <main+0xf8>
    // Flash controller green LED
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000676:	2120      	movs	r1, #32
 8000678:	4876      	ldr	r0, [pc, #472]	; (8000854 <main+0x2c8>)
 800067a:	f002 fefa 	bl	8003472 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 800067e:	2064      	movs	r0, #100	; 0x64
 8000680:	f001 ffb0 	bl	80025e4 <HAL_Delay>
  while (RUN_MODE_START_FLAG == 0) {
 8000684:	4b94      	ldr	r3, [pc, #592]	; (80008d8 <main+0x34c>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	b2db      	uxtb	r3, r3
 800068a:	2b00      	cmp	r3, #0
 800068c:	d0f3      	beq.n	8000676 <main+0xea>
  };
    /* ------------------ SET UP MODE END ------------------ */

    /* ------------------ RUN MODE ------------------ */
	// Turn ON controller green LED
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800068e:	2201      	movs	r2, #1
 8000690:	2120      	movs	r1, #32
 8000692:	4870      	ldr	r0, [pc, #448]	; (8000854 <main+0x2c8>)
 8000694:	f002 fed4 	bl	8003440 <HAL_GPIO_WritePin>
	UART_Send_MSG("\r\n\n RUN MODE");
 8000698:	4890      	ldr	r0, [pc, #576]	; (80008dc <main+0x350>)
 800069a:	f001 f907 	bl	80018ac <UART_Send_MSG>
	UART_Send_MSG("\r\n");
 800069e:	4890      	ldr	r0, [pc, #576]	; (80008e0 <main+0x354>)
 80006a0:	f001 f904 	bl	80018ac <UART_Send_MSG>
  Get_Water_Percent_Depth();
 80006a4:	f001 facc 	bl	8001c40 <Get_Water_Percent_Depth>

  // start up TIMER 5 for one second interrupts
	// start up TIMER 3 for DC motor control
	// start up TIMER 2 for Servo motor control
  HAL_TIM_Base_Start_IT(&htim5);
 80006a8:	488e      	ldr	r0, [pc, #568]	; (80008e4 <main+0x358>)
 80006aa:	f003 fc57 	bl	8003f5c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Init(&htim3);
 80006ae:	488e      	ldr	r0, [pc, #568]	; (80008e8 <main+0x35c>)
 80006b0:	f003 fbaa 	bl	8003e08 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim2);
 80006b4:	488d      	ldr	r0, [pc, #564]	; (80008ec <main+0x360>)
 80006b6:	f003 fbf7 	bl	8003ea8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80006ba:	2100      	movs	r1, #0
 80006bc:	488b      	ldr	r0, [pc, #556]	; (80008ec <main+0x360>)
 80006be:	f003 fd09 	bl	80040d4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Init(&htim3);
 80006c2:	4889      	ldr	r0, [pc, #548]	; (80008e8 <main+0x35c>)
 80006c4:	f003 fba0 	bl	8003e08 <HAL_TIM_Base_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80006c8:	2100      	movs	r1, #0
 80006ca:	4887      	ldr	r0, [pc, #540]	; (80008e8 <main+0x35c>)
 80006cc:	f003 fd02 	bl	80040d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80006d0:	2108      	movs	r1, #8
 80006d2:	4885      	ldr	r0, [pc, #532]	; (80008e8 <main+0x35c>)
 80006d4:	f003 fcfe 	bl	80040d4 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	/* -- INLET -- */
  	Tank_Level_Hi_Alarm = 0;
 80006d8:	4b85      	ldr	r3, [pc, #532]	; (80008f0 <main+0x364>)
 80006da:	2200      	movs	r2, #0
 80006dc:	701a      	strb	r2, [r3, #0]
  	while ( (INLET_CLK_START < INLET_CLK_STOP && (Current_Wall_CLK_Hour >= INLET_CLK_START && Current_Wall_CLK_Hour < INLET_CLK_STOP))
 80006de:	e085      	b.n	80007ec <main+0x260>
  	     || (INLET_CLK_START > INLET_CLK_STOP && (Current_Wall_CLK_Hour >= INLET_CLK_START || Current_Wall_CLK_Hour < INLET_CLK_STOP)) ) {
  		Current_Zone = INLET;
 80006e0:	4b84      	ldr	r3, [pc, #528]	; (80008f4 <main+0x368>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
  		Set_LED_Color(LED_PURPLE);
 80006e6:	2004      	movs	r0, #4
 80006e8:	f001 fb24 	bl	8001d34 <Set_LED_Color>
  		Control_Servo_Motor_PWM(0);
 80006ec:	2000      	movs	r0, #0
 80006ee:	f001 f99f 	bl	8001a30 <Control_Servo_Motor_PWM>
  		Get_Water_Percent_Depth();
 80006f2:	f001 faa5 	bl	8001c40 <Get_Water_Percent_Depth>

  		// Tank Full
  		if (Tank_Level_Hi_Alarm == 1) {
 80006f6:	4b7e      	ldr	r3, [pc, #504]	; (80008f0 <main+0x364>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d139      	bne.n	8000774 <main+0x1e8>
  			//Turn off Motor
  			Control_DC_Motor_PWM(0, 0);
 8000700:	2100      	movs	r1, #0
 8000702:	2000      	movs	r0, #0
 8000704:	f001 f964 	bl	80019d0 <Control_DC_Motor_PWM>
  			//Wait until the current sequence finish
        Current_DC_Motor_Percent_PWM = 0;
 8000708:	4b7b      	ldr	r3, [pc, #492]	; (80008f8 <main+0x36c>)
 800070a:	2200      	movs	r2, #0
 800070c:	701a      	strb	r2, [r3, #0]
        while ( (INLET_CLK_START < INLET_CLK_STOP && (Current_Wall_CLK_Hour >= INLET_CLK_START && Current_Wall_CLK_Hour < INLET_CLK_STOP))
 800070e:	bf00      	nop
 8000710:	4b5f      	ldr	r3, [pc, #380]	; (8000890 <main+0x304>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	b2da      	uxtb	r2, r3
 8000716:	4b60      	ldr	r3, [pc, #384]	; (8000898 <main+0x30c>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	b2db      	uxtb	r3, r3
             || (INLET_CLK_START > INLET_CLK_STOP && (Current_Wall_CLK_Hour >= INLET_CLK_START || Current_Wall_CLK_Hour < INLET_CLK_STOP)) ) {}
 800071c:	429a      	cmp	r2, r3
 800071e:	d20f      	bcs.n	8000740 <main+0x1b4>
        while ( (INLET_CLK_START < INLET_CLK_STOP && (Current_Wall_CLK_Hour >= INLET_CLK_START && Current_Wall_CLK_Hour < INLET_CLK_STOP))
 8000720:	4b6c      	ldr	r3, [pc, #432]	; (80008d4 <main+0x348>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	b2da      	uxtb	r2, r3
 8000726:	4b5a      	ldr	r3, [pc, #360]	; (8000890 <main+0x304>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	b2db      	uxtb	r3, r3
 800072c:	429a      	cmp	r2, r3
 800072e:	d307      	bcc.n	8000740 <main+0x1b4>
 8000730:	4b68      	ldr	r3, [pc, #416]	; (80008d4 <main+0x348>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	b2da      	uxtb	r2, r3
 8000736:	4b58      	ldr	r3, [pc, #352]	; (8000898 <main+0x30c>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	429a      	cmp	r2, r3
 800073e:	d3e7      	bcc.n	8000710 <main+0x184>
             || (INLET_CLK_START > INLET_CLK_STOP && (Current_Wall_CLK_Hour >= INLET_CLK_START || Current_Wall_CLK_Hour < INLET_CLK_STOP)) ) {}
 8000740:	4b53      	ldr	r3, [pc, #332]	; (8000890 <main+0x304>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	b2da      	uxtb	r2, r3
 8000746:	4b54      	ldr	r3, [pc, #336]	; (8000898 <main+0x30c>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	b2db      	uxtb	r3, r3
 800074c:	429a      	cmp	r2, r3
 800074e:	f240 80d7 	bls.w	8000900 <main+0x374>
 8000752:	4b60      	ldr	r3, [pc, #384]	; (80008d4 <main+0x348>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	b2da      	uxtb	r2, r3
 8000758:	4b4d      	ldr	r3, [pc, #308]	; (8000890 <main+0x304>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	b2db      	uxtb	r3, r3
 800075e:	429a      	cmp	r2, r3
 8000760:	d2d6      	bcs.n	8000710 <main+0x184>
 8000762:	4b5c      	ldr	r3, [pc, #368]	; (80008d4 <main+0x348>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	b2da      	uxtb	r2, r3
 8000768:	4b4b      	ldr	r3, [pc, #300]	; (8000898 <main+0x30c>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	b2db      	uxtb	r3, r3
 800076e:	429a      	cmp	r2, r3
 8000770:	d3ce      	bcc.n	8000710 <main+0x184>
  			break;
 8000772:	e0c5      	b.n	8000900 <main+0x374>
  		}

  		if (INLET_PWM == 0) {
 8000774:	4b39      	ldr	r3, [pc, #228]	; (800085c <main+0x2d0>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	b2db      	uxtb	r3, r3
 800077a:	2b00      	cmp	r3, #0
 800077c:	d10d      	bne.n	800079a <main+0x20e>
  			Current_DC_Motor_Percent_PWM = ADC_Manual_Control_Percent_PWM();
 800077e:	f001 fa31 	bl	8001be4 <ADC_Manual_Control_Percent_PWM>
 8000782:	4603      	mov	r3, r0
 8000784:	461a      	mov	r2, r3
 8000786:	4b5c      	ldr	r3, [pc, #368]	; (80008f8 <main+0x36c>)
 8000788:	701a      	strb	r2, [r3, #0]
  			Control_DC_Motor_PWM( ADC_Manual_Control_Percent_PWM() , 0);
 800078a:	f001 fa2b 	bl	8001be4 <ADC_Manual_Control_Percent_PWM>
 800078e:	4603      	mov	r3, r0
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f001 f91c 	bl	80019d0 <Control_DC_Motor_PWM>
 8000798:	e025      	b.n	80007e6 <main+0x25a>
  		} else if (INLET_PWM == 1) {
 800079a:	4b30      	ldr	r3, [pc, #192]	; (800085c <main+0x2d0>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d107      	bne.n	80007b4 <main+0x228>
  			Current_DC_Motor_Percent_PWM = 60;
 80007a4:	4b54      	ldr	r3, [pc, #336]	; (80008f8 <main+0x36c>)
 80007a6:	223c      	movs	r2, #60	; 0x3c
 80007a8:	701a      	strb	r2, [r3, #0]
  			Control_DC_Motor_PWM( 60 , 0);
 80007aa:	2100      	movs	r1, #0
 80007ac:	203c      	movs	r0, #60	; 0x3c
 80007ae:	f001 f90f 	bl	80019d0 <Control_DC_Motor_PWM>
 80007b2:	e018      	b.n	80007e6 <main+0x25a>
  		} else if (INLET_PWM == 2) {
 80007b4:	4b29      	ldr	r3, [pc, #164]	; (800085c <main+0x2d0>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	2b02      	cmp	r3, #2
 80007bc:	d107      	bne.n	80007ce <main+0x242>
  			Current_DC_Motor_Percent_PWM = 80;
 80007be:	4b4e      	ldr	r3, [pc, #312]	; (80008f8 <main+0x36c>)
 80007c0:	2250      	movs	r2, #80	; 0x50
 80007c2:	701a      	strb	r2, [r3, #0]
  			Control_DC_Motor_PWM( 80 , 0);
 80007c4:	2100      	movs	r1, #0
 80007c6:	2050      	movs	r0, #80	; 0x50
 80007c8:	f001 f902 	bl	80019d0 <Control_DC_Motor_PWM>
 80007cc:	e00b      	b.n	80007e6 <main+0x25a>
  		} else if (INLET_PWM == 3) {
 80007ce:	4b23      	ldr	r3, [pc, #140]	; (800085c <main+0x2d0>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	2b03      	cmp	r3, #3
 80007d6:	d106      	bne.n	80007e6 <main+0x25a>
  			Current_DC_Motor_Percent_PWM = 99;
 80007d8:	4b47      	ldr	r3, [pc, #284]	; (80008f8 <main+0x36c>)
 80007da:	2263      	movs	r2, #99	; 0x63
 80007dc:	701a      	strb	r2, [r3, #0]
  			Control_DC_Motor_PWM( 99 , 0);
 80007de:	2100      	movs	r1, #0
 80007e0:	2063      	movs	r0, #99	; 0x63
 80007e2:	f001 f8f5 	bl	80019d0 <Control_DC_Motor_PWM>
  		}

      Tank_Level_Lo_Alarm = 0; //clear level low alarm during INLET
 80007e6:	4b45      	ldr	r3, [pc, #276]	; (80008fc <main+0x370>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]
  	while ( (INLET_CLK_START < INLET_CLK_STOP && (Current_Wall_CLK_Hour >= INLET_CLK_START && Current_Wall_CLK_Hour < INLET_CLK_STOP))
 80007ec:	4b28      	ldr	r3, [pc, #160]	; (8000890 <main+0x304>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	4b29      	ldr	r3, [pc, #164]	; (8000898 <main+0x30c>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	b2db      	uxtb	r3, r3
  	     || (INLET_CLK_START > INLET_CLK_STOP && (Current_Wall_CLK_Hour >= INLET_CLK_START || Current_Wall_CLK_Hour < INLET_CLK_STOP)) ) {
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d210      	bcs.n	800081e <main+0x292>
  	while ( (INLET_CLK_START < INLET_CLK_STOP && (Current_Wall_CLK_Hour >= INLET_CLK_START && Current_Wall_CLK_Hour < INLET_CLK_STOP))
 80007fc:	4b35      	ldr	r3, [pc, #212]	; (80008d4 <main+0x348>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b23      	ldr	r3, [pc, #140]	; (8000890 <main+0x304>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	b2db      	uxtb	r3, r3
 8000808:	429a      	cmp	r2, r3
 800080a:	d308      	bcc.n	800081e <main+0x292>
 800080c:	4b31      	ldr	r3, [pc, #196]	; (80008d4 <main+0x348>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	b2da      	uxtb	r2, r3
 8000812:	4b21      	ldr	r3, [pc, #132]	; (8000898 <main+0x30c>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	b2db      	uxtb	r3, r3
 8000818:	429a      	cmp	r2, r3
 800081a:	f4ff af61 	bcc.w	80006e0 <main+0x154>
  	     || (INLET_CLK_START > INLET_CLK_STOP && (Current_Wall_CLK_Hour >= INLET_CLK_START || Current_Wall_CLK_Hour < INLET_CLK_STOP)) ) {
 800081e:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <main+0x304>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	b2da      	uxtb	r2, r3
 8000824:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <main+0x30c>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	b2db      	uxtb	r3, r3
 800082a:	429a      	cmp	r2, r3
 800082c:	d969      	bls.n	8000902 <main+0x376>
 800082e:	4b29      	ldr	r3, [pc, #164]	; (80008d4 <main+0x348>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	b2da      	uxtb	r2, r3
 8000834:	4b16      	ldr	r3, [pc, #88]	; (8000890 <main+0x304>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	429a      	cmp	r2, r3
 800083c:	f4bf af50 	bcs.w	80006e0 <main+0x154>
 8000840:	4b24      	ldr	r3, [pc, #144]	; (80008d4 <main+0x348>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b2da      	uxtb	r2, r3
 8000846:	4b14      	ldr	r3, [pc, #80]	; (8000898 <main+0x30c>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	b2db      	uxtb	r3, r3
 800084c:	429a      	cmp	r2, r3
 800084e:	f4ff af47 	bcc.w	80006e0 <main+0x154>
 8000852:	e056      	b.n	8000902 <main+0x376>
 8000854:	40020000 	.word	0x40020000
 8000858:	080069d4 	.word	0x080069d4
 800085c:	20000095 	.word	0x20000095
 8000860:	080069e4 	.word	0x080069e4
 8000864:	08006a0c 	.word	0x08006a0c
 8000868:	20000096 	.word	0x20000096
 800086c:	08006a54 	.word	0x08006a54
 8000870:	08006a80 	.word	0x08006a80
 8000874:	20000097 	.word	0x20000097
 8000878:	08006a84 	.word	0x08006a84
 800087c:	20000098 	.word	0x20000098
 8000880:	08006ab0 	.word	0x08006ab0
 8000884:	20000099 	.word	0x20000099
 8000888:	08006adc 	.word	0x08006adc
 800088c:	08006b08 	.word	0x08006b08
 8000890:	2000009a 	.word	0x2000009a
 8000894:	08006b54 	.word	0x08006b54
 8000898:	2000009b 	.word	0x2000009b
 800089c:	08006b7c 	.word	0x08006b7c
 80008a0:	2000009c 	.word	0x2000009c
 80008a4:	08006ba4 	.word	0x08006ba4
 80008a8:	2000009d 	.word	0x2000009d
 80008ac:	08006bd0 	.word	0x08006bd0
 80008b0:	2000009e 	.word	0x2000009e
 80008b4:	08006bf8 	.word	0x08006bf8
 80008b8:	2000009f 	.word	0x2000009f
 80008bc:	08006c24 	.word	0x08006c24
 80008c0:	200000a0 	.word	0x200000a0
 80008c4:	08006c4c 	.word	0x08006c4c
 80008c8:	200000a1 	.word	0x200000a1
 80008cc:	08006c78 	.word	0x08006c78
 80008d0:	08006ca0 	.word	0x08006ca0
 80008d4:	200000e0 	.word	0x200000e0
 80008d8:	200000a2 	.word	0x200000a2
 80008dc:	08006cb4 	.word	0x08006cb4
 80008e0:	08006cc4 	.word	0x08006cc4
 80008e4:	200001c4 	.word	0x200001c4
 80008e8:	2000017c 	.word	0x2000017c
 80008ec:	20000134 	.word	0x20000134
 80008f0:	200000e8 	.word	0x200000e8
 80008f4:	200000a3 	.word	0x200000a3
 80008f8:	200000bc 	.word	0x200000bc
 80008fc:	200000e7 	.word	0x200000e7
  			break;
 8000900:	bf00      	nop
  	}

  	// Turn off motor between Switching sequence
  	Current_DC_Motor_Percent_PWM = 0;
 8000902:	4bae      	ldr	r3, [pc, #696]	; (8000bbc <main+0x630>)
 8000904:	2200      	movs	r2, #0
 8000906:	701a      	strb	r2, [r3, #0]
  	Control_DC_Motor_PWM(0, 0);
 8000908:	2100      	movs	r1, #0
 800090a:	2000      	movs	r0, #0
 800090c:	f001 f860 	bl	80019d0 <Control_DC_Motor_PWM>
  	HAL_Delay(1000);
 8000910:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000914:	f001 fe66 	bl	80025e4 <HAL_Delay>
    Get_Water_Percent_Depth();
 8000918:	f001 f992 	bl	8001c40 <Get_Water_Percent_Depth>
    // Check if RESERVOIR IS EMPTY during sequence gap
    if (Tank_Level_Lo_Alarm == 1) {
 800091c:	4ba8      	ldr	r3, [pc, #672]	; (8000bc0 <main+0x634>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	b2db      	uxtb	r3, r3
 8000922:	2b01      	cmp	r3, #1
 8000924:	d14d      	bne.n	80009c2 <main+0x436>
      System_Interlock();
 8000926:	f001 faef 	bl	8001f08 <System_Interlock>
    }

  	/* -- ZONE 1 -- */
  	while ( (Zone_1_CLK_START < Zone_1_CLK_STOP && Current_Wall_CLK_Hour >= Zone_1_CLK_START && Current_Wall_CLK_Hour < Zone_1_CLK_STOP)
 800092a:	e04a      	b.n	80009c2 <main+0x436>
  	     || (Zone_1_CLK_START > Zone_1_CLK_STOP && (Current_Wall_CLK_Hour >= Zone_1_CLK_START || Current_Wall_CLK_Hour < Zone_1_CLK_STOP)) ) {
  		Current_Zone = ZONE_1;
 800092c:	4ba5      	ldr	r3, [pc, #660]	; (8000bc4 <main+0x638>)
 800092e:	2201      	movs	r2, #1
 8000930:	701a      	strb	r2, [r3, #0]
  		Set_LED_Color(LED_RED);
 8000932:	2001      	movs	r0, #1
 8000934:	f001 f9fe 	bl	8001d34 <Set_LED_Color>
  		Control_Servo_Motor_PWM(1);
 8000938:	2001      	movs	r0, #1
 800093a:	f001 f879 	bl	8001a30 <Control_Servo_Motor_PWM>
  		Get_Water_Percent_Depth();
 800093e:	f001 f97f 	bl	8001c40 <Get_Water_Percent_Depth>

  		//RESERVOIR IS EMPTY
  		if (Tank_Level_Lo_Alarm == 1) {
 8000942:	4b9f      	ldr	r3, [pc, #636]	; (8000bc0 <main+0x634>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	b2db      	uxtb	r3, r3
 8000948:	2b01      	cmp	r3, #1
 800094a:	d101      	bne.n	8000950 <main+0x3c4>
  			System_Interlock();
 800094c:	f001 fadc 	bl	8001f08 <System_Interlock>
  		}

  		if (Zone_1_PWM == 0) {
 8000950:	4b9d      	ldr	r3, [pc, #628]	; (8000bc8 <main+0x63c>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	b2db      	uxtb	r3, r3
 8000956:	2b00      	cmp	r3, #0
 8000958:	d10d      	bne.n	8000976 <main+0x3ea>
  			Current_DC_Motor_Percent_PWM = ADC_Manual_Control_Percent_PWM();
 800095a:	f001 f943 	bl	8001be4 <ADC_Manual_Control_Percent_PWM>
 800095e:	4603      	mov	r3, r0
 8000960:	461a      	mov	r2, r3
 8000962:	4b96      	ldr	r3, [pc, #600]	; (8000bbc <main+0x630>)
 8000964:	701a      	strb	r2, [r3, #0]
  			Control_DC_Motor_PWM( ADC_Manual_Control_Percent_PWM() , 1);
 8000966:	f001 f93d 	bl	8001be4 <ADC_Manual_Control_Percent_PWM>
 800096a:	4603      	mov	r3, r0
 800096c:	2101      	movs	r1, #1
 800096e:	4618      	mov	r0, r3
 8000970:	f001 f82e 	bl	80019d0 <Control_DC_Motor_PWM>
 8000974:	e025      	b.n	80009c2 <main+0x436>
  		} else if (Zone_1_PWM == 1) {
 8000976:	4b94      	ldr	r3, [pc, #592]	; (8000bc8 <main+0x63c>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	2b01      	cmp	r3, #1
 800097e:	d107      	bne.n	8000990 <main+0x404>
  			Current_DC_Motor_Percent_PWM = 60;
 8000980:	4b8e      	ldr	r3, [pc, #568]	; (8000bbc <main+0x630>)
 8000982:	223c      	movs	r2, #60	; 0x3c
 8000984:	701a      	strb	r2, [r3, #0]
  			Control_DC_Motor_PWM(60 , 1);
 8000986:	2101      	movs	r1, #1
 8000988:	203c      	movs	r0, #60	; 0x3c
 800098a:	f001 f821 	bl	80019d0 <Control_DC_Motor_PWM>
 800098e:	e018      	b.n	80009c2 <main+0x436>
  		} else if (Zone_1_PWM == 2) {
 8000990:	4b8d      	ldr	r3, [pc, #564]	; (8000bc8 <main+0x63c>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	b2db      	uxtb	r3, r3
 8000996:	2b02      	cmp	r3, #2
 8000998:	d107      	bne.n	80009aa <main+0x41e>
  			Current_DC_Motor_Percent_PWM = 80;
 800099a:	4b88      	ldr	r3, [pc, #544]	; (8000bbc <main+0x630>)
 800099c:	2250      	movs	r2, #80	; 0x50
 800099e:	701a      	strb	r2, [r3, #0]
  			Control_DC_Motor_PWM(80 , 1);
 80009a0:	2101      	movs	r1, #1
 80009a2:	2050      	movs	r0, #80	; 0x50
 80009a4:	f001 f814 	bl	80019d0 <Control_DC_Motor_PWM>
 80009a8:	e00b      	b.n	80009c2 <main+0x436>
  		} else if (Zone_1_PWM == 3) {
 80009aa:	4b87      	ldr	r3, [pc, #540]	; (8000bc8 <main+0x63c>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	2b03      	cmp	r3, #3
 80009b2:	d106      	bne.n	80009c2 <main+0x436>
  			Current_DC_Motor_Percent_PWM = 99;
 80009b4:	4b81      	ldr	r3, [pc, #516]	; (8000bbc <main+0x630>)
 80009b6:	2263      	movs	r2, #99	; 0x63
 80009b8:	701a      	strb	r2, [r3, #0]
  			Control_DC_Motor_PWM(99 , 1);
 80009ba:	2101      	movs	r1, #1
 80009bc:	2063      	movs	r0, #99	; 0x63
 80009be:	f001 f807 	bl	80019d0 <Control_DC_Motor_PWM>
  	while ( (Zone_1_CLK_START < Zone_1_CLK_STOP && Current_Wall_CLK_Hour >= Zone_1_CLK_START && Current_Wall_CLK_Hour < Zone_1_CLK_STOP)
 80009c2:	4b82      	ldr	r3, [pc, #520]	; (8000bcc <main+0x640>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	4b81      	ldr	r3, [pc, #516]	; (8000bd0 <main+0x644>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	b2db      	uxtb	r3, r3
  	     || (Zone_1_CLK_START > Zone_1_CLK_STOP && (Current_Wall_CLK_Hour >= Zone_1_CLK_START || Current_Wall_CLK_Hour < Zone_1_CLK_STOP)) ) {
 80009ce:	429a      	cmp	r2, r3
 80009d0:	d20f      	bcs.n	80009f2 <main+0x466>
  	while ( (Zone_1_CLK_START < Zone_1_CLK_STOP && Current_Wall_CLK_Hour >= Zone_1_CLK_START && Current_Wall_CLK_Hour < Zone_1_CLK_STOP)
 80009d2:	4b80      	ldr	r3, [pc, #512]	; (8000bd4 <main+0x648>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	b2da      	uxtb	r2, r3
 80009d8:	4b7c      	ldr	r3, [pc, #496]	; (8000bcc <main+0x640>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	429a      	cmp	r2, r3
 80009e0:	d307      	bcc.n	80009f2 <main+0x466>
 80009e2:	4b7c      	ldr	r3, [pc, #496]	; (8000bd4 <main+0x648>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	b2da      	uxtb	r2, r3
 80009e8:	4b79      	ldr	r3, [pc, #484]	; (8000bd0 <main+0x644>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	429a      	cmp	r2, r3
 80009f0:	d39c      	bcc.n	800092c <main+0x3a0>
  	     || (Zone_1_CLK_START > Zone_1_CLK_STOP && (Current_Wall_CLK_Hour >= Zone_1_CLK_START || Current_Wall_CLK_Hour < Zone_1_CLK_STOP)) ) {
 80009f2:	4b76      	ldr	r3, [pc, #472]	; (8000bcc <main+0x640>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	4b75      	ldr	r3, [pc, #468]	; (8000bd0 <main+0x644>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d90f      	bls.n	8000a22 <main+0x496>
 8000a02:	4b74      	ldr	r3, [pc, #464]	; (8000bd4 <main+0x648>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	4b70      	ldr	r3, [pc, #448]	; (8000bcc <main+0x640>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d28c      	bcs.n	800092c <main+0x3a0>
 8000a12:	4b70      	ldr	r3, [pc, #448]	; (8000bd4 <main+0x648>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	4b6d      	ldr	r3, [pc, #436]	; (8000bd0 <main+0x644>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	d384      	bcc.n	800092c <main+0x3a0>
  		}
  	}

  	// Turn off motor between Switching sequence
  	Current_DC_Motor_Percent_PWM = 0;
 8000a22:	4b66      	ldr	r3, [pc, #408]	; (8000bbc <main+0x630>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]
  	Control_DC_Motor_PWM(0, 0);
 8000a28:	2100      	movs	r1, #0
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f000 ffd0 	bl	80019d0 <Control_DC_Motor_PWM>
  	HAL_Delay(1000);
 8000a30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a34:	f001 fdd6 	bl	80025e4 <HAL_Delay>
    Get_Water_Percent_Depth();
 8000a38:	f001 f902 	bl	8001c40 <Get_Water_Percent_Depth>
    // Check if RESERVOIR IS EMPTY during sequence gap
    if (Tank_Level_Lo_Alarm == 1) {
 8000a3c:	4b60      	ldr	r3, [pc, #384]	; (8000bc0 <main+0x634>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d150      	bne.n	8000ae8 <main+0x55c>
      System_Interlock();
 8000a46:	f001 fa5f 	bl	8001f08 <System_Interlock>
    }

  	/* -- ZONE 2 -- */
  	while ( (Zone_2_CLK_START < Zone_2_CLK_STOP && Current_Wall_CLK_Hour >= Zone_2_CLK_START && Current_Wall_CLK_Hour < Zone_2_CLK_STOP)
 8000a4a:	e04d      	b.n	8000ae8 <main+0x55c>
  	     || (Zone_2_CLK_START > Zone_2_CLK_STOP && (Current_Wall_CLK_Hour >= Zone_2_CLK_START || Current_Wall_CLK_Hour < Zone_2_CLK_STOP)) ) {
  		Current_Zone = ZONE_2;
 8000a4c:	4b5d      	ldr	r3, [pc, #372]	; (8000bc4 <main+0x638>)
 8000a4e:	2202      	movs	r2, #2
 8000a50:	701a      	strb	r2, [r3, #0]
  		Set_LED_Color(LED_GREEN);
 8000a52:	2002      	movs	r0, #2
 8000a54:	f001 f96e 	bl	8001d34 <Set_LED_Color>
  		Control_Servo_Motor_PWM(2);
 8000a58:	2002      	movs	r0, #2
 8000a5a:	f000 ffe9 	bl	8001a30 <Control_Servo_Motor_PWM>
  		Get_Water_Percent_Depth();
 8000a5e:	f001 f8ef 	bl	8001c40 <Get_Water_Percent_Depth>

  		//RESERVOIR IS EMPTY
  		if (Tank_Level_Lo_Alarm == 1) {
 8000a62:	4b57      	ldr	r3, [pc, #348]	; (8000bc0 <main+0x634>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d101      	bne.n	8000a70 <main+0x4e4>
  			System_Interlock();
 8000a6c:	f001 fa4c 	bl	8001f08 <System_Interlock>
  		}

  		if (Zone_2_PWM == 0) {
 8000a70:	4b59      	ldr	r3, [pc, #356]	; (8000bd8 <main+0x64c>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d10d      	bne.n	8000a96 <main+0x50a>
  			Current_DC_Motor_Percent_PWM = ADC_Manual_Control_Percent_PWM();
 8000a7a:	f001 f8b3 	bl	8001be4 <ADC_Manual_Control_Percent_PWM>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b4e      	ldr	r3, [pc, #312]	; (8000bbc <main+0x630>)
 8000a84:	701a      	strb	r2, [r3, #0]
  			Control_DC_Motor_PWM( ADC_Manual_Control_Percent_PWM() , 1);
 8000a86:	f001 f8ad 	bl	8001be4 <ADC_Manual_Control_Percent_PWM>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 ff9e 	bl	80019d0 <Control_DC_Motor_PWM>
 8000a94:	e025      	b.n	8000ae2 <main+0x556>
  		} else if (Zone_2_PWM == 1) {
 8000a96:	4b50      	ldr	r3, [pc, #320]	; (8000bd8 <main+0x64c>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d107      	bne.n	8000ab0 <main+0x524>
  			Current_DC_Motor_Percent_PWM = 60;
 8000aa0:	4b46      	ldr	r3, [pc, #280]	; (8000bbc <main+0x630>)
 8000aa2:	223c      	movs	r2, #60	; 0x3c
 8000aa4:	701a      	strb	r2, [r3, #0]
  			Control_DC_Motor_PWM(60 , 1);
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	203c      	movs	r0, #60	; 0x3c
 8000aaa:	f000 ff91 	bl	80019d0 <Control_DC_Motor_PWM>
 8000aae:	e018      	b.n	8000ae2 <main+0x556>
  		} else if (Zone_2_PWM == 2) {
 8000ab0:	4b49      	ldr	r3, [pc, #292]	; (8000bd8 <main+0x64c>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	d107      	bne.n	8000aca <main+0x53e>
  			Current_DC_Motor_Percent_PWM = 80;
 8000aba:	4b40      	ldr	r3, [pc, #256]	; (8000bbc <main+0x630>)
 8000abc:	2250      	movs	r2, #80	; 0x50
 8000abe:	701a      	strb	r2, [r3, #0]
  			Control_DC_Motor_PWM(80 , 1);
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	2050      	movs	r0, #80	; 0x50
 8000ac4:	f000 ff84 	bl	80019d0 <Control_DC_Motor_PWM>
 8000ac8:	e00b      	b.n	8000ae2 <main+0x556>
  		} else if (Zone_2_PWM == 3) {
 8000aca:	4b43      	ldr	r3, [pc, #268]	; (8000bd8 <main+0x64c>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	2b03      	cmp	r3, #3
 8000ad2:	d106      	bne.n	8000ae2 <main+0x556>
  			Current_DC_Motor_Percent_PWM = 99;
 8000ad4:	4b39      	ldr	r3, [pc, #228]	; (8000bbc <main+0x630>)
 8000ad6:	2263      	movs	r2, #99	; 0x63
 8000ad8:	701a      	strb	r2, [r3, #0]
  			Control_DC_Motor_PWM(99 , 1);
 8000ada:	2101      	movs	r1, #1
 8000adc:	2063      	movs	r0, #99	; 0x63
 8000ade:	f000 ff77 	bl	80019d0 <Control_DC_Motor_PWM>
  		}

      Tank_Level_Hi_Alarm = 0;
 8000ae2:	4b3e      	ldr	r3, [pc, #248]	; (8000bdc <main+0x650>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	701a      	strb	r2, [r3, #0]
  	while ( (Zone_2_CLK_START < Zone_2_CLK_STOP && Current_Wall_CLK_Hour >= Zone_2_CLK_START && Current_Wall_CLK_Hour < Zone_2_CLK_STOP)
 8000ae8:	4b3d      	ldr	r3, [pc, #244]	; (8000be0 <main+0x654>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4b3d      	ldr	r3, [pc, #244]	; (8000be4 <main+0x658>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	b2db      	uxtb	r3, r3
  	     || (Zone_2_CLK_START > Zone_2_CLK_STOP && (Current_Wall_CLK_Hour >= Zone_2_CLK_START || Current_Wall_CLK_Hour < Zone_2_CLK_STOP)) ) {
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d20f      	bcs.n	8000b18 <main+0x58c>
  	while ( (Zone_2_CLK_START < Zone_2_CLK_STOP && Current_Wall_CLK_Hour >= Zone_2_CLK_START && Current_Wall_CLK_Hour < Zone_2_CLK_STOP)
 8000af8:	4b36      	ldr	r3, [pc, #216]	; (8000bd4 <main+0x648>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	4b38      	ldr	r3, [pc, #224]	; (8000be0 <main+0x654>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d307      	bcc.n	8000b18 <main+0x58c>
 8000b08:	4b32      	ldr	r3, [pc, #200]	; (8000bd4 <main+0x648>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	4b35      	ldr	r3, [pc, #212]	; (8000be4 <main+0x658>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d399      	bcc.n	8000a4c <main+0x4c0>
  	     || (Zone_2_CLK_START > Zone_2_CLK_STOP && (Current_Wall_CLK_Hour >= Zone_2_CLK_START || Current_Wall_CLK_Hour < Zone_2_CLK_STOP)) ) {
 8000b18:	4b31      	ldr	r3, [pc, #196]	; (8000be0 <main+0x654>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4b31      	ldr	r3, [pc, #196]	; (8000be4 <main+0x658>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d90f      	bls.n	8000b48 <main+0x5bc>
 8000b28:	4b2a      	ldr	r3, [pc, #168]	; (8000bd4 <main+0x648>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	4b2c      	ldr	r3, [pc, #176]	; (8000be0 <main+0x654>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d289      	bcs.n	8000a4c <main+0x4c0>
 8000b38:	4b26      	ldr	r3, [pc, #152]	; (8000bd4 <main+0x648>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	4b29      	ldr	r3, [pc, #164]	; (8000be4 <main+0x658>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d381      	bcc.n	8000a4c <main+0x4c0>
  	}

  	// Turn off motor between Switching sequence
  	Current_DC_Motor_Percent_PWM = 0;
 8000b48:	4b1c      	ldr	r3, [pc, #112]	; (8000bbc <main+0x630>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	701a      	strb	r2, [r3, #0]
  	Control_DC_Motor_PWM(0, 0);
 8000b4e:	2100      	movs	r1, #0
 8000b50:	2000      	movs	r0, #0
 8000b52:	f000 ff3d 	bl	80019d0 <Control_DC_Motor_PWM>
  	HAL_Delay(1000);
 8000b56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b5a:	f001 fd43 	bl	80025e4 <HAL_Delay>
    Get_Water_Percent_Depth();
 8000b5e:	f001 f86f 	bl	8001c40 <Get_Water_Percent_Depth>
    // Check if RESERVOIR IS EMPTY during sequence gap
    if (Tank_Level_Lo_Alarm == 1) {
 8000b62:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <main+0x634>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d165      	bne.n	8000c38 <main+0x6ac>
      System_Interlock();
 8000b6c:	f001 f9cc 	bl	8001f08 <System_Interlock>
    }

  	/* -- ZONE 3 -- */
  	while ( (Zone_3_CLK_START < Zone_3_CLK_STOP && Current_Wall_CLK_Hour >= Zone_3_CLK_START && Current_Wall_CLK_Hour < Zone_3_CLK_STOP)
 8000b70:	e062      	b.n	8000c38 <main+0x6ac>
  	     || (Zone_3_CLK_START > Zone_3_CLK_STOP && (Current_Wall_CLK_Hour >= Zone_3_CLK_START || Current_Wall_CLK_Hour < Zone_3_CLK_STOP)) ) {
  		Current_Zone = ZONE_3;
 8000b72:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <main+0x638>)
 8000b74:	2203      	movs	r2, #3
 8000b76:	701a      	strb	r2, [r3, #0]
  		Set_LED_Color(LED_BLUE);
 8000b78:	2003      	movs	r0, #3
 8000b7a:	f001 f8db 	bl	8001d34 <Set_LED_Color>
  		Control_Servo_Motor_PWM(3);
 8000b7e:	2003      	movs	r0, #3
 8000b80:	f000 ff56 	bl	8001a30 <Control_Servo_Motor_PWM>
  		Get_Water_Percent_Depth();
 8000b84:	f001 f85c 	bl	8001c40 <Get_Water_Percent_Depth>

  		//RESERVOIR IS EMPTY
  		if (Tank_Level_Lo_Alarm == 1) {
 8000b88:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <main+0x634>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d101      	bne.n	8000b96 <main+0x60a>
  			System_Interlock();
 8000b92:	f001 f9b9 	bl	8001f08 <System_Interlock>
  		}

  		if (Zone_3_PWM == 0) {
 8000b96:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <main+0x65c>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d125      	bne.n	8000bec <main+0x660>
  			Current_DC_Motor_Percent_PWM = ADC_Manual_Control_Percent_PWM();
 8000ba0:	f001 f820 	bl	8001be4 <ADC_Manual_Control_Percent_PWM>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <main+0x630>)
 8000baa:	701a      	strb	r2, [r3, #0]
  			Control_DC_Motor_PWM( ADC_Manual_Control_Percent_PWM() , 1);
 8000bac:	f001 f81a 	bl	8001be4 <ADC_Manual_Control_Percent_PWM>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f000 ff0b 	bl	80019d0 <Control_DC_Motor_PWM>
 8000bba:	e03d      	b.n	8000c38 <main+0x6ac>
 8000bbc:	200000bc 	.word	0x200000bc
 8000bc0:	200000e7 	.word	0x200000e7
 8000bc4:	200000a3 	.word	0x200000a3
 8000bc8:	20000096 	.word	0x20000096
 8000bcc:	2000009c 	.word	0x2000009c
 8000bd0:	2000009d 	.word	0x2000009d
 8000bd4:	200000e0 	.word	0x200000e0
 8000bd8:	20000097 	.word	0x20000097
 8000bdc:	200000e8 	.word	0x200000e8
 8000be0:	2000009e 	.word	0x2000009e
 8000be4:	2000009f 	.word	0x2000009f
 8000be8:	20000098 	.word	0x20000098
  		} else if (Zone_3_PWM == 1) {
 8000bec:	4b36      	ldr	r3, [pc, #216]	; (8000cc8 <main+0x73c>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d107      	bne.n	8000c06 <main+0x67a>
  			Current_DC_Motor_Percent_PWM = 60;
 8000bf6:	4b35      	ldr	r3, [pc, #212]	; (8000ccc <main+0x740>)
 8000bf8:	223c      	movs	r2, #60	; 0x3c
 8000bfa:	701a      	strb	r2, [r3, #0]
  			Control_DC_Motor_PWM(60 , 1);
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	203c      	movs	r0, #60	; 0x3c
 8000c00:	f000 fee6 	bl	80019d0 <Control_DC_Motor_PWM>
 8000c04:	e018      	b.n	8000c38 <main+0x6ac>
  		} else if (Zone_3_PWM == 2) {
 8000c06:	4b30      	ldr	r3, [pc, #192]	; (8000cc8 <main+0x73c>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	2b02      	cmp	r3, #2
 8000c0e:	d107      	bne.n	8000c20 <main+0x694>
  			Current_DC_Motor_Percent_PWM = 80;
 8000c10:	4b2e      	ldr	r3, [pc, #184]	; (8000ccc <main+0x740>)
 8000c12:	2250      	movs	r2, #80	; 0x50
 8000c14:	701a      	strb	r2, [r3, #0]
  			Control_DC_Motor_PWM(80 , 1);
 8000c16:	2101      	movs	r1, #1
 8000c18:	2050      	movs	r0, #80	; 0x50
 8000c1a:	f000 fed9 	bl	80019d0 <Control_DC_Motor_PWM>
 8000c1e:	e00b      	b.n	8000c38 <main+0x6ac>
  		} else if (Zone_3_PWM == 3) {
 8000c20:	4b29      	ldr	r3, [pc, #164]	; (8000cc8 <main+0x73c>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	2b03      	cmp	r3, #3
 8000c28:	d106      	bne.n	8000c38 <main+0x6ac>
  			Current_DC_Motor_Percent_PWM = 99;
 8000c2a:	4b28      	ldr	r3, [pc, #160]	; (8000ccc <main+0x740>)
 8000c2c:	2263      	movs	r2, #99	; 0x63
 8000c2e:	701a      	strb	r2, [r3, #0]
  			Control_DC_Motor_PWM(99 , 1);
 8000c30:	2101      	movs	r1, #1
 8000c32:	2063      	movs	r0, #99	; 0x63
 8000c34:	f000 fecc 	bl	80019d0 <Control_DC_Motor_PWM>
  	while ( (Zone_3_CLK_START < Zone_3_CLK_STOP && Current_Wall_CLK_Hour >= Zone_3_CLK_START && Current_Wall_CLK_Hour < Zone_3_CLK_STOP)
 8000c38:	4b25      	ldr	r3, [pc, #148]	; (8000cd0 <main+0x744>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	4b25      	ldr	r3, [pc, #148]	; (8000cd4 <main+0x748>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	b2db      	uxtb	r3, r3
  	     || (Zone_3_CLK_START > Zone_3_CLK_STOP && (Current_Wall_CLK_Hour >= Zone_3_CLK_START || Current_Wall_CLK_Hour < Zone_3_CLK_STOP)) ) {
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d20f      	bcs.n	8000c68 <main+0x6dc>
  	while ( (Zone_3_CLK_START < Zone_3_CLK_STOP && Current_Wall_CLK_Hour >= Zone_3_CLK_START && Current_Wall_CLK_Hour < Zone_3_CLK_STOP)
 8000c48:	4b23      	ldr	r3, [pc, #140]	; (8000cd8 <main+0x74c>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4b20      	ldr	r3, [pc, #128]	; (8000cd0 <main+0x744>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d307      	bcc.n	8000c68 <main+0x6dc>
 8000c58:	4b1f      	ldr	r3, [pc, #124]	; (8000cd8 <main+0x74c>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <main+0x748>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d384      	bcc.n	8000b72 <main+0x5e6>
  	     || (Zone_3_CLK_START > Zone_3_CLK_STOP && (Current_Wall_CLK_Hour >= Zone_3_CLK_START || Current_Wall_CLK_Hour < Zone_3_CLK_STOP)) ) {
 8000c68:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <main+0x744>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <main+0x748>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d911      	bls.n	8000c9c <main+0x710>
 8000c78:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <main+0x74c>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <main+0x744>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	429a      	cmp	r2, r3
 8000c86:	f4bf af74 	bcs.w	8000b72 <main+0x5e6>
 8000c8a:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <main+0x74c>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <main+0x748>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	429a      	cmp	r2, r3
 8000c98:	f4ff af6b 	bcc.w	8000b72 <main+0x5e6>
  		}
  	}

    Get_Water_Percent_Depth();
 8000c9c:	f000 ffd0 	bl	8001c40 <Get_Water_Percent_Depth>
    // Check if RESERVOIR IS EMPTY during sequence gap
    if (Tank_Level_Lo_Alarm == 1) {
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <main+0x750>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d101      	bne.n	8000cae <main+0x722>
      System_Interlock();
 8000caa:	f001 f92d 	bl	8001f08 <System_Interlock>
    }
  	// Turn off motor between Switching sequence
  	Current_DC_Motor_Percent_PWM = 0;
 8000cae:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <main+0x740>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	701a      	strb	r2, [r3, #0]
  	Control_DC_Motor_PWM(0, 0);
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f000 fe8a 	bl	80019d0 <Control_DC_Motor_PWM>
  	HAL_Delay(1000);
 8000cbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cc0:	f001 fc90 	bl	80025e4 <HAL_Delay>
  	Tank_Level_Hi_Alarm = 0;
 8000cc4:	e508      	b.n	80006d8 <main+0x14c>
 8000cc6:	bf00      	nop
 8000cc8:	20000098 	.word	0x20000098
 8000ccc:	200000bc 	.word	0x200000bc
 8000cd0:	200000a0 	.word	0x200000a0
 8000cd4:	200000a1 	.word	0x200000a1
 8000cd8:	200000e0 	.word	0x200000e0
 8000cdc:	200000e7 	.word	0x200000e7

08000ce0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b094      	sub	sp, #80	; 0x50
 8000ce4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce6:	f107 0320 	add.w	r3, r7, #32
 8000cea:	2230      	movs	r2, #48	; 0x30
 8000cec:	2100      	movs	r1, #0
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f005 f9d0 	bl	8006094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d04:	2300      	movs	r3, #0
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	4b23      	ldr	r3, [pc, #140]	; (8000d98 <SystemClock_Config+0xb8>)
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0c:	4a22      	ldr	r2, [pc, #136]	; (8000d98 <SystemClock_Config+0xb8>)
 8000d0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d12:	6413      	str	r3, [r2, #64]	; 0x40
 8000d14:	4b20      	ldr	r3, [pc, #128]	; (8000d98 <SystemClock_Config+0xb8>)
 8000d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d20:	2300      	movs	r3, #0
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	4b1d      	ldr	r3, [pc, #116]	; (8000d9c <SystemClock_Config+0xbc>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d2c:	4a1b      	ldr	r2, [pc, #108]	; (8000d9c <SystemClock_Config+0xbc>)
 8000d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	4b19      	ldr	r3, [pc, #100]	; (8000d9c <SystemClock_Config+0xbc>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d3c:	607b      	str	r3, [r7, #4]
 8000d3e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d40:	2302      	movs	r3, #2
 8000d42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d44:	2301      	movs	r3, #1
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d48:	2310      	movs	r3, #16
 8000d4a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d50:	f107 0320 	add.w	r3, r7, #32
 8000d54:	4618      	mov	r0, r3
 8000d56:	f002 fbbf 	bl	80034d8 <HAL_RCC_OscConfig>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000d60:	f001 f900 	bl	8001f64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d64:	230f      	movs	r3, #15
 8000d66:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d78:	f107 030c 	add.w	r3, r7, #12
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f002 fe22 	bl	80039c8 <HAL_RCC_ClockConfig>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000d8a:	f001 f8eb 	bl	8001f64 <Error_Handler>
  }
}
 8000d8e:	bf00      	nop
 8000d90:	3750      	adds	r7, #80	; 0x50
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40007000 	.word	0x40007000

08000da0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000da6:	463b      	mov	r3, r7
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000db2:	4b21      	ldr	r3, [pc, #132]	; (8000e38 <MX_ADC1_Init+0x98>)
 8000db4:	4a21      	ldr	r2, [pc, #132]	; (8000e3c <MX_ADC1_Init+0x9c>)
 8000db6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000db8:	4b1f      	ldr	r3, [pc, #124]	; (8000e38 <MX_ADC1_Init+0x98>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000dbe:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <MX_ADC1_Init+0x98>)
 8000dc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000dc4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000dc6:	4b1c      	ldr	r3, [pc, #112]	; (8000e38 <MX_ADC1_Init+0x98>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dcc:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <MX_ADC1_Init+0x98>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dd2:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <MX_ADC1_Init+0x98>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dda:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <MX_ADC1_Init+0x98>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000de0:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <MX_ADC1_Init+0x98>)
 8000de2:	4a17      	ldr	r2, [pc, #92]	; (8000e40 <MX_ADC1_Init+0xa0>)
 8000de4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000de6:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <MX_ADC1_Init+0x98>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000dec:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <MX_ADC1_Init+0x98>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <MX_ADC1_Init+0x98>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <MX_ADC1_Init+0x98>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e00:	480d      	ldr	r0, [pc, #52]	; (8000e38 <MX_ADC1_Init+0x98>)
 8000e02:	f001 fc13 	bl	800262c <HAL_ADC_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e0c:	f001 f8aa 	bl	8001f64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000e10:	2309      	movs	r3, #9
 8000e12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e14:	2301      	movs	r3, #1
 8000e16:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e1c:	463b      	mov	r3, r7
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4805      	ldr	r0, [pc, #20]	; (8000e38 <MX_ADC1_Init+0x98>)
 8000e22:	f001 fdc7 	bl	80029b4 <HAL_ADC_ConfigChannel>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e2c:	f001 f89a 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e30:	bf00      	nop
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	200000ec 	.word	0x200000ec
 8000e3c:	40012000 	.word	0x40012000
 8000e40:	0f000001 	.word	0x0f000001

08000e44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08e      	sub	sp, #56	; 0x38
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e58:	f107 0320 	add.w	r3, r7, #32
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
 8000e70:	615a      	str	r2, [r3, #20]
 8000e72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e74:	4b2d      	ldr	r3, [pc, #180]	; (8000f2c <MX_TIM2_Init+0xe8>)
 8000e76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8000e7c:	4b2b      	ldr	r3, [pc, #172]	; (8000f2c <MX_TIM2_Init+0xe8>)
 8000e7e:	220f      	movs	r2, #15
 8000e80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e82:	4b2a      	ldr	r3, [pc, #168]	; (8000f2c <MX_TIM2_Init+0xe8>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8000e88:	4b28      	ldr	r3, [pc, #160]	; (8000f2c <MX_TIM2_Init+0xe8>)
 8000e8a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000e8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e90:	4b26      	ldr	r3, [pc, #152]	; (8000f2c <MX_TIM2_Init+0xe8>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e96:	4b25      	ldr	r3, [pc, #148]	; (8000f2c <MX_TIM2_Init+0xe8>)
 8000e98:	2280      	movs	r2, #128	; 0x80
 8000e9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e9c:	4823      	ldr	r0, [pc, #140]	; (8000f2c <MX_TIM2_Init+0xe8>)
 8000e9e:	f002 ffb3 	bl	8003e08 <HAL_TIM_Base_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000ea8:	f001 f85c 	bl	8001f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000eb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	481c      	ldr	r0, [pc, #112]	; (8000f2c <MX_TIM2_Init+0xe8>)
 8000eba:	f003 fb85 	bl	80045c8 <HAL_TIM_ConfigClockSource>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000ec4:	f001 f84e 	bl	8001f64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ec8:	4818      	ldr	r0, [pc, #96]	; (8000f2c <MX_TIM2_Init+0xe8>)
 8000eca:	f003 f8a9 	bl	8004020 <HAL_TIM_PWM_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000ed4:	f001 f846 	bl	8001f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ee0:	f107 0320 	add.w	r3, r7, #32
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4811      	ldr	r0, [pc, #68]	; (8000f2c <MX_TIM2_Init+0xe8>)
 8000ee8:	f003 ff2a 	bl	8004d40 <HAL_TIMEx_MasterConfigSynchronization>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000ef2:	f001 f837 	bl	8001f64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ef6:	2360      	movs	r3, #96	; 0x60
 8000ef8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	2200      	movs	r2, #0
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4807      	ldr	r0, [pc, #28]	; (8000f2c <MX_TIM2_Init+0xe8>)
 8000f0e:	f003 fa99 	bl	8004444 <HAL_TIM_PWM_ConfigChannel>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000f18:	f001 f824 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f1c:	4803      	ldr	r0, [pc, #12]	; (8000f2c <MX_TIM2_Init+0xe8>)
 8000f1e:	f001 f8e5 	bl	80020ec <HAL_TIM_MspPostInit>

}
 8000f22:	bf00      	nop
 8000f24:	3738      	adds	r7, #56	; 0x38
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000134 	.word	0x20000134

08000f30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08e      	sub	sp, #56	; 0x38
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f44:	f107 0320 	add.w	r3, r7, #32
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
 8000f5c:	615a      	str	r2, [r3, #20]
 8000f5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f60:	4b32      	ldr	r3, [pc, #200]	; (800102c <MX_TIM3_Init+0xfc>)
 8000f62:	4a33      	ldr	r2, [pc, #204]	; (8001030 <MX_TIM3_Init+0x100>)
 8000f64:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8000f66:	4b31      	ldr	r3, [pc, #196]	; (800102c <MX_TIM3_Init+0xfc>)
 8000f68:	220f      	movs	r2, #15
 8000f6a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6c:	4b2f      	ldr	r3, [pc, #188]	; (800102c <MX_TIM3_Init+0xfc>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 8000f72:	4b2e      	ldr	r3, [pc, #184]	; (800102c <MX_TIM3_Init+0xfc>)
 8000f74:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000f78:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7a:	4b2c      	ldr	r3, [pc, #176]	; (800102c <MX_TIM3_Init+0xfc>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f80:	4b2a      	ldr	r3, [pc, #168]	; (800102c <MX_TIM3_Init+0xfc>)
 8000f82:	2280      	movs	r2, #128	; 0x80
 8000f84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f86:	4829      	ldr	r0, [pc, #164]	; (800102c <MX_TIM3_Init+0xfc>)
 8000f88:	f002 ff3e 	bl	8003e08 <HAL_TIM_Base_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000f92:	f000 ffe7 	bl	8001f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4822      	ldr	r0, [pc, #136]	; (800102c <MX_TIM3_Init+0xfc>)
 8000fa4:	f003 fb10 	bl	80045c8 <HAL_TIM_ConfigClockSource>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000fae:	f000 ffd9 	bl	8001f64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fb2:	481e      	ldr	r0, [pc, #120]	; (800102c <MX_TIM3_Init+0xfc>)
 8000fb4:	f003 f834 	bl	8004020 <HAL_TIM_PWM_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000fbe:	f000 ffd1 	bl	8001f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fca:	f107 0320 	add.w	r3, r7, #32
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4816      	ldr	r0, [pc, #88]	; (800102c <MX_TIM3_Init+0xfc>)
 8000fd2:	f003 feb5 	bl	8004d40 <HAL_TIMEx_MasterConfigSynchronization>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000fdc:	f000 ffc2 	bl	8001f64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fe0:	2360      	movs	r3, #96	; 0x60
 8000fe2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	480d      	ldr	r0, [pc, #52]	; (800102c <MX_TIM3_Init+0xfc>)
 8000ff8:	f003 fa24 	bl	8004444 <HAL_TIM_PWM_ConfigChannel>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001002:	f000 ffaf 	bl	8001f64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	2208      	movs	r2, #8
 800100a:	4619      	mov	r1, r3
 800100c:	4807      	ldr	r0, [pc, #28]	; (800102c <MX_TIM3_Init+0xfc>)
 800100e:	f003 fa19 	bl	8004444 <HAL_TIM_PWM_ConfigChannel>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001018:	f000 ffa4 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800101c:	4803      	ldr	r0, [pc, #12]	; (800102c <MX_TIM3_Init+0xfc>)
 800101e:	f001 f865 	bl	80020ec <HAL_TIM_MspPostInit>

}
 8001022:	bf00      	nop
 8001024:	3738      	adds	r7, #56	; 0x38
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	2000017c 	.word	0x2000017c
 8001030:	40000400 	.word	0x40000400

08001034 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800103a:	f107 0308 	add.w	r3, r7, #8
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001048:	463b      	mov	r3, r7
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001050:	4b1d      	ldr	r3, [pc, #116]	; (80010c8 <MX_TIM5_Init+0x94>)
 8001052:	4a1e      	ldr	r2, [pc, #120]	; (80010cc <MX_TIM5_Init+0x98>)
 8001054:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16000-1;
 8001056:	4b1c      	ldr	r3, [pc, #112]	; (80010c8 <MX_TIM5_Init+0x94>)
 8001058:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800105c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105e:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <MX_TIM5_Init+0x94>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8001064:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <MX_TIM5_Init+0x94>)
 8001066:	f240 32e7 	movw	r2, #999	; 0x3e7
 800106a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106c:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <MX_TIM5_Init+0x94>)
 800106e:	2200      	movs	r2, #0
 8001070:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001072:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <MX_TIM5_Init+0x94>)
 8001074:	2280      	movs	r2, #128	; 0x80
 8001076:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001078:	4813      	ldr	r0, [pc, #76]	; (80010c8 <MX_TIM5_Init+0x94>)
 800107a:	f002 fec5 	bl	8003e08 <HAL_TIM_Base_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001084:	f000 ff6e 	bl	8001f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001088:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800108e:	f107 0308 	add.w	r3, r7, #8
 8001092:	4619      	mov	r1, r3
 8001094:	480c      	ldr	r0, [pc, #48]	; (80010c8 <MX_TIM5_Init+0x94>)
 8001096:	f003 fa97 	bl	80045c8 <HAL_TIM_ConfigClockSource>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80010a0:	f000 ff60 	bl	8001f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a4:	2300      	movs	r3, #0
 80010a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80010ac:	463b      	mov	r3, r7
 80010ae:	4619      	mov	r1, r3
 80010b0:	4805      	ldr	r0, [pc, #20]	; (80010c8 <MX_TIM5_Init+0x94>)
 80010b2:	f003 fe45 	bl	8004d40 <HAL_TIMEx_MasterConfigSynchronization>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80010bc:	f000 ff52 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  /* USER CODE END TIM5_Init 2 */

}
 80010c0:	bf00      	nop
 80010c2:	3718      	adds	r7, #24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	200001c4 	.word	0x200001c4
 80010cc:	40000c00 	.word	0x40000c00

080010d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <MX_USART1_UART_Init+0x4c>)
 80010d6:	4a12      	ldr	r2, [pc, #72]	; (8001120 <MX_USART1_UART_Init+0x50>)
 80010d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <MX_USART1_UART_Init+0x4c>)
 80010dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80010e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010e2:	4b0e      	ldr	r3, [pc, #56]	; (800111c <MX_USART1_UART_Init+0x4c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010e8:	4b0c      	ldr	r3, [pc, #48]	; (800111c <MX_USART1_UART_Init+0x4c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010ee:	4b0b      	ldr	r3, [pc, #44]	; (800111c <MX_USART1_UART_Init+0x4c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010f4:	4b09      	ldr	r3, [pc, #36]	; (800111c <MX_USART1_UART_Init+0x4c>)
 80010f6:	220c      	movs	r2, #12
 80010f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010fa:	4b08      	ldr	r3, [pc, #32]	; (800111c <MX_USART1_UART_Init+0x4c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <MX_USART1_UART_Init+0x4c>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001106:	4805      	ldr	r0, [pc, #20]	; (800111c <MX_USART1_UART_Init+0x4c>)
 8001108:	f003 fe9c 	bl	8004e44 <HAL_UART_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001112:	f000 ff27 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	2000020c 	.word	0x2000020c
 8001120:	40011000 	.word	0x40011000

08001124 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <MX_USART2_UART_Init+0x4c>)
 800112a:	4a12      	ldr	r2, [pc, #72]	; (8001174 <MX_USART2_UART_Init+0x50>)
 800112c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <MX_USART2_UART_Init+0x4c>)
 8001130:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001134:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <MX_USART2_UART_Init+0x4c>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <MX_USART2_UART_Init+0x4c>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <MX_USART2_UART_Init+0x4c>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <MX_USART2_UART_Init+0x4c>)
 800114a:	220c      	movs	r2, #12
 800114c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <MX_USART2_UART_Init+0x4c>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <MX_USART2_UART_Init+0x4c>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800115a:	4805      	ldr	r0, [pc, #20]	; (8001170 <MX_USART2_UART_Init+0x4c>)
 800115c:	f003 fe72 	bl	8004e44 <HAL_UART_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001166:	f000 fefd 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000250 	.word	0x20000250
 8001174:	40004400 	.word	0x40004400

08001178 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <MX_USART6_UART_Init+0x4c>)
 800117e:	4a12      	ldr	r2, [pc, #72]	; (80011c8 <MX_USART6_UART_Init+0x50>)
 8001180:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001182:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <MX_USART6_UART_Init+0x4c>)
 8001184:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001188:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <MX_USART6_UART_Init+0x4c>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <MX_USART6_UART_Init+0x4c>)
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001196:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <MX_USART6_UART_Init+0x4c>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800119c:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <MX_USART6_UART_Init+0x4c>)
 800119e:	220c      	movs	r2, #12
 80011a0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011a2:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <MX_USART6_UART_Init+0x4c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <MX_USART6_UART_Init+0x4c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80011ae:	4805      	ldr	r0, [pc, #20]	; (80011c4 <MX_USART6_UART_Init+0x4c>)
 80011b0:	f003 fe48 	bl	8004e44 <HAL_UART_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80011ba:	f000 fed3 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000294 	.word	0x20000294
 80011c8:	40011400 	.word	0x40011400

080011cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08a      	sub	sp, #40	; 0x28
 80011d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
 80011e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	4b52      	ldr	r3, [pc, #328]	; (8001330 <MX_GPIO_Init+0x164>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a51      	ldr	r2, [pc, #324]	; (8001330 <MX_GPIO_Init+0x164>)
 80011ec:	f043 0304 	orr.w	r3, r3, #4
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b4f      	ldr	r3, [pc, #316]	; (8001330 <MX_GPIO_Init+0x164>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0304 	and.w	r3, r3, #4
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	4b4b      	ldr	r3, [pc, #300]	; (8001330 <MX_GPIO_Init+0x164>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a4a      	ldr	r2, [pc, #296]	; (8001330 <MX_GPIO_Init+0x164>)
 8001208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b48      	ldr	r3, [pc, #288]	; (8001330 <MX_GPIO_Init+0x164>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	4b44      	ldr	r3, [pc, #272]	; (8001330 <MX_GPIO_Init+0x164>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a43      	ldr	r2, [pc, #268]	; (8001330 <MX_GPIO_Init+0x164>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b41      	ldr	r3, [pc, #260]	; (8001330 <MX_GPIO_Init+0x164>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	4b3d      	ldr	r3, [pc, #244]	; (8001330 <MX_GPIO_Init+0x164>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a3c      	ldr	r2, [pc, #240]	; (8001330 <MX_GPIO_Init+0x164>)
 8001240:	f043 0302 	orr.w	r3, r3, #2
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b3a      	ldr	r3, [pc, #232]	; (8001330 <MX_GPIO_Init+0x164>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|BLU_Pin|GRN_Pin|RED_Pin, GPIO_PIN_RESET);
 8001252:	2200      	movs	r2, #0
 8001254:	f44f 51c9 	mov.w	r1, #6432	; 0x1920
 8001258:	4836      	ldr	r0, [pc, #216]	; (8001334 <MX_GPIO_Init+0x168>)
 800125a:	f002 f8f1 	bl	8003440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIGIT_B0_Pin|DIGIT_B1_Pin|DIGIT_B2_Pin|DIGIT_B3_Pin, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8001264:	4834      	ldr	r0, [pc, #208]	; (8001338 <MX_GPIO_Init+0x16c>)
 8001266:	f002 f8eb 	bl	8003440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIGIT_A0_Pin|DIGIT_A1_Pin|DIGIT_A2_Pin|DIGIT_A3_Pin, GPIO_PIN_RESET);
 800126a:	2200      	movs	r2, #0
 800126c:	f44f 7158 	mov.w	r1, #864	; 0x360
 8001270:	4832      	ldr	r0, [pc, #200]	; (800133c <MX_GPIO_Init+0x170>)
 8001272:	f002 f8e5 	bl	8003440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLU_PB_Pin */
  GPIO_InitStruct.Pin = BLU_PB_Pin;
 8001276:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800127a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800127c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001280:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLU_PB_GPIO_Port, &GPIO_InitStruct);
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	4619      	mov	r1, r3
 800128c:	482a      	ldr	r0, [pc, #168]	; (8001338 <MX_GPIO_Init+0x16c>)
 800128e:	f001 ff53 	bl	8003138 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin BLU_Pin GRN_Pin RED_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|BLU_Pin|GRN_Pin|RED_Pin;
 8001292:	f44f 53c9 	mov.w	r3, #6432	; 0x1920
 8001296:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001298:	2301      	movs	r3, #1
 800129a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a0:	2300      	movs	r3, #0
 80012a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	4619      	mov	r1, r3
 80012aa:	4822      	ldr	r0, [pc, #136]	; (8001334 <MX_GPIO_Init+0x168>)
 80012ac:	f001 ff44 	bl	8003138 <HAL_GPIO_Init>

  /*Configure GPIO pin : RPM_TICK_Pin */
  GPIO_InitStruct.Pin = RPM_TICK_Pin;
 80012b0:	2304      	movs	r3, #4
 80012b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RPM_TICK_GPIO_Port, &GPIO_InitStruct);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	481d      	ldr	r0, [pc, #116]	; (800133c <MX_GPIO_Init+0x170>)
 80012c6:	f001 ff37 	bl	8003138 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIGIT_B0_Pin DIGIT_B1_Pin DIGIT_B2_Pin DIGIT_B3_Pin */
  GPIO_InitStruct.Pin = DIGIT_B0_Pin|DIGIT_B1_Pin|DIGIT_B2_Pin|DIGIT_B3_Pin;
 80012ca:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80012ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d0:	2301      	movs	r3, #1
 80012d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4619      	mov	r1, r3
 80012e2:	4815      	ldr	r0, [pc, #84]	; (8001338 <MX_GPIO_Init+0x16c>)
 80012e4:	f001 ff28 	bl	8003138 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIGIT_A0_Pin DIGIT_A1_Pin DIGIT_A2_Pin DIGIT_A3_Pin */
  GPIO_InitStruct.Pin = DIGIT_A0_Pin|DIGIT_A1_Pin|DIGIT_A2_Pin|DIGIT_A3_Pin;
 80012e8:	f44f 7358 	mov.w	r3, #864	; 0x360
 80012ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ee:	2301      	movs	r3, #1
 80012f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	4619      	mov	r1, r3
 8001300:	480e      	ldr	r0, [pc, #56]	; (800133c <MX_GPIO_Init+0x170>)
 8001302:	f001 ff19 	bl	8003138 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	2100      	movs	r1, #0
 800130a:	2008      	movs	r0, #8
 800130c:	f001 fe4b 	bl	8002fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001310:	2008      	movs	r0, #8
 8001312:	f001 fe64 	bl	8002fde <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2100      	movs	r1, #0
 800131a:	2028      	movs	r0, #40	; 0x28
 800131c:	f001 fe43 	bl	8002fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001320:	2028      	movs	r0, #40	; 0x28
 8001322:	f001 fe5c 	bl	8002fde <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001326:	bf00      	nop
 8001328:	3728      	adds	r7, #40	; 0x28
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40023800 	.word	0x40023800
 8001334:	40020000 	.word	0x40020000
 8001338:	40020800 	.word	0x40020800
 800133c:	40020400 	.word	0x40020400

08001340 <DIGITS_Display>:

/* USER CODE BEGIN 4 */
void DIGITS_Display(uint8_t DIGIT_A, uint8_t DIGIT_B)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08c      	sub	sp, #48	; 0x30
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	460a      	mov	r2, r1
 800134a:	71fb      	strb	r3, [r7, #7]
 800134c:	4613      	mov	r3, r2
 800134e:	71bb      	strb	r3, [r7, #6]
	uint8_t DIGITA_VAL = 0x0F & DIGIT_A; //mask off higher4 bits
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	int Abit0 = (DIGITA_VAL ) & 1;  	// extract Abit0 of the 4-bit value
 800135a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	62bb      	str	r3, [r7, #40]	; 0x28
	int Abit1 = (DIGITA_VAL >> 1) & 1;  // extract Abit1 of the 4-bit value
 8001364:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001368:	085b      	lsrs	r3, r3, #1
 800136a:	b2db      	uxtb	r3, r3
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
	int Abit2 = (DIGITA_VAL >> 2) & 1;  // extract Abit2 of the 4-bit value
 8001372:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001376:	089b      	lsrs	r3, r3, #2
 8001378:	b2db      	uxtb	r3, r3
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	623b      	str	r3, [r7, #32]
	int Abit3 = (DIGITA_VAL >> 3) & 1;  // extract Abit3 of the 4-bit value
 8001380:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001384:	08db      	lsrs	r3, r3, #3
 8001386:	b2db      	uxtb	r3, r3
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	61fb      	str	r3, [r7, #28]

	uint8_t DIGITB_VAL = 0x0F & DIGIT_B; //mask off higher4 bits
 800138e:	79bb      	ldrb	r3, [r7, #6]
 8001390:	f003 030f 	and.w	r3, r3, #15
 8001394:	76fb      	strb	r3, [r7, #27]
	int Bbit0 = (DIGITB_VAL ) & 1;  	// extract Bbit0 of the 4-bit value
 8001396:	7efb      	ldrb	r3, [r7, #27]
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	617b      	str	r3, [r7, #20]
	int Bbit1 = (DIGITB_VAL >> 1) & 1;  // extract Bbit1 of the 4-bit value
 800139e:	7efb      	ldrb	r3, [r7, #27]
 80013a0:	085b      	lsrs	r3, r3, #1
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	613b      	str	r3, [r7, #16]
	int Bbit2 = (DIGITB_VAL >> 2) & 1;  // extract Bbit2 of the 4-bit value
 80013aa:	7efb      	ldrb	r3, [r7, #27]
 80013ac:	089b      	lsrs	r3, r3, #2
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	60fb      	str	r3, [r7, #12]
	int Bbit3 = (DIGITB_VAL >> 3) & 1;  // extract Bbit3 of the 4-bit value
 80013b6:	7efb      	ldrb	r3, [r7, #27]
 80013b8:	08db      	lsrs	r3, r3, #3
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	60bb      	str	r3, [r7, #8]

	if (Abit0 == (0))
 80013c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d105      	bne.n	80013d4 <DIGITS_Display+0x94>
	{
	 HAL_GPIO_WritePin(GPIOB, DIGIT_A0_Pin, GPIO_PIN_RESET);
 80013c8:	2200      	movs	r2, #0
 80013ca:	2120      	movs	r1, #32
 80013cc:	483d      	ldr	r0, [pc, #244]	; (80014c4 <DIGITS_Display+0x184>)
 80013ce:	f002 f837 	bl	8003440 <HAL_GPIO_WritePin>
 80013d2:	e004      	b.n	80013de <DIGITS_Display+0x9e>
	}
	else
	{
	 HAL_GPIO_WritePin(GPIOB, DIGIT_A0_Pin, GPIO_PIN_SET);
 80013d4:	2201      	movs	r2, #1
 80013d6:	2120      	movs	r1, #32
 80013d8:	483a      	ldr	r0, [pc, #232]	; (80014c4 <DIGITS_Display+0x184>)
 80013da:	f002 f831 	bl	8003440 <HAL_GPIO_WritePin>

	}
	if (Abit1 == (0))
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d105      	bne.n	80013f0 <DIGITS_Display+0xb0>
	{
	 HAL_GPIO_WritePin(GPIOB, DIGIT_A1_Pin, GPIO_PIN_RESET);
 80013e4:	2200      	movs	r2, #0
 80013e6:	2140      	movs	r1, #64	; 0x40
 80013e8:	4836      	ldr	r0, [pc, #216]	; (80014c4 <DIGITS_Display+0x184>)
 80013ea:	f002 f829 	bl	8003440 <HAL_GPIO_WritePin>
 80013ee:	e004      	b.n	80013fa <DIGITS_Display+0xba>
	}
	else
	{
	 HAL_GPIO_WritePin(GPIOB, DIGIT_A1_Pin, GPIO_PIN_SET);
 80013f0:	2201      	movs	r2, #1
 80013f2:	2140      	movs	r1, #64	; 0x40
 80013f4:	4833      	ldr	r0, [pc, #204]	; (80014c4 <DIGITS_Display+0x184>)
 80013f6:	f002 f823 	bl	8003440 <HAL_GPIO_WritePin>

	}
	if (Abit2 == (0))
 80013fa:	6a3b      	ldr	r3, [r7, #32]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d106      	bne.n	800140e <DIGITS_Display+0xce>
	{
	 HAL_GPIO_WritePin(GPIOB, DIGIT_A2_Pin, GPIO_PIN_RESET);
 8001400:	2200      	movs	r2, #0
 8001402:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001406:	482f      	ldr	r0, [pc, #188]	; (80014c4 <DIGITS_Display+0x184>)
 8001408:	f002 f81a 	bl	8003440 <HAL_GPIO_WritePin>
 800140c:	e005      	b.n	800141a <DIGITS_Display+0xda>
	}
	else
	{
	 HAL_GPIO_WritePin(GPIOB, DIGIT_A2_Pin, GPIO_PIN_SET);
 800140e:	2201      	movs	r2, #1
 8001410:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001414:	482b      	ldr	r0, [pc, #172]	; (80014c4 <DIGITS_Display+0x184>)
 8001416:	f002 f813 	bl	8003440 <HAL_GPIO_WritePin>

	}
	if (Abit3 == (0))
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d106      	bne.n	800142e <DIGITS_Display+0xee>
	{
	 HAL_GPIO_WritePin(GPIOB, DIGIT_A3_Pin, GPIO_PIN_RESET);
 8001420:	2200      	movs	r2, #0
 8001422:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001426:	4827      	ldr	r0, [pc, #156]	; (80014c4 <DIGITS_Display+0x184>)
 8001428:	f002 f80a 	bl	8003440 <HAL_GPIO_WritePin>
 800142c:	e005      	b.n	800143a <DIGITS_Display+0xfa>
	}
	else
	{
	 HAL_GPIO_WritePin(GPIOB, DIGIT_A3_Pin, GPIO_PIN_SET);
 800142e:	2201      	movs	r2, #1
 8001430:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001434:	4823      	ldr	r0, [pc, #140]	; (80014c4 <DIGITS_Display+0x184>)
 8001436:	f002 f803 	bl	8003440 <HAL_GPIO_WritePin>

	}


	if (Bbit0 == (0))
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d106      	bne.n	800144e <DIGITS_Display+0x10e>
	{
	 HAL_GPIO_WritePin(GPIOC, DIGIT_B0_Pin, GPIO_PIN_RESET);
 8001440:	2200      	movs	r2, #0
 8001442:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001446:	4820      	ldr	r0, [pc, #128]	; (80014c8 <DIGITS_Display+0x188>)
 8001448:	f001 fffa 	bl	8003440 <HAL_GPIO_WritePin>
 800144c:	e005      	b.n	800145a <DIGITS_Display+0x11a>
	}
	else
	{
	 HAL_GPIO_WritePin(GPIOC, DIGIT_B0_Pin, GPIO_PIN_SET);
 800144e:	2201      	movs	r2, #1
 8001450:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001454:	481c      	ldr	r0, [pc, #112]	; (80014c8 <DIGITS_Display+0x188>)
 8001456:	f001 fff3 	bl	8003440 <HAL_GPIO_WritePin>

	}
	if (Bbit1 == (0))
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d106      	bne.n	800146e <DIGITS_Display+0x12e>
	{
	 HAL_GPIO_WritePin(GPIOC, DIGIT_B1_Pin, GPIO_PIN_RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001466:	4818      	ldr	r0, [pc, #96]	; (80014c8 <DIGITS_Display+0x188>)
 8001468:	f001 ffea 	bl	8003440 <HAL_GPIO_WritePin>
 800146c:	e005      	b.n	800147a <DIGITS_Display+0x13a>
	}
	else
	{
	 HAL_GPIO_WritePin(GPIOC, DIGIT_B1_Pin, GPIO_PIN_SET);
 800146e:	2201      	movs	r2, #1
 8001470:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001474:	4814      	ldr	r0, [pc, #80]	; (80014c8 <DIGITS_Display+0x188>)
 8001476:	f001 ffe3 	bl	8003440 <HAL_GPIO_WritePin>

	}
	if (Bbit2 == (0))
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d106      	bne.n	800148e <DIGITS_Display+0x14e>
	{
	 HAL_GPIO_WritePin(GPIOC, DIGIT_B2_Pin, GPIO_PIN_RESET);
 8001480:	2200      	movs	r2, #0
 8001482:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001486:	4810      	ldr	r0, [pc, #64]	; (80014c8 <DIGITS_Display+0x188>)
 8001488:	f001 ffda 	bl	8003440 <HAL_GPIO_WritePin>
 800148c:	e005      	b.n	800149a <DIGITS_Display+0x15a>
	}
	else
	{
	 HAL_GPIO_WritePin(GPIOC, DIGIT_B2_Pin, GPIO_PIN_SET);
 800148e:	2201      	movs	r2, #1
 8001490:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001494:	480c      	ldr	r0, [pc, #48]	; (80014c8 <DIGITS_Display+0x188>)
 8001496:	f001 ffd3 	bl	8003440 <HAL_GPIO_WritePin>

	}
	if (Bbit3 == (0))
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d106      	bne.n	80014ae <DIGITS_Display+0x16e>
	{
	 HAL_GPIO_WritePin(GPIOC, DIGIT_B3_Pin, GPIO_PIN_RESET);
 80014a0:	2200      	movs	r2, #0
 80014a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014a6:	4808      	ldr	r0, [pc, #32]	; (80014c8 <DIGITS_Display+0x188>)
 80014a8:	f001 ffca 	bl	8003440 <HAL_GPIO_WritePin>
	}
	else
	{
	 HAL_GPIO_WritePin(GPIOC, DIGIT_B3_Pin, GPIO_PIN_SET);
	}
}
 80014ac:	e005      	b.n	80014ba <DIGITS_Display+0x17a>
	 HAL_GPIO_WritePin(GPIOC, DIGIT_B3_Pin, GPIO_PIN_SET);
 80014ae:	2201      	movs	r2, #1
 80014b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014b4:	4804      	ldr	r0, [pc, #16]	; (80014c8 <DIGITS_Display+0x188>)
 80014b6:	f001 ffc3 	bl	8003440 <HAL_GPIO_WritePin>
}
 80014ba:	bf00      	nop
 80014bc:	3730      	adds	r7, #48	; 0x30
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40020400 	.word	0x40020400
 80014c8:	40020800 	.word	0x40020800

080014cc <ADC_Select_CH>:

void ADC_Select_CH(int CH)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014d4:	f107 0308 	add.w	r3, r7, #8
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
	switch(CH)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b0f      	cmp	r3, #15
 80014e6:	f200 814b 	bhi.w	8001780 <ADC_Select_CH+0x2b4>
 80014ea:	a201      	add	r2, pc, #4	; (adr r2, 80014f0 <ADC_Select_CH+0x24>)
 80014ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f0:	08001531 	.word	0x08001531
 80014f4:	08001553 	.word	0x08001553
 80014f8:	08001575 	.word	0x08001575
 80014fc:	08001597 	.word	0x08001597
 8001500:	080015b9 	.word	0x080015b9
 8001504:	080015db 	.word	0x080015db
 8001508:	080015fd 	.word	0x080015fd
 800150c:	0800161f 	.word	0x0800161f
 8001510:	08001641 	.word	0x08001641
 8001514:	08001663 	.word	0x08001663
 8001518:	08001683 	.word	0x08001683
 800151c:	080016a3 	.word	0x080016a3
 8001520:	080016c3 	.word	0x080016c3
 8001524:	080016e3 	.word	0x080016e3
 8001528:	08001703 	.word	0x08001703
 800152c:	08001723 	.word	0x08001723
	{
	case 0:
	sConfig.Channel = ADC_CHANNEL_0;
 8001530:	2300      	movs	r3, #0
 8001532:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001534:	2301      	movs	r3, #1
 8001536:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001538:	f107 0308 	add.w	r3, r7, #8
 800153c:	4619      	mov	r1, r3
 800153e:	4892      	ldr	r0, [pc, #584]	; (8001788 <ADC_Select_CH+0x2bc>)
 8001540:	f001 fa38 	bl	80029b4 <HAL_ADC_ConfigChannel>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 80fb 	beq.w	8001742 <ADC_Select_CH+0x276>
	{
	Error_Handler();
 800154c:	f000 fd0a 	bl	8001f64 <Error_Handler>
	}
	break;
 8001550:	e0f7      	b.n	8001742 <ADC_Select_CH+0x276>
	case 1:
	sConfig.Channel = ADC_CHANNEL_1;
 8001552:	2301      	movs	r3, #1
 8001554:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001556:	2301      	movs	r3, #1
 8001558:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800155a:	f107 0308 	add.w	r3, r7, #8
 800155e:	4619      	mov	r1, r3
 8001560:	4889      	ldr	r0, [pc, #548]	; (8001788 <ADC_Select_CH+0x2bc>)
 8001562:	f001 fa27 	bl	80029b4 <HAL_ADC_ConfigChannel>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	f000 80ec 	beq.w	8001746 <ADC_Select_CH+0x27a>
	{
	Error_Handler();
 800156e:	f000 fcf9 	bl	8001f64 <Error_Handler>
	}
	break;
 8001572:	e0e8      	b.n	8001746 <ADC_Select_CH+0x27a>
	case 2:
	sConfig.Channel = ADC_CHANNEL_2;
 8001574:	2302      	movs	r3, #2
 8001576:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001578:	2301      	movs	r3, #1
 800157a:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800157c:	f107 0308 	add.w	r3, r7, #8
 8001580:	4619      	mov	r1, r3
 8001582:	4881      	ldr	r0, [pc, #516]	; (8001788 <ADC_Select_CH+0x2bc>)
 8001584:	f001 fa16 	bl	80029b4 <HAL_ADC_ConfigChannel>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	f000 80dd 	beq.w	800174a <ADC_Select_CH+0x27e>
	{
	Error_Handler();
 8001590:	f000 fce8 	bl	8001f64 <Error_Handler>
	}
	break;
 8001594:	e0d9      	b.n	800174a <ADC_Select_CH+0x27e>
	case 3:
	sConfig.Channel = ADC_CHANNEL_3;
 8001596:	2303      	movs	r3, #3
 8001598:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 800159a:	2301      	movs	r3, #1
 800159c:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800159e:	f107 0308 	add.w	r3, r7, #8
 80015a2:	4619      	mov	r1, r3
 80015a4:	4878      	ldr	r0, [pc, #480]	; (8001788 <ADC_Select_CH+0x2bc>)
 80015a6:	f001 fa05 	bl	80029b4 <HAL_ADC_ConfigChannel>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f000 80ce 	beq.w	800174e <ADC_Select_CH+0x282>
	{
	Error_Handler();
 80015b2:	f000 fcd7 	bl	8001f64 <Error_Handler>
	}
	break;
 80015b6:	e0ca      	b.n	800174e <ADC_Select_CH+0x282>
	case 4:
	sConfig.Channel = ADC_CHANNEL_4;
 80015b8:	2304      	movs	r3, #4
 80015ba:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80015bc:	2301      	movs	r3, #1
 80015be:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015c0:	f107 0308 	add.w	r3, r7, #8
 80015c4:	4619      	mov	r1, r3
 80015c6:	4870      	ldr	r0, [pc, #448]	; (8001788 <ADC_Select_CH+0x2bc>)
 80015c8:	f001 f9f4 	bl	80029b4 <HAL_ADC_ConfigChannel>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 80bf 	beq.w	8001752 <ADC_Select_CH+0x286>
	{
	Error_Handler();
 80015d4:	f000 fcc6 	bl	8001f64 <Error_Handler>
	}
	break;
 80015d8:	e0bb      	b.n	8001752 <ADC_Select_CH+0x286>
	case 5:
	sConfig.Channel = ADC_CHANNEL_5;
 80015da:	2305      	movs	r3, #5
 80015dc:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80015de:	2301      	movs	r3, #1
 80015e0:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015e2:	f107 0308 	add.w	r3, r7, #8
 80015e6:	4619      	mov	r1, r3
 80015e8:	4867      	ldr	r0, [pc, #412]	; (8001788 <ADC_Select_CH+0x2bc>)
 80015ea:	f001 f9e3 	bl	80029b4 <HAL_ADC_ConfigChannel>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f000 80b0 	beq.w	8001756 <ADC_Select_CH+0x28a>
	{
	Error_Handler();
 80015f6:	f000 fcb5 	bl	8001f64 <Error_Handler>
	}
	break;
 80015fa:	e0ac      	b.n	8001756 <ADC_Select_CH+0x28a>
	case 6:
	sConfig.Channel = ADC_CHANNEL_6;
 80015fc:	2306      	movs	r3, #6
 80015fe:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001600:	2301      	movs	r3, #1
 8001602:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001604:	f107 0308 	add.w	r3, r7, #8
 8001608:	4619      	mov	r1, r3
 800160a:	485f      	ldr	r0, [pc, #380]	; (8001788 <ADC_Select_CH+0x2bc>)
 800160c:	f001 f9d2 	bl	80029b4 <HAL_ADC_ConfigChannel>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 80a1 	beq.w	800175a <ADC_Select_CH+0x28e>
	{
	Error_Handler();
 8001618:	f000 fca4 	bl	8001f64 <Error_Handler>
	}
	break;
 800161c:	e09d      	b.n	800175a <ADC_Select_CH+0x28e>
	case 7:
	sConfig.Channel = ADC_CHANNEL_7;
 800161e:	2307      	movs	r3, #7
 8001620:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001622:	2301      	movs	r3, #1
 8001624:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001626:	f107 0308 	add.w	r3, r7, #8
 800162a:	4619      	mov	r1, r3
 800162c:	4856      	ldr	r0, [pc, #344]	; (8001788 <ADC_Select_CH+0x2bc>)
 800162e:	f001 f9c1 	bl	80029b4 <HAL_ADC_ConfigChannel>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	f000 8092 	beq.w	800175e <ADC_Select_CH+0x292>
	{
	Error_Handler();
 800163a:	f000 fc93 	bl	8001f64 <Error_Handler>
	}
	break;
 800163e:	e08e      	b.n	800175e <ADC_Select_CH+0x292>
	case 8:
	sConfig.Channel = ADC_CHANNEL_8;
 8001640:	2308      	movs	r3, #8
 8001642:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001644:	2301      	movs	r3, #1
 8001646:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001648:	f107 0308 	add.w	r3, r7, #8
 800164c:	4619      	mov	r1, r3
 800164e:	484e      	ldr	r0, [pc, #312]	; (8001788 <ADC_Select_CH+0x2bc>)
 8001650:	f001 f9b0 	bl	80029b4 <HAL_ADC_ConfigChannel>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 8083 	beq.w	8001762 <ADC_Select_CH+0x296>
	{
	Error_Handler();
 800165c:	f000 fc82 	bl	8001f64 <Error_Handler>
	}
	break;
 8001660:	e07f      	b.n	8001762 <ADC_Select_CH+0x296>
	case 9:
	sConfig.Channel = ADC_CHANNEL_9;
 8001662:	2309      	movs	r3, #9
 8001664:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001666:	2301      	movs	r3, #1
 8001668:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800166a:	f107 0308 	add.w	r3, r7, #8
 800166e:	4619      	mov	r1, r3
 8001670:	4845      	ldr	r0, [pc, #276]	; (8001788 <ADC_Select_CH+0x2bc>)
 8001672:	f001 f99f 	bl	80029b4 <HAL_ADC_ConfigChannel>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d074      	beq.n	8001766 <ADC_Select_CH+0x29a>
	{
	Error_Handler();
 800167c:	f000 fc72 	bl	8001f64 <Error_Handler>
	}
	break;
 8001680:	e071      	b.n	8001766 <ADC_Select_CH+0x29a>
	case 10:
	sConfig.Channel = ADC_CHANNEL_10;
 8001682:	230a      	movs	r3, #10
 8001684:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001686:	2301      	movs	r3, #1
 8001688:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800168a:	f107 0308 	add.w	r3, r7, #8
 800168e:	4619      	mov	r1, r3
 8001690:	483d      	ldr	r0, [pc, #244]	; (8001788 <ADC_Select_CH+0x2bc>)
 8001692:	f001 f98f 	bl	80029b4 <HAL_ADC_ConfigChannel>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d066      	beq.n	800176a <ADC_Select_CH+0x29e>
	{
	Error_Handler();
 800169c:	f000 fc62 	bl	8001f64 <Error_Handler>
	}
	break;
 80016a0:	e063      	b.n	800176a <ADC_Select_CH+0x29e>
	case 11:
	sConfig.Channel = ADC_CHANNEL_11;
 80016a2:	230b      	movs	r3, #11
 80016a4:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80016a6:	2301      	movs	r3, #1
 80016a8:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016aa:	f107 0308 	add.w	r3, r7, #8
 80016ae:	4619      	mov	r1, r3
 80016b0:	4835      	ldr	r0, [pc, #212]	; (8001788 <ADC_Select_CH+0x2bc>)
 80016b2:	f001 f97f 	bl	80029b4 <HAL_ADC_ConfigChannel>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d058      	beq.n	800176e <ADC_Select_CH+0x2a2>
	{
	Error_Handler();
 80016bc:	f000 fc52 	bl	8001f64 <Error_Handler>
	}
	break;
 80016c0:	e055      	b.n	800176e <ADC_Select_CH+0x2a2>
	case 12:
	sConfig.Channel = ADC_CHANNEL_12;
 80016c2:	230c      	movs	r3, #12
 80016c4:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80016c6:	2301      	movs	r3, #1
 80016c8:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016ca:	f107 0308 	add.w	r3, r7, #8
 80016ce:	4619      	mov	r1, r3
 80016d0:	482d      	ldr	r0, [pc, #180]	; (8001788 <ADC_Select_CH+0x2bc>)
 80016d2:	f001 f96f 	bl	80029b4 <HAL_ADC_ConfigChannel>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d04a      	beq.n	8001772 <ADC_Select_CH+0x2a6>
	{
	Error_Handler();
 80016dc:	f000 fc42 	bl	8001f64 <Error_Handler>
	}
	break;
 80016e0:	e047      	b.n	8001772 <ADC_Select_CH+0x2a6>
	case 13:
	sConfig.Channel = ADC_CHANNEL_13;
 80016e2:	230d      	movs	r3, #13
 80016e4:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80016e6:	2301      	movs	r3, #1
 80016e8:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016ea:	f107 0308 	add.w	r3, r7, #8
 80016ee:	4619      	mov	r1, r3
 80016f0:	4825      	ldr	r0, [pc, #148]	; (8001788 <ADC_Select_CH+0x2bc>)
 80016f2:	f001 f95f 	bl	80029b4 <HAL_ADC_ConfigChannel>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d03c      	beq.n	8001776 <ADC_Select_CH+0x2aa>
	{
	Error_Handler();
 80016fc:	f000 fc32 	bl	8001f64 <Error_Handler>
	}
	break;
 8001700:	e039      	b.n	8001776 <ADC_Select_CH+0x2aa>
	case 14:
	sConfig.Channel = ADC_CHANNEL_14;
 8001702:	230e      	movs	r3, #14
 8001704:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001706:	2301      	movs	r3, #1
 8001708:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800170a:	f107 0308 	add.w	r3, r7, #8
 800170e:	4619      	mov	r1, r3
 8001710:	481d      	ldr	r0, [pc, #116]	; (8001788 <ADC_Select_CH+0x2bc>)
 8001712:	f001 f94f 	bl	80029b4 <HAL_ADC_ConfigChannel>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d02e      	beq.n	800177a <ADC_Select_CH+0x2ae>
	{
	Error_Handler();
 800171c:	f000 fc22 	bl	8001f64 <Error_Handler>
	}
	break;
 8001720:	e02b      	b.n	800177a <ADC_Select_CH+0x2ae>
	case 15:
	sConfig.Channel = ADC_CHANNEL_15;
 8001722:	230f      	movs	r3, #15
 8001724:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001726:	2301      	movs	r3, #1
 8001728:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800172a:	f107 0308 	add.w	r3, r7, #8
 800172e:	4619      	mov	r1, r3
 8001730:	4815      	ldr	r0, [pc, #84]	; (8001788 <ADC_Select_CH+0x2bc>)
 8001732:	f001 f93f 	bl	80029b4 <HAL_ADC_ConfigChannel>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d020      	beq.n	800177e <ADC_Select_CH+0x2b2>
	{
	Error_Handler();
 800173c:	f000 fc12 	bl	8001f64 <Error_Handler>
	}
	break;
 8001740:	e01d      	b.n	800177e <ADC_Select_CH+0x2b2>
	break;
 8001742:	bf00      	nop
 8001744:	e01c      	b.n	8001780 <ADC_Select_CH+0x2b4>
	break;
 8001746:	bf00      	nop
 8001748:	e01a      	b.n	8001780 <ADC_Select_CH+0x2b4>
	break;
 800174a:	bf00      	nop
 800174c:	e018      	b.n	8001780 <ADC_Select_CH+0x2b4>
	break;
 800174e:	bf00      	nop
 8001750:	e016      	b.n	8001780 <ADC_Select_CH+0x2b4>
	break;
 8001752:	bf00      	nop
 8001754:	e014      	b.n	8001780 <ADC_Select_CH+0x2b4>
	break;
 8001756:	bf00      	nop
 8001758:	e012      	b.n	8001780 <ADC_Select_CH+0x2b4>
	break;
 800175a:	bf00      	nop
 800175c:	e010      	b.n	8001780 <ADC_Select_CH+0x2b4>
	break;
 800175e:	bf00      	nop
 8001760:	e00e      	b.n	8001780 <ADC_Select_CH+0x2b4>
	break;
 8001762:	bf00      	nop
 8001764:	e00c      	b.n	8001780 <ADC_Select_CH+0x2b4>
	break;
 8001766:	bf00      	nop
 8001768:	e00a      	b.n	8001780 <ADC_Select_CH+0x2b4>
	break;
 800176a:	bf00      	nop
 800176c:	e008      	b.n	8001780 <ADC_Select_CH+0x2b4>
	break;
 800176e:	bf00      	nop
 8001770:	e006      	b.n	8001780 <ADC_Select_CH+0x2b4>
	break;
 8001772:	bf00      	nop
 8001774:	e004      	b.n	8001780 <ADC_Select_CH+0x2b4>
	break;
 8001776:	bf00      	nop
 8001778:	e002      	b.n	8001780 <ADC_Select_CH+0x2b4>
	break;
 800177a:	bf00      	nop
 800177c:	e000      	b.n	8001780 <ADC_Select_CH+0x2b4>
	break;
 800177e:	bf00      	nop
	}
}
 8001780:	bf00      	nop
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	200000ec 	.word	0x200000ec

0800178c <UART_Parse_MSG>:

void UART_Parse_MSG(char *option_msg, char *msg, volatile uint8_t *Zone, unsigned int input_char_num)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b0b6      	sub	sp, #216	; 0xd8
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
 8001798:	603b      	str	r3, [r7, #0]
	user_input_flag = 0;
 800179a:	4b40      	ldr	r3, [pc, #256]	; (800189c <UART_Parse_MSG+0x110>)
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]
  uint8_t txd_msg_buffer[64] = {0};
 80017a0:	2300      	movs	r3, #0
 80017a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80017a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017aa:	223c      	movs	r2, #60	; 0x3c
 80017ac:	2100      	movs	r1, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f004 fc70 	bl	8006094 <memset>
  uint8_t option_buffer[128] = {0};
 80017b4:	2300      	movs	r3, #0
 80017b6:	61bb      	str	r3, [r7, #24]
 80017b8:	f107 031c 	add.w	r3, r7, #28
 80017bc:	227c      	movs	r2, #124	; 0x7c
 80017be:	2100      	movs	r1, #0
 80017c0:	4618      	mov	r0, r3
 80017c2:	f004 fc67 	bl	8006094 <memset>
  uint8_t temp_zone[4] = {0};
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]

  memset(temp_zone, 0, sizeof(temp_zone));
 80017ca:	f107 0314 	add.w	r3, r7, #20
 80017ce:	2204      	movs	r2, #4
 80017d0:	2100      	movs	r1, #0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f004 fc5e 	bl	8006094 <memset>

  sprintf((char*)txd_msg_buffer, "%s", msg);
 80017d8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80017dc:	68ba      	ldr	r2, [r7, #8]
 80017de:	4930      	ldr	r1, [pc, #192]	; (80018a0 <UART_Parse_MSG+0x114>)
 80017e0:	4618      	mov	r0, r3
 80017e2:	f004 fc37 	bl	8006054 <siprintf>
  sprintf((char*)option_buffer, "%s", option_msg);
 80017e6:	f107 0318 	add.w	r3, r7, #24
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	492c      	ldr	r1, [pc, #176]	; (80018a0 <UART_Parse_MSG+0x114>)
 80017ee:	4618      	mov	r0, r3
 80017f0:	f004 fc30 	bl	8006054 <siprintf>
  // Send the prompt to the user
  HAL_UART_Transmit(&huart6, option_buffer, strlen((char*)option_buffer), 1000);
 80017f4:	f107 0318 	add.w	r3, r7, #24
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fcf1 	bl	80001e0 <strlen>
 80017fe:	4603      	mov	r3, r0
 8001800:	b29a      	uxth	r2, r3
 8001802:	f107 0118 	add.w	r1, r7, #24
 8001806:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800180a:	4826      	ldr	r0, [pc, #152]	; (80018a4 <UART_Parse_MSG+0x118>)
 800180c:	f003 fb67 	bl	8004ede <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 8001810:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe fce3 	bl	80001e0 <strlen>
 800181a:	4603      	mov	r3, r0
 800181c:	b29a      	uxth	r2, r3
 800181e:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8001822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001826:	481f      	ldr	r0, [pc, #124]	; (80018a4 <UART_Parse_MSG+0x118>)
 8001828:	f003 fb59 	bl	8004ede <HAL_UART_Transmit>
  // Initialize user input interrupt to write input to PWM_Zone
  HAL_UART_Receive_IT(&huart6, temp_zone, input_char_num);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	b29a      	uxth	r2, r3
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	4619      	mov	r1, r3
 8001836:	481b      	ldr	r0, [pc, #108]	; (80018a4 <UART_Parse_MSG+0x118>)
 8001838:	f003 fbe3 	bl	8005002 <HAL_UART_Receive_IT>
  // Wait for the reception to complete
  while(user_input_flag == 0) {};
 800183c:	bf00      	nop
 800183e:	4b17      	ldr	r3, [pc, #92]	; (800189c <UART_Parse_MSG+0x110>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0fb      	beq.n	800183e <UART_Parse_MSG+0xb2>
  temp_zone[input_char_num] = '\0';
 8001846:	f107 0214 	add.w	r2, r7, #20
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	4413      	add	r3, r2
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]
  // Convert received data
  *Zone = atoi((const char *)temp_zone);
 8001852:	f107 0314 	add.w	r3, r7, #20
 8001856:	4618      	mov	r0, r3
 8001858:	f004 fb6c 	bl	8005f34 <atoi>
 800185c:	4603      	mov	r3, r0
 800185e:	b2da      	uxtb	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	701a      	strb	r2, [r3, #0]
  // Echo the received byte back to UART to confirm reception
  sprintf((char*)txd_msg_buffer, "%i", *Zone);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	b2db      	uxtb	r3, r3
 800186a:	461a      	mov	r2, r3
 800186c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001870:	490d      	ldr	r1, [pc, #52]	; (80018a8 <UART_Parse_MSG+0x11c>)
 8001872:	4618      	mov	r0, r3
 8001874:	f004 fbee 	bl	8006054 <siprintf>
  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 8001878:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fcaf 	bl	80001e0 <strlen>
 8001882:	4603      	mov	r3, r0
 8001884:	b29a      	uxth	r2, r3
 8001886:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800188a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188e:	4805      	ldr	r0, [pc, #20]	; (80018a4 <UART_Parse_MSG+0x118>)
 8001890:	f003 fb25 	bl	8004ede <HAL_UART_Transmit>
}
 8001894:	bf00      	nop
 8001896:	37d8      	adds	r7, #216	; 0xd8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000094 	.word	0x20000094
 80018a0:	08006cc8 	.word	0x08006cc8
 80018a4:	20000294 	.word	0x20000294
 80018a8:	08006ccc 	.word	0x08006ccc

080018ac <UART_Send_MSG>:

void UART_Send_MSG(char* msg)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b0a2      	sub	sp, #136	; 0x88
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
	uint8_t msg_buffer[128] = {0};
 80018b4:	2300      	movs	r3, #0
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	f107 030c 	add.w	r3, r7, #12
 80018bc:	227c      	movs	r2, #124	; 0x7c
 80018be:	2100      	movs	r1, #0
 80018c0:	4618      	mov	r0, r3
 80018c2:	f004 fbe7 	bl	8006094 <memset>
	sprintf((char*)msg_buffer, "%s", msg);
 80018c6:	f107 0308 	add.w	r3, r7, #8
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	490a      	ldr	r1, [pc, #40]	; (80018f8 <UART_Send_MSG+0x4c>)
 80018ce:	4618      	mov	r0, r3
 80018d0:	f004 fbc0 	bl	8006054 <siprintf>
	HAL_UART_Transmit(&huart6, msg_buffer, strlen((char*)msg_buffer), 1000);
 80018d4:	f107 0308 	add.w	r3, r7, #8
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe fc81 	bl	80001e0 <strlen>
 80018de:	4603      	mov	r3, r0
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	f107 0108 	add.w	r1, r7, #8
 80018e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ea:	4804      	ldr	r0, [pc, #16]	; (80018fc <UART_Send_MSG+0x50>)
 80018ec:	f003 faf7 	bl	8004ede <HAL_UART_Transmit>
}
 80018f0:	bf00      	nop
 80018f2:	3788      	adds	r7, #136	; 0x88
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	08006cc8 	.word	0x08006cc8
 80018fc:	20000294 	.word	0x20000294

08001900 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART6) {
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a09      	ldr	r2, [pc, #36]	; (8001934 <HAL_UART_RxCpltCallback+0x34>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d102      	bne.n	8001918 <HAL_UART_RxCpltCallback+0x18>
		user_input_flag = 1;
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <HAL_UART_RxCpltCallback+0x38>)
 8001914:	2201      	movs	r2, #1
 8001916:	701a      	strb	r2, [r3, #0]
	}

	if (huart->Instance == USART1)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a07      	ldr	r2, [pc, #28]	; (800193c <HAL_UART_RxCpltCallback+0x3c>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d102      	bne.n	8001928 <HAL_UART_RxCpltCallback+0x28>
	{
		us100_Rx_flag = 01; //this flag is set to show that an receiver interrupt has occurred
 8001922:	4b07      	ldr	r3, [pc, #28]	; (8001940 <HAL_UART_RxCpltCallback+0x40>)
 8001924:	2201      	movs	r2, #1
 8001926:	701a      	strb	r2, [r3, #0]
	}
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	40011400 	.word	0x40011400
 8001938:	20000094 	.word	0x20000094
 800193c:	40011000 	.word	0x40011000
 8001940:	200000e1 	.word	0x200000e1

08001944 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001944:	b4b0      	push	{r4, r5, r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BLU_PB_Pin) {
 800194e:	88fb      	ldrh	r3, [r7, #6]
 8001950:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001954:	d102      	bne.n	800195c <HAL_GPIO_EXTI_Callback+0x18>
		RUN_MODE_START_FLAG = 1;
 8001956:	4b0a      	ldr	r3, [pc, #40]	; (8001980 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001958:	2201      	movs	r2, #1
 800195a:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == RPM_TICK_Pin) {
 800195c:	88fb      	ldrh	r3, [r7, #6]
 800195e:	2b04      	cmp	r3, #4
 8001960:	d108      	bne.n	8001974 <HAL_GPIO_EXTI_Callback+0x30>
		rpm_tick_count++;  // Ensure this is incrementing
 8001962:	4b08      	ldr	r3, [pc, #32]	; (8001984 <HAL_GPIO_EXTI_Callback+0x40>)
 8001964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001968:	1c54      	adds	r4, r2, #1
 800196a:	f143 0500 	adc.w	r5, r3, #0
 800196e:	4b05      	ldr	r3, [pc, #20]	; (8001984 <HAL_GPIO_EXTI_Callback+0x40>)
 8001970:	e9c3 4500 	strd	r4, r5, [r3]

	}
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	bcb0      	pop	{r4, r5, r7}
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	200000a2 	.word	0x200000a2
 8001984:	200000a8 	.word	0x200000a8

08001988 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001988:	b5b0      	push	{r4, r5, r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5) {
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0c      	ldr	r2, [pc, #48]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d112      	bne.n	80019c0 <HAL_TIM_PeriodElapsedCallback+0x38>
		// MOTRO RPM calculation
	  /*

    */
	  Update_DC_Motor_RPM();
 800199a:	f000 fa45 	bl	8001e28 <Update_DC_Motor_RPM>
		// Update wall clock second every real second
		simulate_seconds += 600;  // Simulating 24 hour minutes per 2.4 min
 800199e:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80019a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a4:	f512 7416 	adds.w	r4, r2, #600	; 0x258
 80019a8:	f143 0500 	adc.w	r5, r3, #0
 80019ac:	4b07      	ldr	r3, [pc, #28]	; (80019cc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80019ae:	e9c3 4500 	strd	r4, r5, [r3]
		Update_UI_Display(simulate_seconds);
 80019b2:	4b06      	ldr	r3, [pc, #24]	; (80019cc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80019b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b8:	4610      	mov	r0, r2
 80019ba:	4619      	mov	r1, r3
 80019bc:	f000 f866 	bl	8001a8c <Update_UI_Display>
	}
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bdb0      	pop	{r4, r5, r7, pc}
 80019c8:	40000c00 	.word	0x40000c00
 80019cc:	200000d8 	.word	0x200000d8

080019d0 <Control_DC_Motor_PWM>:

void Control_DC_Motor_PWM(uint8_t percent, uint8_t direction)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	460a      	mov	r2, r1
 80019da:	71fb      	strb	r3, [r7, #7]
 80019dc:	4613      	mov	r3, r2
 80019de:	71bb      	strb	r3, [r7, #6]
  if (percent == 0) {
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d106      	bne.n	80019f4 <Control_DC_Motor_PWM+0x24>
		TIM3->CCR1 = 0;
 80019e6:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <Control_DC_Motor_PWM+0x5c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR3 = 0;
 80019ec:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <Control_DC_Motor_PWM+0x5c>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	63da      	str	r2, [r3, #60]	; 0x3c
		return;
 80019f2:	e015      	b.n	8001a20 <Control_DC_Motor_PWM+0x50>
  }

	uint32_t pwm_value = (2000 * percent) / 100;  // Calculate the PWM value based on the percentage
 80019f4:	79fa      	ldrb	r2, [r7, #7]
 80019f6:	4613      	mov	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4413      	add	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	60fb      	str	r3, [r7, #12]
	// Set motor direction 0 - reverse, 1 - forward
	if (direction == 1) {
 8001a00:	79bb      	ldrb	r3, [r7, #6]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d106      	bne.n	8001a14 <Control_DC_Motor_PWM+0x44>
		// Forward direction
		TIM3->CCR1 = pwm_value; // Set PWM for forward
 8001a06:	4a09      	ldr	r2, [pc, #36]	; (8001a2c <Control_DC_Motor_PWM+0x5c>)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6353      	str	r3, [r2, #52]	; 0x34
		TIM3->CCR3 = 0;         // Ensure the reverse is 0
 8001a0c:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <Control_DC_Motor_PWM+0x5c>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a12:	e005      	b.n	8001a20 <Control_DC_Motor_PWM+0x50>
	} else {
		// Reverse direction
		TIM3->CCR1 = 0;         // Ensure the forward is 0
 8001a14:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <Control_DC_Motor_PWM+0x5c>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR3 = pwm_value; // Set PWM for reverse
 8001a1a:	4a04      	ldr	r2, [pc, #16]	; (8001a2c <Control_DC_Motor_PWM+0x5c>)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	63d3      	str	r3, [r2, #60]	; 0x3c
	}
}
 8001a20:	3714      	adds	r7, #20
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40000400 	.word	0x40000400

08001a30 <Control_Servo_Motor_PWM>:

void Control_Servo_Motor_PWM(uint8_t direction)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
	// Set motor direction 0 - INLET
	if (direction == 0) {
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d105      	bne.n	8001a4c <Control_Servo_Motor_PWM+0x1c>
		TIM2->CCR1 = 2500;
 8001a40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a44:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001a48:	635a      	str	r2, [r3, #52]	; 0x34
	} else if (direction == 2) {
		TIM2->CCR1 = 1200;
	} else if (direction == 3 ) {
		TIM2->CCR1 = 1900;
	}
}
 8001a4a:	e019      	b.n	8001a80 <Control_Servo_Motor_PWM+0x50>
	} else if (direction == 1){
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d105      	bne.n	8001a5e <Control_Servo_Motor_PWM+0x2e>
		TIM2->CCR1 = 500;
 8001a52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a56:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001a5a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001a5c:	e010      	b.n	8001a80 <Control_Servo_Motor_PWM+0x50>
	} else if (direction == 2) {
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d105      	bne.n	8001a70 <Control_Servo_Motor_PWM+0x40>
		TIM2->CCR1 = 1200;
 8001a64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a68:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001a6c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001a6e:	e007      	b.n	8001a80 <Control_Servo_Motor_PWM+0x50>
	} else if (direction == 3 ) {
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	2b03      	cmp	r3, #3
 8001a74:	d104      	bne.n	8001a80 <Control_Servo_Motor_PWM+0x50>
		TIM2->CCR1 = 1900;
 8001a76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a7a:	f240 726c 	movw	r2, #1900	; 0x76c
 8001a7e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <Update_UI_Display>:

void Update_UI_Display(volatile uint64_t simulated_seconds)
{
 8001a8c:	b5b0      	push	{r4, r5, r7, lr}
 8001a8e:	b0c8      	sub	sp, #288	; 0x120
 8001a90:	af04      	add	r7, sp, #16
 8001a92:	e9c7 0100 	strd	r0, r1, [r7]
		static uint8_t last_hour_displayed = 255;
		if (simulate_seconds >= 3600) {
 8001a96:	4b46      	ldr	r3, [pc, #280]	; (8001bb0 <Update_UI_Display+0x124>)
 8001a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9c:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
 8001aa0:	f173 0300 	sbcs.w	r3, r3, #0
 8001aa4:	d318      	bcc.n	8001ad8 <Update_UI_Display+0x4c>
			simulate_seconds -= 3600;
 8001aa6:	4b42      	ldr	r3, [pc, #264]	; (8001bb0 <Update_UI_Display+0x124>)
 8001aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aac:	f5b2 6461 	subs.w	r4, r2, #3600	; 0xe10
 8001ab0:	f143 35ff 	adc.w	r5, r3, #4294967295
 8001ab4:	4b3e      	ldr	r3, [pc, #248]	; (8001bb0 <Update_UI_Display+0x124>)
 8001ab6:	e9c3 4500 	strd	r4, r5, [r3]
			Current_Wall_CLK_Hour++;
 8001aba:	4b3e      	ldr	r3, [pc, #248]	; (8001bb4 <Update_UI_Display+0x128>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	4b3b      	ldr	r3, [pc, #236]	; (8001bb4 <Update_UI_Display+0x128>)
 8001ac6:	701a      	strb	r2, [r3, #0]
			if (Current_Wall_CLK_Hour >= 24) {
 8001ac8:	4b3a      	ldr	r3, [pc, #232]	; (8001bb4 <Update_UI_Display+0x128>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b17      	cmp	r3, #23
 8001ad0:	d902      	bls.n	8001ad8 <Update_UI_Display+0x4c>
					Current_Wall_CLK_Hour = 0;
 8001ad2:	4b38      	ldr	r3, [pc, #224]	; (8001bb4 <Update_UI_Display+0x128>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	701a      	strb	r2, [r3, #0]
			}
		}

		uint8_t scaled_hour = (Current_Wall_CLK_Hour) % 24;
 8001ad8:	4b36      	ldr	r3, [pc, #216]	; (8001bb4 <Update_UI_Display+0x128>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	4b36      	ldr	r3, [pc, #216]	; (8001bb8 <Update_UI_Display+0x12c>)
 8001ae0:	fba3 1302 	umull	r1, r3, r3, r2
 8001ae4:	0919      	lsrs	r1, r3, #4
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	440b      	add	r3, r1
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
    if ( (last_hour_displayed != scaled_hour) && System_Interlock_Flag == 0 ) {
 8001af4:	4b31      	ldr	r3, [pc, #196]	; (8001bbc <Update_UI_Display+0x130>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d034      	beq.n	8001b6a <Update_UI_Display+0xde>
 8001b00:	4b2f      	ldr	r3, [pc, #188]	; (8001bc0 <Update_UI_Display+0x134>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d12f      	bne.n	8001b6a <Update_UI_Display+0xde>
			last_hour_displayed = scaled_hour;
 8001b0a:	4a2c      	ldr	r2, [pc, #176]	; (8001bbc <Update_UI_Display+0x130>)
 8001b0c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b10:	7013      	strb	r3, [r2, #0]
			char buf[256];
			// Format and send the message every hour
			sprintf(buf, "\r\n Wall-Clock Time: %02d | Zone/Inlet: %s | Motor Speed %%PWM: %d%% | Motor RPM: %lu | Water Reservoir Depth: %d%%",
 8001b12:	4b28      	ldr	r3, [pc, #160]	; (8001bb4 <Update_UI_Display+0x128>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	461d      	mov	r5, r3
 8001b1a:	4b2a      	ldr	r3, [pc, #168]	; (8001bc4 <Update_UI_Display+0x138>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b29      	ldr	r3, [pc, #164]	; (8001bc8 <Update_UI_Display+0x13c>)
 8001b24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001b28:	4b28      	ldr	r3, [pc, #160]	; (8001bcc <Update_UI_Display+0x140>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	461c      	mov	r4, r3
 8001b30:	4b27      	ldr	r3, [pc, #156]	; (8001bd0 <Update_UI_Display+0x144>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4927      	ldr	r1, [pc, #156]	; (8001bd4 <Update_UI_Display+0x148>)
 8001b36:	7809      	ldrb	r1, [r1, #0]
 8001b38:	b2c9      	uxtb	r1, r1
 8001b3a:	f107 000c 	add.w	r0, r7, #12
 8001b3e:	9102      	str	r1, [sp, #8]
 8001b40:	9301      	str	r3, [sp, #4]
 8001b42:	9400      	str	r4, [sp, #0]
 8001b44:	4613      	mov	r3, r2
 8001b46:	462a      	mov	r2, r5
 8001b48:	4923      	ldr	r1, [pc, #140]	; (8001bd8 <Update_UI_Display+0x14c>)
 8001b4a:	f004 fa83 	bl	8006054 <siprintf>
							Current_Wall_CLK_Hour, Zone_Names[Current_Zone], Current_DC_Motor_Percent_PWM, DC_Motor_RPM, Current_Water_Percent_depth);

			HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), 1000);
 8001b4e:	f107 030c 	add.w	r3, r7, #12
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fb44 	bl	80001e0 <strlen>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	f107 010c 	add.w	r1, r7, #12
 8001b60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b64:	481d      	ldr	r0, [pc, #116]	; (8001bdc <Update_UI_Display+0x150>)
 8001b66:	f003 f9ba 	bl	8004ede <HAL_UART_Transmit>
    }

    uint8_t digit_a = scaled_hour / 10; // Tens digit of the hour
 8001b6a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b6e:	4a1c      	ldr	r2, [pc, #112]	; (8001be0 <Update_UI_Display+0x154>)
 8001b70:	fba2 2303 	umull	r2, r3, r2, r3
 8001b74:	08db      	lsrs	r3, r3, #3
 8001b76:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
    uint8_t digit_b = scaled_hour % 10; // Units digit of the hour
 8001b7a:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8001b7e:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <Update_UI_Display+0x154>)
 8001b80:	fba3 1302 	umull	r1, r3, r3, r2
 8001b84:	08d9      	lsrs	r1, r3, #3
 8001b86:	460b      	mov	r3, r1
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	440b      	add	r3, r1
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d

    DIGITS_Display(digit_a, digit_b); // Display the scaled hour
 8001b94:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8001b98:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001b9c:	4611      	mov	r1, r2
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff fbce 	bl	8001340 <DIGITS_Display>
}
 8001ba4:	bf00      	nop
 8001ba6:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bdb0      	pop	{r4, r5, r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	200000d8 	.word	0x200000d8
 8001bb4:	200000e0 	.word	0x200000e0
 8001bb8:	aaaaaaab 	.word	0xaaaaaaab
 8001bbc:	20000014 	.word	0x20000014
 8001bc0:	200000a4 	.word	0x200000a4
 8001bc4:	200000a3 	.word	0x200000a3
 8001bc8:	20000000 	.word	0x20000000
 8001bcc:	200000bc 	.word	0x200000bc
 8001bd0:	200000b8 	.word	0x200000b8
 8001bd4:	200000e6 	.word	0x200000e6
 8001bd8:	08006cd0 	.word	0x08006cd0
 8001bdc:	20000294 	.word	0x20000294
 8001be0:	cccccccd 	.word	0xcccccccd

08001be4 <ADC_Manual_Control_Percent_PWM>:

uint8_t ADC_Manual_Control_Percent_PWM()
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
  uint8_t adc_value = 0; // 0 - 255
 8001bea:	2300      	movs	r3, #0
 8001bec:	71fb      	strb	r3, [r7, #7]
	ADC_Select_CH(9);
 8001bee:	2009      	movs	r0, #9
 8001bf0:	f7ff fc6c 	bl	80014cc <ADC_Select_CH>
	HAL_ADC_Start(&hadc1);
 8001bf4:	4810      	ldr	r0, [pc, #64]	; (8001c38 <ADC_Manual_Control_Percent_PWM+0x54>)
 8001bf6:	f000 fd5d 	bl	80026b4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001bfa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001bfe:	480e      	ldr	r0, [pc, #56]	; (8001c38 <ADC_Manual_Control_Percent_PWM+0x54>)
 8001c00:	f000 fe3f 	bl	8002882 <HAL_ADC_PollForConversion>
	adc_value = HAL_ADC_GetValue(&hadc1);
 8001c04:	480c      	ldr	r0, [pc, #48]	; (8001c38 <ADC_Manual_Control_Percent_PWM+0x54>)
 8001c06:	f000 fec7 	bl	8002998 <HAL_ADC_GetValue>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
	HAL_ADC_Stop(&hadc1);
 8001c0e:	480a      	ldr	r0, [pc, #40]	; (8001c38 <ADC_Manual_Control_Percent_PWM+0x54>)
 8001c10:	f000 fe04 	bl	800281c <HAL_ADC_Stop>

	// Calculate percentage (0 to 100%)
	uint8_t percentage = (uint8_t)((adc_value * 100) / 255);
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	2264      	movs	r2, #100	; 0x64
 8001c18:	fb02 f303 	mul.w	r3, r2, r3
 8001c1c:	4a07      	ldr	r2, [pc, #28]	; (8001c3c <ADC_Manual_Control_Percent_PWM+0x58>)
 8001c1e:	fb82 1203 	smull	r1, r2, r2, r3
 8001c22:	441a      	add	r2, r3
 8001c24:	11d2      	asrs	r2, r2, #7
 8001c26:	17db      	asrs	r3, r3, #31
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	71bb      	strb	r3, [r7, #6]

  return percentage;
 8001c2c:	79bb      	ldrb	r3, [r7, #6]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	200000ec 	.word	0x200000ec
 8001c3c:	80808081 	.word	0x80808081

08001c40 <Get_Water_Percent_Depth>:

void Get_Water_Percent_Depth()
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, us100_buffer, 2);
 8001c46:	2202      	movs	r2, #2
 8001c48:	4930      	ldr	r1, [pc, #192]	; (8001d0c <Get_Water_Percent_Depth+0xcc>)
 8001c4a:	4831      	ldr	r0, [pc, #196]	; (8001d10 <Get_Water_Percent_Depth+0xd0>)
 8001c4c:	f003 f9d9 	bl	8005002 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart1, &cmd_dist, 1, 500);
 8001c50:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c54:	2201      	movs	r2, #1
 8001c56:	492f      	ldr	r1, [pc, #188]	; (8001d14 <Get_Water_Percent_Depth+0xd4>)
 8001c58:	482d      	ldr	r0, [pc, #180]	; (8001d10 <Get_Water_Percent_Depth+0xd0>)
 8001c5a:	f003 f940 	bl	8004ede <HAL_UART_Transmit>
	HAL_Delay(0.005);
 8001c5e:	2000      	movs	r0, #0
 8001c60:	f000 fcc0 	bl	80025e4 <HAL_Delay>
	while( us100_Rx_flag == (00) ) {};
 8001c64:	bf00      	nop
 8001c66:	4b2c      	ldr	r3, [pc, #176]	; (8001d18 <Get_Water_Percent_Depth+0xd8>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0fa      	beq.n	8001c66 <Get_Water_Percent_Depth+0x26>
	// Combine the two bytes into a single 16-bit integer
	distance_mm = ((uint16_t)us100_buffer[0] << 8) | us100_buffer[1];
 8001c70:	4b26      	ldr	r3, [pc, #152]	; (8001d0c <Get_Water_Percent_Depth+0xcc>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	021b      	lsls	r3, r3, #8
 8001c76:	b21a      	sxth	r2, r3
 8001c78:	4b24      	ldr	r3, [pc, #144]	; (8001d0c <Get_Water_Percent_Depth+0xcc>)
 8001c7a:	785b      	ldrb	r3, [r3, #1]
 8001c7c:	b21b      	sxth	r3, r3
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	b21b      	sxth	r3, r3
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	4b25      	ldr	r3, [pc, #148]	; (8001d1c <Get_Water_Percent_Depth+0xdc>)
 8001c86:	801a      	strh	r2, [r3, #0]
  uint8_t calculated_depth = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	71fb      	strb	r3, [r7, #7]

	if( distance_mm >= Tank_Level_Lo ) {
 8001c8c:	4b23      	ldr	r3, [pc, #140]	; (8001d1c <Get_Water_Percent_Depth+0xdc>)
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	4b23      	ldr	r3, [pc, #140]	; (8001d20 <Get_Water_Percent_Depth+0xe0>)
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d305      	bcc.n	8001ca8 <Get_Water_Percent_Depth+0x68>
		calculated_depth = 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	71fb      	strb	r3, [r7, #7]
		Tank_Level_Lo_Alarm = 1;
 8001ca0:	4b20      	ldr	r3, [pc, #128]	; (8001d24 <Get_Water_Percent_Depth+0xe4>)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	701a      	strb	r2, [r3, #0]
 8001ca6:	e026      	b.n	8001cf6 <Get_Water_Percent_Depth+0xb6>
	} else if( distance_mm <= Tank_Level_Hi ) {
 8001ca8:	4b1c      	ldr	r3, [pc, #112]	; (8001d1c <Get_Water_Percent_Depth+0xdc>)
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	4b1e      	ldr	r3, [pc, #120]	; (8001d28 <Get_Water_Percent_Depth+0xe8>)
 8001cb0:	881b      	ldrh	r3, [r3, #0]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d805      	bhi.n	8001cc4 <Get_Water_Percent_Depth+0x84>
		calculated_depth = 99;
 8001cb8:	2363      	movs	r3, #99	; 0x63
 8001cba:	71fb      	strb	r3, [r7, #7]
		Tank_Level_Hi_Alarm = 1;
 8001cbc:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <Get_Water_Percent_Depth+0xec>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	701a      	strb	r2, [r3, #0]
 8001cc2:	e018      	b.n	8001cf6 <Get_Water_Percent_Depth+0xb6>
	} else {
		calculated_depth = (uint8_t) (100 - ((distance_mm - Tank_Level_Hi) * 100 / (Tank_Level_Lo - Tank_Level_Hi)));
 8001cc4:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <Get_Water_Percent_Depth+0xdc>)
 8001cc6:	881b      	ldrh	r3, [r3, #0]
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	461a      	mov	r2, r3
 8001ccc:	4b16      	ldr	r3, [pc, #88]	; (8001d28 <Get_Water_Percent_Depth+0xe8>)
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2264      	movs	r2, #100	; 0x64
 8001cd6:	fb03 f202 	mul.w	r2, r3, r2
 8001cda:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <Get_Water_Percent_Depth+0xe0>)
 8001cdc:	881b      	ldrh	r3, [r3, #0]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <Get_Water_Percent_Depth+0xe8>)
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	1acb      	subs	r3, r1, r3
 8001cea:	fb92 f3f3 	sdiv	r3, r2, r3
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8001cf4:	71fb      	strb	r3, [r7, #7]
	}

  Current_Water_Percent_depth = calculated_depth;
 8001cf6:	4a0e      	ldr	r2, [pc, #56]	; (8001d30 <Get_Water_Percent_Depth+0xf0>)
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	7013      	strb	r3, [r2, #0]
  HAL_Delay(50);
 8001cfc:	2032      	movs	r0, #50	; 0x32
 8001cfe:	f000 fc71 	bl	80025e4 <HAL_Delay>
}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	200000e4 	.word	0x200000e4
 8001d10:	2000020c 	.word	0x2000020c
 8001d14:	08006d5b 	.word	0x08006d5b
 8001d18:	200000e1 	.word	0x200000e1
 8001d1c:	200000e2 	.word	0x200000e2
 8001d20:	20000010 	.word	0x20000010
 8001d24:	200000e7 	.word	0x200000e7
 8001d28:	20000012 	.word	0x20000012
 8001d2c:	200000e8 	.word	0x200000e8
 8001d30:	200000e6 	.word	0x200000e6

08001d34 <Set_LED_Color>:

void Set_LED_Color(LED_Color color)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71fb      	strb	r3, [r7, #7]
	switch (color) {
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	3b01      	subs	r3, #1
 8001d42:	2b03      	cmp	r3, #3
 8001d44:	d856      	bhi.n	8001df4 <Set_LED_Color+0xc0>
 8001d46:	a201      	add	r2, pc, #4	; (adr r2, 8001d4c <Set_LED_Color+0x18>)
 8001d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d4c:	08001d5d 	.word	0x08001d5d
 8001d50:	08001d83 	.word	0x08001d83
 8001d54:	08001da9 	.word	0x08001da9
 8001d58:	08001dcf 	.word	0x08001dcf
		case LED_RED:
			HAL_GPIO_WritePin(GPIOA, RED_Pin, GPIO_PIN_SET);
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d62:	4830      	ldr	r0, [pc, #192]	; (8001e24 <Set_LED_Color+0xf0>)
 8001d64:	f001 fb6c 	bl	8003440 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GRN_Pin, GPIO_PIN_RESET);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d6e:	482d      	ldr	r0, [pc, #180]	; (8001e24 <Set_LED_Color+0xf0>)
 8001d70:	f001 fb66 	bl	8003440 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BLU_Pin, GPIO_PIN_RESET);
 8001d74:	2200      	movs	r2, #0
 8001d76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d7a:	482a      	ldr	r0, [pc, #168]	; (8001e24 <Set_LED_Color+0xf0>)
 8001d7c:	f001 fb60 	bl	8003440 <HAL_GPIO_WritePin>
			break;
 8001d80:	e04b      	b.n	8001e1a <Set_LED_Color+0xe6>

		case LED_GREEN:
			HAL_GPIO_WritePin(GPIOA, RED_Pin, GPIO_PIN_RESET);
 8001d82:	2200      	movs	r2, #0
 8001d84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d88:	4826      	ldr	r0, [pc, #152]	; (8001e24 <Set_LED_Color+0xf0>)
 8001d8a:	f001 fb59 	bl	8003440 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GRN_Pin, GPIO_PIN_SET);
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d94:	4823      	ldr	r0, [pc, #140]	; (8001e24 <Set_LED_Color+0xf0>)
 8001d96:	f001 fb53 	bl	8003440 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BLU_Pin, GPIO_PIN_RESET);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001da0:	4820      	ldr	r0, [pc, #128]	; (8001e24 <Set_LED_Color+0xf0>)
 8001da2:	f001 fb4d 	bl	8003440 <HAL_GPIO_WritePin>
			break;
 8001da6:	e038      	b.n	8001e1a <Set_LED_Color+0xe6>

		case LED_BLUE:
			HAL_GPIO_WritePin(GPIOA, RED_Pin, GPIO_PIN_RESET);
 8001da8:	2200      	movs	r2, #0
 8001daa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dae:	481d      	ldr	r0, [pc, #116]	; (8001e24 <Set_LED_Color+0xf0>)
 8001db0:	f001 fb46 	bl	8003440 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GRN_Pin, GPIO_PIN_RESET);
 8001db4:	2200      	movs	r2, #0
 8001db6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dba:	481a      	ldr	r0, [pc, #104]	; (8001e24 <Set_LED_Color+0xf0>)
 8001dbc:	f001 fb40 	bl	8003440 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BLU_Pin, GPIO_PIN_SET);
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dc6:	4817      	ldr	r0, [pc, #92]	; (8001e24 <Set_LED_Color+0xf0>)
 8001dc8:	f001 fb3a 	bl	8003440 <HAL_GPIO_WritePin>
			break;
 8001dcc:	e025      	b.n	8001e1a <Set_LED_Color+0xe6>

		case LED_PURPLE:
			HAL_GPIO_WritePin(GPIOA, RED_Pin, GPIO_PIN_SET);
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dd4:	4813      	ldr	r0, [pc, #76]	; (8001e24 <Set_LED_Color+0xf0>)
 8001dd6:	f001 fb33 	bl	8003440 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GRN_Pin, GPIO_PIN_RESET);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001de0:	4810      	ldr	r0, [pc, #64]	; (8001e24 <Set_LED_Color+0xf0>)
 8001de2:	f001 fb2d 	bl	8003440 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BLU_Pin, GPIO_PIN_SET);
 8001de6:	2201      	movs	r2, #1
 8001de8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dec:	480d      	ldr	r0, [pc, #52]	; (8001e24 <Set_LED_Color+0xf0>)
 8001dee:	f001 fb27 	bl	8003440 <HAL_GPIO_WritePin>
			break;
 8001df2:	e012      	b.n	8001e1a <Set_LED_Color+0xe6>

		case LED_OFF:
		default:
			HAL_GPIO_WritePin(GPIOA, RED_Pin, GPIO_PIN_RESET);
 8001df4:	2200      	movs	r2, #0
 8001df6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dfa:	480a      	ldr	r0, [pc, #40]	; (8001e24 <Set_LED_Color+0xf0>)
 8001dfc:	f001 fb20 	bl	8003440 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GRN_Pin, GPIO_PIN_RESET);
 8001e00:	2200      	movs	r2, #0
 8001e02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e06:	4807      	ldr	r0, [pc, #28]	; (8001e24 <Set_LED_Color+0xf0>)
 8001e08:	f001 fb1a 	bl	8003440 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BLU_Pin, GPIO_PIN_RESET);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e12:	4804      	ldr	r0, [pc, #16]	; (8001e24 <Set_LED_Color+0xf0>)
 8001e14:	f001 fb14 	bl	8003440 <HAL_GPIO_WritePin>
			break;
 8001e18:	bf00      	nop
	}
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40020000 	.word	0x40020000

08001e28 <Update_DC_Motor_RPM>:

void Update_DC_Motor_RPM() {
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
  uint32_t ticks = rpm_tick_count - last_rpm_tick_count;
 8001e2e:	4b2d      	ldr	r3, [pc, #180]	; (8001ee4 <Update_DC_Motor_RPM+0xbc>)
 8001e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e34:	4611      	mov	r1, r2
 8001e36:	4b2c      	ldr	r3, [pc, #176]	; (8001ee8 <Update_DC_Motor_RPM+0xc0>)
 8001e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	603b      	str	r3, [r7, #0]
  uint32_t current_rpm = 0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	607b      	str	r3, [r7, #4]

  if (ticks > 0) {
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00b      	beq.n	8001e64 <Update_DC_Motor_RPM+0x3c>
     current_rpm = (ticks * 60) / 20; // Calculate RPM based on ticks
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	011b      	lsls	r3, r3, #4
 8001e52:	1a9b      	subs	r3, r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	461a      	mov	r2, r3
 8001e58:	4b24      	ldr	r3, [pc, #144]	; (8001eec <Update_DC_Motor_RPM+0xc4>)
 8001e5a:	fba3 2302 	umull	r2, r3, r3, r2
 8001e5e:	091b      	lsrs	r3, r3, #4
 8001e60:	607b      	str	r3, [r7, #4]
 8001e62:	e001      	b.n	8001e68 <Update_DC_Motor_RPM+0x40>
  } else {
    current_rpm = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	607b      	str	r3, [r7, #4]
  }

  // Update the moving average
  rpm_sum -= rpm_samples[rpm_index]; // Subtract the oldest sample from the sum
 8001e68:	4b21      	ldr	r3, [pc, #132]	; (8001ef0 <Update_DC_Motor_RPM+0xc8>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	461a      	mov	r2, r3
 8001e70:	4b20      	ldr	r3, [pc, #128]	; (8001ef4 <Update_DC_Motor_RPM+0xcc>)
 8001e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e76:	4a20      	ldr	r2, [pc, #128]	; (8001ef8 <Update_DC_Motor_RPM+0xd0>)
 8001e78:	6812      	ldr	r2, [r2, #0]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	4a1e      	ldr	r2, [pc, #120]	; (8001ef8 <Update_DC_Motor_RPM+0xd0>)
 8001e7e:	6013      	str	r3, [r2, #0]
  rpm_samples[rpm_index] = current_rpm; // Store the new RPM value in the array
 8001e80:	4b1b      	ldr	r3, [pc, #108]	; (8001ef0 <Update_DC_Motor_RPM+0xc8>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	4619      	mov	r1, r3
 8001e88:	4a1a      	ldr	r2, [pc, #104]	; (8001ef4 <Update_DC_Motor_RPM+0xcc>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  rpm_sum += current_rpm; // Add the new RPM value to the sum
 8001e90:	4b19      	ldr	r3, [pc, #100]	; (8001ef8 <Update_DC_Motor_RPM+0xd0>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4413      	add	r3, r2
 8001e98:	4a17      	ldr	r2, [pc, #92]	; (8001ef8 <Update_DC_Motor_RPM+0xd0>)
 8001e9a:	6013      	str	r3, [r2, #0]

  rpm_index = (rpm_index + 1) % RPM_SAMPLE_SIZE; // Update the index, wrapping around if necessary
 8001e9c:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <Update_DC_Motor_RPM+0xc8>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	1c5a      	adds	r2, r3, #1
 8001ea4:	4b15      	ldr	r3, [pc, #84]	; (8001efc <Update_DC_Motor_RPM+0xd4>)
 8001ea6:	fb83 3102 	smull	r3, r1, r3, r2
 8001eaa:	17d3      	asrs	r3, r2, #31
 8001eac:	1ac9      	subs	r1, r1, r3
 8001eae:	460b      	mov	r3, r1
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	440b      	add	r3, r1
 8001eb4:	1ad1      	subs	r1, r2, r3
 8001eb6:	b2ca      	uxtb	r2, r1
 8001eb8:	4b0d      	ldr	r3, [pc, #52]	; (8001ef0 <Update_DC_Motor_RPM+0xc8>)
 8001eba:	701a      	strb	r2, [r3, #0]

  DC_Motor_RPM = rpm_sum / RPM_SAMPLE_SIZE; // Calculate the average RPM
 8001ebc:	4b0e      	ldr	r3, [pc, #56]	; (8001ef8 <Update_DC_Motor_RPM+0xd0>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a0f      	ldr	r2, [pc, #60]	; (8001f00 <Update_DC_Motor_RPM+0xd8>)
 8001ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec6:	085b      	lsrs	r3, r3, #1
 8001ec8:	4a0e      	ldr	r2, [pc, #56]	; (8001f04 <Update_DC_Motor_RPM+0xdc>)
 8001eca:	6013      	str	r3, [r2, #0]

  last_rpm_tick_count = rpm_tick_count; // Update the last tick count
 8001ecc:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <Update_DC_Motor_RPM+0xbc>)
 8001ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed2:	4905      	ldr	r1, [pc, #20]	; (8001ee8 <Update_DC_Motor_RPM+0xc0>)
 8001ed4:	e9c1 2300 	strd	r2, r3, [r1]

}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	200000a8 	.word	0x200000a8
 8001ee8:	200000b0 	.word	0x200000b0
 8001eec:	cccccccd 	.word	0xcccccccd
 8001ef0:	200000d0 	.word	0x200000d0
 8001ef4:	200000c0 	.word	0x200000c0
 8001ef8:	200000cc 	.word	0x200000cc
 8001efc:	55555556 	.word	0x55555556
 8001f00:	aaaaaaab 	.word	0xaaaaaaab
 8001f04:	200000b8 	.word	0x200000b8

08001f08 <System_Interlock>:

void System_Interlock()
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
	System_Interlock_Flag = 1;
 8001f0c:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <System_Interlock+0x50>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f12:	2200      	movs	r2, #0
 8001f14:	2120      	movs	r1, #32
 8001f16:	4811      	ldr	r0, [pc, #68]	; (8001f5c <System_Interlock+0x54>)
 8001f18:	f001 fa92 	bl	8003440 <HAL_GPIO_WritePin>
	UART_Send_MSG("\r\n\n RESERVOIR IS EMPTY");
 8001f1c:	4810      	ldr	r0, [pc, #64]	; (8001f60 <System_Interlock+0x58>)
 8001f1e:	f7ff fcc5 	bl	80018ac <UART_Send_MSG>

	while (1) {
		// Turn off DC Motor
		Control_DC_Motor_PWM(0, 0);
 8001f22:	2100      	movs	r1, #0
 8001f24:	2000      	movs	r0, #0
 8001f26:	f7ff fd53 	bl	80019d0 <Control_DC_Motor_PWM>
		Set_LED_Color(LED_RED);
 8001f2a:	2001      	movs	r0, #1
 8001f2c:	f7ff ff02 	bl	8001d34 <Set_LED_Color>
		HAL_Delay(500);
 8001f30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f34:	f000 fb56 	bl	80025e4 <HAL_Delay>
		Set_LED_Color(LED_GREEN);
 8001f38:	2002      	movs	r0, #2
 8001f3a:	f7ff fefb 	bl	8001d34 <Set_LED_Color>
		HAL_Delay(500);
 8001f3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f42:	f000 fb4f 	bl	80025e4 <HAL_Delay>
		Set_LED_Color(LED_BLUE);
 8001f46:	2003      	movs	r0, #3
 8001f48:	f7ff fef4 	bl	8001d34 <Set_LED_Color>
		HAL_Delay(500);
 8001f4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f50:	f000 fb48 	bl	80025e4 <HAL_Delay>
		Control_DC_Motor_PWM(0, 0);
 8001f54:	e7e5      	b.n	8001f22 <System_Interlock+0x1a>
 8001f56:	bf00      	nop
 8001f58:	200000a4 	.word	0x200000a4
 8001f5c:	40020000 	.word	0x40020000
 8001f60:	08006d44 	.word	0x08006d44

08001f64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f68:	b672      	cpsid	i
}
 8001f6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f6c:	e7fe      	b.n	8001f6c <Error_Handler+0x8>
	...

08001f70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	607b      	str	r3, [r7, #4]
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <HAL_MspInit+0x4c>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7e:	4a0f      	ldr	r2, [pc, #60]	; (8001fbc <HAL_MspInit+0x4c>)
 8001f80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f84:	6453      	str	r3, [r2, #68]	; 0x44
 8001f86:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <HAL_MspInit+0x4c>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f8e:	607b      	str	r3, [r7, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	603b      	str	r3, [r7, #0]
 8001f96:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <HAL_MspInit+0x4c>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	4a08      	ldr	r2, [pc, #32]	; (8001fbc <HAL_MspInit+0x4c>)
 8001f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa2:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <HAL_MspInit+0x4c>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001fae:	2007      	movs	r0, #7
 8001fb0:	f000 ffee 	bl	8002f90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40023800 	.word	0x40023800

08001fc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08a      	sub	sp, #40	; 0x28
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc8:	f107 0314 	add.w	r3, r7, #20
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a17      	ldr	r2, [pc, #92]	; (800203c <HAL_ADC_MspInit+0x7c>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d127      	bne.n	8002032 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	613b      	str	r3, [r7, #16]
 8001fe6:	4b16      	ldr	r3, [pc, #88]	; (8002040 <HAL_ADC_MspInit+0x80>)
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fea:	4a15      	ldr	r2, [pc, #84]	; (8002040 <HAL_ADC_MspInit+0x80>)
 8001fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ff2:	4b13      	ldr	r3, [pc, #76]	; (8002040 <HAL_ADC_MspInit+0x80>)
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffa:	613b      	str	r3, [r7, #16]
 8001ffc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <HAL_ADC_MspInit+0x80>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	4a0e      	ldr	r2, [pc, #56]	; (8002040 <HAL_ADC_MspInit+0x80>)
 8002008:	f043 0302 	orr.w	r3, r3, #2
 800200c:	6313      	str	r3, [r2, #48]	; 0x30
 800200e:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <HAL_ADC_MspInit+0x80>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800201a:	2302      	movs	r3, #2
 800201c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800201e:	2303      	movs	r3, #3
 8002020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002026:	f107 0314 	add.w	r3, r7, #20
 800202a:	4619      	mov	r1, r3
 800202c:	4805      	ldr	r0, [pc, #20]	; (8002044 <HAL_ADC_MspInit+0x84>)
 800202e:	f001 f883 	bl	8003138 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002032:	bf00      	nop
 8002034:	3728      	adds	r7, #40	; 0x28
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40012000 	.word	0x40012000
 8002040:	40023800 	.word	0x40023800
 8002044:	40020400 	.word	0x40020400

08002048 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002058:	d10e      	bne.n	8002078 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
 800205e:	4b20      	ldr	r3, [pc, #128]	; (80020e0 <HAL_TIM_Base_MspInit+0x98>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	4a1f      	ldr	r2, [pc, #124]	; (80020e0 <HAL_TIM_Base_MspInit+0x98>)
 8002064:	f043 0301 	orr.w	r3, r3, #1
 8002068:	6413      	str	r3, [r2, #64]	; 0x40
 800206a:	4b1d      	ldr	r3, [pc, #116]	; (80020e0 <HAL_TIM_Base_MspInit+0x98>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	617b      	str	r3, [r7, #20]
 8002074:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002076:	e02e      	b.n	80020d6 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a19      	ldr	r2, [pc, #100]	; (80020e4 <HAL_TIM_Base_MspInit+0x9c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d10e      	bne.n	80020a0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	613b      	str	r3, [r7, #16]
 8002086:	4b16      	ldr	r3, [pc, #88]	; (80020e0 <HAL_TIM_Base_MspInit+0x98>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	4a15      	ldr	r2, [pc, #84]	; (80020e0 <HAL_TIM_Base_MspInit+0x98>)
 800208c:	f043 0302 	orr.w	r3, r3, #2
 8002090:	6413      	str	r3, [r2, #64]	; 0x40
 8002092:	4b13      	ldr	r3, [pc, #76]	; (80020e0 <HAL_TIM_Base_MspInit+0x98>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	613b      	str	r3, [r7, #16]
 800209c:	693b      	ldr	r3, [r7, #16]
}
 800209e:	e01a      	b.n	80020d6 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM5)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a10      	ldr	r2, [pc, #64]	; (80020e8 <HAL_TIM_Base_MspInit+0xa0>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d115      	bne.n	80020d6 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	4b0c      	ldr	r3, [pc, #48]	; (80020e0 <HAL_TIM_Base_MspInit+0x98>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	4a0b      	ldr	r2, [pc, #44]	; (80020e0 <HAL_TIM_Base_MspInit+0x98>)
 80020b4:	f043 0308 	orr.w	r3, r3, #8
 80020b8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ba:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <HAL_TIM_Base_MspInit+0x98>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80020c6:	2200      	movs	r2, #0
 80020c8:	2100      	movs	r1, #0
 80020ca:	2032      	movs	r0, #50	; 0x32
 80020cc:	f000 ff6b 	bl	8002fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80020d0:	2032      	movs	r0, #50	; 0x32
 80020d2:	f000 ff84 	bl	8002fde <HAL_NVIC_EnableIRQ>
}
 80020d6:	bf00      	nop
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40000400 	.word	0x40000400
 80020e8:	40000c00 	.word	0x40000c00

080020ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08a      	sub	sp, #40	; 0x28
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f4:	f107 0314 	add.w	r3, r7, #20
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]
 8002102:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800210c:	d11e      	bne.n	800214c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	4b31      	ldr	r3, [pc, #196]	; (80021d8 <HAL_TIM_MspPostInit+0xec>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	4a30      	ldr	r2, [pc, #192]	; (80021d8 <HAL_TIM_MspPostInit+0xec>)
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	6313      	str	r3, [r2, #48]	; 0x30
 800211e:	4b2e      	ldr	r3, [pc, #184]	; (80021d8 <HAL_TIM_MspPostInit+0xec>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800212a:	2301      	movs	r3, #1
 800212c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212e:	2302      	movs	r3, #2
 8002130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002136:	2300      	movs	r3, #0
 8002138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800213a:	2301      	movs	r3, #1
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213e:	f107 0314 	add.w	r3, r7, #20
 8002142:	4619      	mov	r1, r3
 8002144:	4825      	ldr	r0, [pc, #148]	; (80021dc <HAL_TIM_MspPostInit+0xf0>)
 8002146:	f000 fff7 	bl	8003138 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800214a:	e040      	b.n	80021ce <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM3)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a23      	ldr	r2, [pc, #140]	; (80021e0 <HAL_TIM_MspPostInit+0xf4>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d13b      	bne.n	80021ce <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	4b1f      	ldr	r3, [pc, #124]	; (80021d8 <HAL_TIM_MspPostInit+0xec>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	4a1e      	ldr	r2, [pc, #120]	; (80021d8 <HAL_TIM_MspPostInit+0xec>)
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	6313      	str	r3, [r2, #48]	; 0x30
 8002166:	4b1c      	ldr	r3, [pc, #112]	; (80021d8 <HAL_TIM_MspPostInit+0xec>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	4b18      	ldr	r3, [pc, #96]	; (80021d8 <HAL_TIM_MspPostInit+0xec>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	4a17      	ldr	r2, [pc, #92]	; (80021d8 <HAL_TIM_MspPostInit+0xec>)
 800217c:	f043 0302 	orr.w	r3, r3, #2
 8002180:	6313      	str	r3, [r2, #48]	; 0x30
 8002182:	4b15      	ldr	r3, [pc, #84]	; (80021d8 <HAL_TIM_MspPostInit+0xec>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800218e:	2340      	movs	r3, #64	; 0x40
 8002190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002192:	2302      	movs	r3, #2
 8002194:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219a:	2300      	movs	r3, #0
 800219c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800219e:	2302      	movs	r3, #2
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a2:	f107 0314 	add.w	r3, r7, #20
 80021a6:	4619      	mov	r1, r3
 80021a8:	480c      	ldr	r0, [pc, #48]	; (80021dc <HAL_TIM_MspPostInit+0xf0>)
 80021aa:	f000 ffc5 	bl	8003138 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021ae:	2301      	movs	r3, #1
 80021b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b2:	2302      	movs	r3, #2
 80021b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ba:	2300      	movs	r3, #0
 80021bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021be:	2302      	movs	r3, #2
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c2:	f107 0314 	add.w	r3, r7, #20
 80021c6:	4619      	mov	r1, r3
 80021c8:	4806      	ldr	r0, [pc, #24]	; (80021e4 <HAL_TIM_MspPostInit+0xf8>)
 80021ca:	f000 ffb5 	bl	8003138 <HAL_GPIO_Init>
}
 80021ce:	bf00      	nop
 80021d0:	3728      	adds	r7, #40	; 0x28
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40020000 	.word	0x40020000
 80021e0:	40000400 	.word	0x40000400
 80021e4:	40020400 	.word	0x40020400

080021e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08e      	sub	sp, #56	; 0x38
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a53      	ldr	r2, [pc, #332]	; (8002354 <HAL_UART_MspInit+0x16c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d135      	bne.n	8002276 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	623b      	str	r3, [r7, #32]
 800220e:	4b52      	ldr	r3, [pc, #328]	; (8002358 <HAL_UART_MspInit+0x170>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002212:	4a51      	ldr	r2, [pc, #324]	; (8002358 <HAL_UART_MspInit+0x170>)
 8002214:	f043 0310 	orr.w	r3, r3, #16
 8002218:	6453      	str	r3, [r2, #68]	; 0x44
 800221a:	4b4f      	ldr	r3, [pc, #316]	; (8002358 <HAL_UART_MspInit+0x170>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221e:	f003 0310 	and.w	r3, r3, #16
 8002222:	623b      	str	r3, [r7, #32]
 8002224:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
 800222a:	4b4b      	ldr	r3, [pc, #300]	; (8002358 <HAL_UART_MspInit+0x170>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	4a4a      	ldr	r2, [pc, #296]	; (8002358 <HAL_UART_MspInit+0x170>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	6313      	str	r3, [r2, #48]	; 0x30
 8002236:	4b48      	ldr	r3, [pc, #288]	; (8002358 <HAL_UART_MspInit+0x170>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	61fb      	str	r3, [r7, #28]
 8002240:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002242:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002246:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002248:	2302      	movs	r3, #2
 800224a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224c:	2300      	movs	r3, #0
 800224e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002250:	2303      	movs	r3, #3
 8002252:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002254:	2307      	movs	r3, #7
 8002256:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800225c:	4619      	mov	r1, r3
 800225e:	483f      	ldr	r0, [pc, #252]	; (800235c <HAL_UART_MspInit+0x174>)
 8002260:	f000 ff6a 	bl	8003138 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002264:	2200      	movs	r2, #0
 8002266:	2100      	movs	r1, #0
 8002268:	2025      	movs	r0, #37	; 0x25
 800226a:	f000 fe9c 	bl	8002fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800226e:	2025      	movs	r0, #37	; 0x25
 8002270:	f000 feb5 	bl	8002fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002274:	e06a      	b.n	800234c <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART2)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a39      	ldr	r2, [pc, #228]	; (8002360 <HAL_UART_MspInit+0x178>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d12c      	bne.n	80022da <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002280:	2300      	movs	r3, #0
 8002282:	61bb      	str	r3, [r7, #24]
 8002284:	4b34      	ldr	r3, [pc, #208]	; (8002358 <HAL_UART_MspInit+0x170>)
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	4a33      	ldr	r2, [pc, #204]	; (8002358 <HAL_UART_MspInit+0x170>)
 800228a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800228e:	6413      	str	r3, [r2, #64]	; 0x40
 8002290:	4b31      	ldr	r3, [pc, #196]	; (8002358 <HAL_UART_MspInit+0x170>)
 8002292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002298:	61bb      	str	r3, [r7, #24]
 800229a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	4b2d      	ldr	r3, [pc, #180]	; (8002358 <HAL_UART_MspInit+0x170>)
 80022a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a4:	4a2c      	ldr	r2, [pc, #176]	; (8002358 <HAL_UART_MspInit+0x170>)
 80022a6:	f043 0301 	orr.w	r3, r3, #1
 80022aa:	6313      	str	r3, [r2, #48]	; 0x30
 80022ac:	4b2a      	ldr	r3, [pc, #168]	; (8002358 <HAL_UART_MspInit+0x170>)
 80022ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	617b      	str	r3, [r7, #20]
 80022b6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80022b8:	230c      	movs	r3, #12
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022bc:	2302      	movs	r3, #2
 80022be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c0:	2300      	movs	r3, #0
 80022c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c4:	2300      	movs	r3, #0
 80022c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022c8:	2307      	movs	r3, #7
 80022ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d0:	4619      	mov	r1, r3
 80022d2:	4822      	ldr	r0, [pc, #136]	; (800235c <HAL_UART_MspInit+0x174>)
 80022d4:	f000 ff30 	bl	8003138 <HAL_GPIO_Init>
}
 80022d8:	e038      	b.n	800234c <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART6)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a21      	ldr	r2, [pc, #132]	; (8002364 <HAL_UART_MspInit+0x17c>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d133      	bne.n	800234c <HAL_UART_MspInit+0x164>
    __HAL_RCC_USART6_CLK_ENABLE();
 80022e4:	2300      	movs	r3, #0
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	4b1b      	ldr	r3, [pc, #108]	; (8002358 <HAL_UART_MspInit+0x170>)
 80022ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ec:	4a1a      	ldr	r2, [pc, #104]	; (8002358 <HAL_UART_MspInit+0x170>)
 80022ee:	f043 0320 	orr.w	r3, r3, #32
 80022f2:	6453      	str	r3, [r2, #68]	; 0x44
 80022f4:	4b18      	ldr	r3, [pc, #96]	; (8002358 <HAL_UART_MspInit+0x170>)
 80022f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f8:	f003 0320 	and.w	r3, r3, #32
 80022fc:	613b      	str	r3, [r7, #16]
 80022fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002300:	2300      	movs	r3, #0
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	4b14      	ldr	r3, [pc, #80]	; (8002358 <HAL_UART_MspInit+0x170>)
 8002306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002308:	4a13      	ldr	r2, [pc, #76]	; (8002358 <HAL_UART_MspInit+0x170>)
 800230a:	f043 0304 	orr.w	r3, r3, #4
 800230e:	6313      	str	r3, [r2, #48]	; 0x30
 8002310:	4b11      	ldr	r3, [pc, #68]	; (8002358 <HAL_UART_MspInit+0x170>)
 8002312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800231c:	23c0      	movs	r3, #192	; 0xc0
 800231e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002320:	2302      	movs	r3, #2
 8002322:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002328:	2303      	movs	r3, #3
 800232a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800232c:	2308      	movs	r3, #8
 800232e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002330:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002334:	4619      	mov	r1, r3
 8002336:	480c      	ldr	r0, [pc, #48]	; (8002368 <HAL_UART_MspInit+0x180>)
 8002338:	f000 fefe 	bl	8003138 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800233c:	2200      	movs	r2, #0
 800233e:	2100      	movs	r1, #0
 8002340:	2047      	movs	r0, #71	; 0x47
 8002342:	f000 fe30 	bl	8002fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002346:	2047      	movs	r0, #71	; 0x47
 8002348:	f000 fe49 	bl	8002fde <HAL_NVIC_EnableIRQ>
}
 800234c:	bf00      	nop
 800234e:	3738      	adds	r7, #56	; 0x38
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40011000 	.word	0x40011000
 8002358:	40023800 	.word	0x40023800
 800235c:	40020000 	.word	0x40020000
 8002360:	40004400 	.word	0x40004400
 8002364:	40011400 	.word	0x40011400
 8002368:	40020800 	.word	0x40020800

0800236c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002370:	e7fe      	b.n	8002370 <NMI_Handler+0x4>

08002372 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002376:	e7fe      	b.n	8002376 <HardFault_Handler+0x4>

08002378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800237c:	e7fe      	b.n	800237c <MemManage_Handler+0x4>

0800237e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002382:	e7fe      	b.n	8002382 <BusFault_Handler+0x4>

08002384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002388:	e7fe      	b.n	8002388 <UsageFault_Handler+0x4>

0800238a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800238a:	b480      	push	{r7}
 800238c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023a6:	b480      	push	{r7}
 80023a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023b8:	f000 f8f4 	bl	80025a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023bc:	bf00      	nop
 80023be:	bd80      	pop	{r7, pc}

080023c0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RPM_TICK_Pin);
 80023c4:	2004      	movs	r0, #4
 80023c6:	f001 f86f 	bl	80034a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
	...

080023d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023d4:	4802      	ldr	r0, [pc, #8]	; (80023e0 <USART1_IRQHandler+0x10>)
 80023d6:	f002 fe45 	bl	8005064 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	2000020c 	.word	0x2000020c

080023e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLU_PB_Pin);
 80023e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80023ec:	f001 f85c 	bl	80034a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80023f0:	bf00      	nop
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80023f8:	4802      	ldr	r0, [pc, #8]	; (8002404 <TIM5_IRQHandler+0x10>)
 80023fa:	f001 ff1b 	bl	8004234 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	200001c4 	.word	0x200001c4

08002408 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800240c:	4802      	ldr	r0, [pc, #8]	; (8002418 <USART6_IRQHandler+0x10>)
 800240e:	f002 fe29 	bl	8005064 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000294 	.word	0x20000294

0800241c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002424:	4a14      	ldr	r2, [pc, #80]	; (8002478 <_sbrk+0x5c>)
 8002426:	4b15      	ldr	r3, [pc, #84]	; (800247c <_sbrk+0x60>)
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002430:	4b13      	ldr	r3, [pc, #76]	; (8002480 <_sbrk+0x64>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d102      	bne.n	800243e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002438:	4b11      	ldr	r3, [pc, #68]	; (8002480 <_sbrk+0x64>)
 800243a:	4a12      	ldr	r2, [pc, #72]	; (8002484 <_sbrk+0x68>)
 800243c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800243e:	4b10      	ldr	r3, [pc, #64]	; (8002480 <_sbrk+0x64>)
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4413      	add	r3, r2
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	429a      	cmp	r2, r3
 800244a:	d207      	bcs.n	800245c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800244c:	f003 fe2a 	bl	80060a4 <__errno>
 8002450:	4603      	mov	r3, r0
 8002452:	220c      	movs	r2, #12
 8002454:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002456:	f04f 33ff 	mov.w	r3, #4294967295
 800245a:	e009      	b.n	8002470 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800245c:	4b08      	ldr	r3, [pc, #32]	; (8002480 <_sbrk+0x64>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002462:	4b07      	ldr	r3, [pc, #28]	; (8002480 <_sbrk+0x64>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4413      	add	r3, r2
 800246a:	4a05      	ldr	r2, [pc, #20]	; (8002480 <_sbrk+0x64>)
 800246c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800246e:	68fb      	ldr	r3, [r7, #12]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	20018000 	.word	0x20018000
 800247c:	00000400 	.word	0x00000400
 8002480:	200002d8 	.word	0x200002d8
 8002484:	20000428 	.word	0x20000428

08002488 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <SystemInit+0x20>)
 800248e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002492:	4a05      	ldr	r2, [pc, #20]	; (80024a8 <SystemInit+0x20>)
 8002494:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002498:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800249c:	bf00      	nop
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80024ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024b0:	480d      	ldr	r0, [pc, #52]	; (80024e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024b2:	490e      	ldr	r1, [pc, #56]	; (80024ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024b4:	4a0e      	ldr	r2, [pc, #56]	; (80024f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024b8:	e002      	b.n	80024c0 <LoopCopyDataInit>

080024ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024be:	3304      	adds	r3, #4

080024c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024c4:	d3f9      	bcc.n	80024ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024c6:	4a0b      	ldr	r2, [pc, #44]	; (80024f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024c8:	4c0b      	ldr	r4, [pc, #44]	; (80024f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80024ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024cc:	e001      	b.n	80024d2 <LoopFillZerobss>

080024ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024d0:	3204      	adds	r2, #4

080024d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024d4:	d3fb      	bcc.n	80024ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024d6:	f7ff ffd7 	bl	8002488 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024da:	f003 fde9 	bl	80060b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024de:	f7fe f855 	bl	800058c <main>
  bx  lr    
 80024e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80024e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80024e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024ec:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80024f0:	08006eb8 	.word	0x08006eb8
  ldr r2, =_sbss
 80024f4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80024f8:	20000428 	.word	0x20000428

080024fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024fc:	e7fe      	b.n	80024fc <ADC_IRQHandler>
	...

08002500 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002504:	4b0e      	ldr	r3, [pc, #56]	; (8002540 <HAL_Init+0x40>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a0d      	ldr	r2, [pc, #52]	; (8002540 <HAL_Init+0x40>)
 800250a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800250e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002510:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <HAL_Init+0x40>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a0a      	ldr	r2, [pc, #40]	; (8002540 <HAL_Init+0x40>)
 8002516:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800251a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800251c:	4b08      	ldr	r3, [pc, #32]	; (8002540 <HAL_Init+0x40>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a07      	ldr	r2, [pc, #28]	; (8002540 <HAL_Init+0x40>)
 8002522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002526:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002528:	2003      	movs	r0, #3
 800252a:	f000 fd31 	bl	8002f90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800252e:	2000      	movs	r0, #0
 8002530:	f000 f808 	bl	8002544 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002534:	f7ff fd1c 	bl	8001f70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40023c00 	.word	0x40023c00

08002544 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800254c:	4b12      	ldr	r3, [pc, #72]	; (8002598 <HAL_InitTick+0x54>)
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	4b12      	ldr	r3, [pc, #72]	; (800259c <HAL_InitTick+0x58>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	4619      	mov	r1, r3
 8002556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800255a:	fbb3 f3f1 	udiv	r3, r3, r1
 800255e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002562:	4618      	mov	r0, r3
 8002564:	f000 fd49 	bl	8002ffa <HAL_SYSTICK_Config>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e00e      	b.n	8002590 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b0f      	cmp	r3, #15
 8002576:	d80a      	bhi.n	800258e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002578:	2200      	movs	r2, #0
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	f04f 30ff 	mov.w	r0, #4294967295
 8002580:	f000 fd11 	bl	8002fa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002584:	4a06      	ldr	r2, [pc, #24]	; (80025a0 <HAL_InitTick+0x5c>)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800258a:	2300      	movs	r3, #0
 800258c:	e000      	b.n	8002590 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
}
 8002590:	4618      	mov	r0, r3
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	20000018 	.word	0x20000018
 800259c:	20000020 	.word	0x20000020
 80025a0:	2000001c 	.word	0x2000001c

080025a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025a8:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <HAL_IncTick+0x20>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	461a      	mov	r2, r3
 80025ae:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <HAL_IncTick+0x24>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4413      	add	r3, r2
 80025b4:	4a04      	ldr	r2, [pc, #16]	; (80025c8 <HAL_IncTick+0x24>)
 80025b6:	6013      	str	r3, [r2, #0]
}
 80025b8:	bf00      	nop
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	20000020 	.word	0x20000020
 80025c8:	200002dc 	.word	0x200002dc

080025cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  return uwTick;
 80025d0:	4b03      	ldr	r3, [pc, #12]	; (80025e0 <HAL_GetTick+0x14>)
 80025d2:	681b      	ldr	r3, [r3, #0]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	200002dc 	.word	0x200002dc

080025e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025ec:	f7ff ffee 	bl	80025cc <HAL_GetTick>
 80025f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fc:	d005      	beq.n	800260a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025fe:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <HAL_Delay+0x44>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	461a      	mov	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	4413      	add	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800260a:	bf00      	nop
 800260c:	f7ff ffde 	bl	80025cc <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	429a      	cmp	r2, r3
 800261a:	d8f7      	bhi.n	800260c <HAL_Delay+0x28>
  {
  }
}
 800261c:	bf00      	nop
 800261e:	bf00      	nop
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	20000020 	.word	0x20000020

0800262c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002634:	2300      	movs	r3, #0
 8002636:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e033      	b.n	80026aa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	2b00      	cmp	r3, #0
 8002648:	d109      	bne.n	800265e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7ff fcb8 	bl	8001fc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f003 0310 	and.w	r3, r3, #16
 8002666:	2b00      	cmp	r3, #0
 8002668:	d118      	bne.n	800269c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002672:	f023 0302 	bic.w	r3, r3, #2
 8002676:	f043 0202 	orr.w	r2, r3, #2
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 faba 	bl	8002bf8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	f023 0303 	bic.w	r3, r3, #3
 8002692:	f043 0201 	orr.w	r2, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	641a      	str	r2, [r3, #64]	; 0x40
 800269a:	e001      	b.n	80026a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
	...

080026b4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80026bc:	2300      	movs	r3, #0
 80026be:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d101      	bne.n	80026ce <HAL_ADC_Start+0x1a>
 80026ca:	2302      	movs	r3, #2
 80026cc:	e097      	b.n	80027fe <HAL_ADC_Start+0x14a>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d018      	beq.n	8002716 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0201 	orr.w	r2, r2, #1
 80026f2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026f4:	4b45      	ldr	r3, [pc, #276]	; (800280c <HAL_ADC_Start+0x158>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a45      	ldr	r2, [pc, #276]	; (8002810 <HAL_ADC_Start+0x15c>)
 80026fa:	fba2 2303 	umull	r2, r3, r2, r3
 80026fe:	0c9a      	lsrs	r2, r3, #18
 8002700:	4613      	mov	r3, r2
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	4413      	add	r3, r2
 8002706:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002708:	e002      	b.n	8002710 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	3b01      	subs	r3, #1
 800270e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1f9      	bne.n	800270a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b01      	cmp	r3, #1
 8002722:	d15f      	bne.n	80027e4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800272c:	f023 0301 	bic.w	r3, r3, #1
 8002730:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002742:	2b00      	cmp	r3, #0
 8002744:	d007      	beq.n	8002756 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800274e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800275e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002762:	d106      	bne.n	8002772 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002768:	f023 0206 	bic.w	r2, r3, #6
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	645a      	str	r2, [r3, #68]	; 0x44
 8002770:	e002      	b.n	8002778 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002780:	4b24      	ldr	r3, [pc, #144]	; (8002814 <HAL_ADC_Start+0x160>)
 8002782:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800278c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f003 031f 	and.w	r3, r3, #31
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10f      	bne.n	80027ba <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d129      	bne.n	80027fc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689a      	ldr	r2, [r3, #8]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	e020      	b.n	80027fc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a16      	ldr	r2, [pc, #88]	; (8002818 <HAL_ADC_Start+0x164>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d11b      	bne.n	80027fc <HAL_ADC_Start+0x148>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d114      	bne.n	80027fc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027e0:	609a      	str	r2, [r3, #8]
 80027e2:	e00b      	b.n	80027fc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	f043 0210 	orr.w	r2, r3, #16
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f4:	f043 0201 	orr.w	r2, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	20000018 	.word	0x20000018
 8002810:	431bde83 	.word	0x431bde83
 8002814:	40012300 	.word	0x40012300
 8002818:	40012000 	.word	0x40012000

0800281c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800282a:	2b01      	cmp	r3, #1
 800282c:	d101      	bne.n	8002832 <HAL_ADC_Stop+0x16>
 800282e:	2302      	movs	r3, #2
 8002830:	e021      	b.n	8002876 <HAL_ADC_Stop+0x5a>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0201 	bic.w	r2, r2, #1
 8002848:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b00      	cmp	r3, #0
 8002856:	d109      	bne.n	800286c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002860:	f023 0301 	bic.w	r3, r3, #1
 8002864:	f043 0201 	orr.w	r2, r3, #1
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b084      	sub	sp, #16
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
 800288a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800288c:	2300      	movs	r3, #0
 800288e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800289a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800289e:	d113      	bne.n	80028c8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80028aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028ae:	d10b      	bne.n	80028c8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b4:	f043 0220 	orr.w	r2, r3, #32
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e063      	b.n	8002990 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80028c8:	f7ff fe80 	bl	80025cc <HAL_GetTick>
 80028cc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028ce:	e021      	b.n	8002914 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d6:	d01d      	beq.n	8002914 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d007      	beq.n	80028ee <HAL_ADC_PollForConversion+0x6c>
 80028de:	f7ff fe75 	bl	80025cc <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d212      	bcs.n	8002914 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d00b      	beq.n	8002914 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	f043 0204 	orr.w	r2, r3, #4
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e03d      	b.n	8002990 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b02      	cmp	r3, #2
 8002920:	d1d6      	bne.n	80028d0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f06f 0212 	mvn.w	r2, #18
 800292a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d123      	bne.n	800298e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800294a:	2b00      	cmp	r3, #0
 800294c:	d11f      	bne.n	800298e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002958:	2b00      	cmp	r3, #0
 800295a:	d006      	beq.n	800296a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002966:	2b00      	cmp	r3, #0
 8002968:	d111      	bne.n	800298e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d105      	bne.n	800298e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	f043 0201 	orr.w	r2, r3, #1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3710      	adds	r7, #16
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
	...

080029b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80029be:	2300      	movs	r3, #0
 80029c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x1c>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e105      	b.n	8002bdc <HAL_ADC_ConfigChannel+0x228>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2b09      	cmp	r3, #9
 80029de:	d925      	bls.n	8002a2c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68d9      	ldr	r1, [r3, #12]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	461a      	mov	r2, r3
 80029ee:	4613      	mov	r3, r2
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	4413      	add	r3, r2
 80029f4:	3b1e      	subs	r3, #30
 80029f6:	2207      	movs	r2, #7
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	43da      	mvns	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	400a      	ands	r2, r1
 8002a04:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68d9      	ldr	r1, [r3, #12]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	4618      	mov	r0, r3
 8002a18:	4603      	mov	r3, r0
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	4403      	add	r3, r0
 8002a1e:	3b1e      	subs	r3, #30
 8002a20:	409a      	lsls	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	60da      	str	r2, [r3, #12]
 8002a2a:	e022      	b.n	8002a72 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6919      	ldr	r1, [r3, #16]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	461a      	mov	r2, r3
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	4413      	add	r3, r2
 8002a40:	2207      	movs	r2, #7
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	43da      	mvns	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	400a      	ands	r2, r1
 8002a4e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6919      	ldr	r1, [r3, #16]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	4618      	mov	r0, r3
 8002a62:	4603      	mov	r3, r0
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	4403      	add	r3, r0
 8002a68:	409a      	lsls	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b06      	cmp	r3, #6
 8002a78:	d824      	bhi.n	8002ac4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	3b05      	subs	r3, #5
 8002a8c:	221f      	movs	r2, #31
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	43da      	mvns	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	400a      	ands	r2, r1
 8002a9a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3b05      	subs	r3, #5
 8002ab6:	fa00 f203 	lsl.w	r2, r0, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	635a      	str	r2, [r3, #52]	; 0x34
 8002ac2:	e04c      	b.n	8002b5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b0c      	cmp	r3, #12
 8002aca:	d824      	bhi.n	8002b16 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	3b23      	subs	r3, #35	; 0x23
 8002ade:	221f      	movs	r2, #31
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	43da      	mvns	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	400a      	ands	r2, r1
 8002aec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	4618      	mov	r0, r3
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	3b23      	subs	r3, #35	; 0x23
 8002b08:	fa00 f203 	lsl.w	r2, r0, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	631a      	str	r2, [r3, #48]	; 0x30
 8002b14:	e023      	b.n	8002b5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	4613      	mov	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	3b41      	subs	r3, #65	; 0x41
 8002b28:	221f      	movs	r2, #31
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	43da      	mvns	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	400a      	ands	r2, r1
 8002b36:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	4618      	mov	r0, r3
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	3b41      	subs	r3, #65	; 0x41
 8002b52:	fa00 f203 	lsl.w	r2, r0, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b5e:	4b22      	ldr	r3, [pc, #136]	; (8002be8 <HAL_ADC_ConfigChannel+0x234>)
 8002b60:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a21      	ldr	r2, [pc, #132]	; (8002bec <HAL_ADC_ConfigChannel+0x238>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d109      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x1cc>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b12      	cmp	r3, #18
 8002b72:	d105      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a19      	ldr	r2, [pc, #100]	; (8002bec <HAL_ADC_ConfigChannel+0x238>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d123      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x21e>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2b10      	cmp	r3, #16
 8002b90:	d003      	beq.n	8002b9a <HAL_ADC_ConfigChannel+0x1e6>
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2b11      	cmp	r3, #17
 8002b98:	d11b      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2b10      	cmp	r3, #16
 8002bac:	d111      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bae:	4b10      	ldr	r3, [pc, #64]	; (8002bf0 <HAL_ADC_ConfigChannel+0x23c>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a10      	ldr	r2, [pc, #64]	; (8002bf4 <HAL_ADC_ConfigChannel+0x240>)
 8002bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb8:	0c9a      	lsrs	r2, r3, #18
 8002bba:	4613      	mov	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002bc4:	e002      	b.n	8002bcc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f9      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3714      	adds	r7, #20
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	40012300 	.word	0x40012300
 8002bec:	40012000 	.word	0x40012000
 8002bf0:	20000018 	.word	0x20000018
 8002bf4:	431bde83 	.word	0x431bde83

08002bf8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c00:	4b79      	ldr	r3, [pc, #484]	; (8002de8 <ADC_Init+0x1f0>)
 8002c02:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6859      	ldr	r1, [r3, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	021a      	lsls	r2, r3, #8
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6859      	ldr	r1, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6899      	ldr	r1, [r3, #8]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8a:	4a58      	ldr	r2, [pc, #352]	; (8002dec <ADC_Init+0x1f4>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d022      	beq.n	8002cd6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c9e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6899      	ldr	r1, [r3, #8]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6899      	ldr	r1, [r3, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	609a      	str	r2, [r3, #8]
 8002cd4:	e00f      	b.n	8002cf6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ce4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cf4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0202 	bic.w	r2, r2, #2
 8002d04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6899      	ldr	r1, [r3, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	7e1b      	ldrb	r3, [r3, #24]
 8002d10:	005a      	lsls	r2, r3, #1
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d01b      	beq.n	8002d5c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d32:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d42:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6859      	ldr	r1, [r3, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	035a      	lsls	r2, r3, #13
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	605a      	str	r2, [r3, #4]
 8002d5a:	e007      	b.n	8002d6c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d6a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	051a      	lsls	r2, r3, #20
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002da0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6899      	ldr	r1, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dae:	025a      	lsls	r2, r3, #9
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6899      	ldr	r1, [r3, #8]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	029a      	lsls	r2, r3, #10
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	609a      	str	r2, [r3, #8]
}
 8002ddc:	bf00      	nop
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	40012300 	.word	0x40012300
 8002dec:	0f000001 	.word	0x0f000001

08002df0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e00:	4b0c      	ldr	r3, [pc, #48]	; (8002e34 <__NVIC_SetPriorityGrouping+0x44>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e22:	4a04      	ldr	r2, [pc, #16]	; (8002e34 <__NVIC_SetPriorityGrouping+0x44>)
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	60d3      	str	r3, [r2, #12]
}
 8002e28:	bf00      	nop
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr
 8002e34:	e000ed00 	.word	0xe000ed00

08002e38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e3c:	4b04      	ldr	r3, [pc, #16]	; (8002e50 <__NVIC_GetPriorityGrouping+0x18>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	0a1b      	lsrs	r3, r3, #8
 8002e42:	f003 0307 	and.w	r3, r3, #7
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	e000ed00 	.word	0xe000ed00

08002e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	db0b      	blt.n	8002e7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	f003 021f 	and.w	r2, r3, #31
 8002e6c:	4907      	ldr	r1, [pc, #28]	; (8002e8c <__NVIC_EnableIRQ+0x38>)
 8002e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e72:	095b      	lsrs	r3, r3, #5
 8002e74:	2001      	movs	r0, #1
 8002e76:	fa00 f202 	lsl.w	r2, r0, r2
 8002e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	e000e100 	.word	0xe000e100

08002e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	6039      	str	r1, [r7, #0]
 8002e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	db0a      	blt.n	8002eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	490c      	ldr	r1, [pc, #48]	; (8002edc <__NVIC_SetPriority+0x4c>)
 8002eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eae:	0112      	lsls	r2, r2, #4
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002eb8:	e00a      	b.n	8002ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	b2da      	uxtb	r2, r3
 8002ebe:	4908      	ldr	r1, [pc, #32]	; (8002ee0 <__NVIC_SetPriority+0x50>)
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	3b04      	subs	r3, #4
 8002ec8:	0112      	lsls	r2, r2, #4
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	440b      	add	r3, r1
 8002ece:	761a      	strb	r2, [r3, #24]
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	e000e100 	.word	0xe000e100
 8002ee0:	e000ed00 	.word	0xe000ed00

08002ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b089      	sub	sp, #36	; 0x24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f1c3 0307 	rsb	r3, r3, #7
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	bf28      	it	cs
 8002f02:	2304      	movcs	r3, #4
 8002f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	3304      	adds	r3, #4
 8002f0a:	2b06      	cmp	r3, #6
 8002f0c:	d902      	bls.n	8002f14 <NVIC_EncodePriority+0x30>
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	3b03      	subs	r3, #3
 8002f12:	e000      	b.n	8002f16 <NVIC_EncodePriority+0x32>
 8002f14:	2300      	movs	r3, #0
 8002f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f18:	f04f 32ff 	mov.w	r2, #4294967295
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43da      	mvns	r2, r3
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	401a      	ands	r2, r3
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	fa01 f303 	lsl.w	r3, r1, r3
 8002f36:	43d9      	mvns	r1, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f3c:	4313      	orrs	r3, r2
         );
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3724      	adds	r7, #36	; 0x24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
	...

08002f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3b01      	subs	r3, #1
 8002f58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f5c:	d301      	bcc.n	8002f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e00f      	b.n	8002f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f62:	4a0a      	ldr	r2, [pc, #40]	; (8002f8c <SysTick_Config+0x40>)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3b01      	subs	r3, #1
 8002f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f6a:	210f      	movs	r1, #15
 8002f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f70:	f7ff ff8e 	bl	8002e90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f74:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <SysTick_Config+0x40>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f7a:	4b04      	ldr	r3, [pc, #16]	; (8002f8c <SysTick_Config+0x40>)
 8002f7c:	2207      	movs	r2, #7
 8002f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	e000e010 	.word	0xe000e010

08002f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7ff ff29 	bl	8002df0 <__NVIC_SetPriorityGrouping>
}
 8002f9e:	bf00      	nop
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b086      	sub	sp, #24
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	4603      	mov	r3, r0
 8002fae:	60b9      	str	r1, [r7, #8]
 8002fb0:	607a      	str	r2, [r7, #4]
 8002fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fb8:	f7ff ff3e 	bl	8002e38 <__NVIC_GetPriorityGrouping>
 8002fbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	68b9      	ldr	r1, [r7, #8]
 8002fc2:	6978      	ldr	r0, [r7, #20]
 8002fc4:	f7ff ff8e 	bl	8002ee4 <NVIC_EncodePriority>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fce:	4611      	mov	r1, r2
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff ff5d 	bl	8002e90 <__NVIC_SetPriority>
}
 8002fd6:	bf00      	nop
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b082      	sub	sp, #8
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff ff31 	bl	8002e54 <__NVIC_EnableIRQ>
}
 8002ff2:	bf00      	nop
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b082      	sub	sp, #8
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7ff ffa2 	bl	8002f4c <SysTick_Config>
 8003008:	4603      	mov	r3, r0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b084      	sub	sp, #16
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003020:	f7ff fad4 	bl	80025cc <HAL_GetTick>
 8003024:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d008      	beq.n	8003044 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2280      	movs	r2, #128	; 0x80
 8003036:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e052      	b.n	80030ea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0216 	bic.w	r2, r2, #22
 8003052:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	695a      	ldr	r2, [r3, #20]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003062:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	2b00      	cmp	r3, #0
 800306a:	d103      	bne.n	8003074 <HAL_DMA_Abort+0x62>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003070:	2b00      	cmp	r3, #0
 8003072:	d007      	beq.n	8003084 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0208 	bic.w	r2, r2, #8
 8003082:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0201 	bic.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003094:	e013      	b.n	80030be <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003096:	f7ff fa99 	bl	80025cc <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b05      	cmp	r3, #5
 80030a2:	d90c      	bls.n	80030be <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2220      	movs	r2, #32
 80030a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2203      	movs	r2, #3
 80030ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e015      	b.n	80030ea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1e4      	bne.n	8003096 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d0:	223f      	movs	r2, #63	; 0x3f
 80030d2:	409a      	lsls	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d004      	beq.n	8003110 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2280      	movs	r2, #128	; 0x80
 800310a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e00c      	b.n	800312a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2205      	movs	r2, #5
 8003114:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 0201 	bic.w	r2, r2, #1
 8003126:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
	...

08003138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003138:	b480      	push	{r7}
 800313a:	b089      	sub	sp, #36	; 0x24
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003142:	2300      	movs	r3, #0
 8003144:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003146:	2300      	movs	r3, #0
 8003148:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800314a:	2300      	movs	r3, #0
 800314c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800314e:	2300      	movs	r3, #0
 8003150:	61fb      	str	r3, [r7, #28]
 8003152:	e159      	b.n	8003408 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003154:	2201      	movs	r2, #1
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	4013      	ands	r3, r2
 8003166:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	429a      	cmp	r2, r3
 800316e:	f040 8148 	bne.w	8003402 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	2b01      	cmp	r3, #1
 800317c:	d005      	beq.n	800318a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003186:	2b02      	cmp	r3, #2
 8003188:	d130      	bne.n	80031ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	2203      	movs	r2, #3
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	43db      	mvns	r3, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4013      	ands	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031c0:	2201      	movs	r2, #1
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	43db      	mvns	r3, r3
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4013      	ands	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	091b      	lsrs	r3, r3, #4
 80031d6:	f003 0201 	and.w	r2, r3, #1
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f003 0303 	and.w	r3, r3, #3
 80031f4:	2b03      	cmp	r3, #3
 80031f6:	d017      	beq.n	8003228 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	2203      	movs	r2, #3
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	43db      	mvns	r3, r3
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	4013      	ands	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	4313      	orrs	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f003 0303 	and.w	r3, r3, #3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d123      	bne.n	800327c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	08da      	lsrs	r2, r3, #3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3208      	adds	r2, #8
 800323c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003240:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	220f      	movs	r2, #15
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	43db      	mvns	r3, r3
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4013      	ands	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	691a      	ldr	r2, [r3, #16]
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f003 0307 	and.w	r3, r3, #7
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	4313      	orrs	r3, r2
 800326c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	08da      	lsrs	r2, r3, #3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	3208      	adds	r2, #8
 8003276:	69b9      	ldr	r1, [r7, #24]
 8003278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	2203      	movs	r2, #3
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	43db      	mvns	r3, r3
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4013      	ands	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f003 0203 	and.w	r2, r3, #3
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 80a2 	beq.w	8003402 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032be:	2300      	movs	r3, #0
 80032c0:	60fb      	str	r3, [r7, #12]
 80032c2:	4b57      	ldr	r3, [pc, #348]	; (8003420 <HAL_GPIO_Init+0x2e8>)
 80032c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c6:	4a56      	ldr	r2, [pc, #344]	; (8003420 <HAL_GPIO_Init+0x2e8>)
 80032c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032cc:	6453      	str	r3, [r2, #68]	; 0x44
 80032ce:	4b54      	ldr	r3, [pc, #336]	; (8003420 <HAL_GPIO_Init+0x2e8>)
 80032d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032da:	4a52      	ldr	r2, [pc, #328]	; (8003424 <HAL_GPIO_Init+0x2ec>)
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	089b      	lsrs	r3, r3, #2
 80032e0:	3302      	adds	r3, #2
 80032e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	f003 0303 	and.w	r3, r3, #3
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	220f      	movs	r2, #15
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	43db      	mvns	r3, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4013      	ands	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a49      	ldr	r2, [pc, #292]	; (8003428 <HAL_GPIO_Init+0x2f0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d019      	beq.n	800333a <HAL_GPIO_Init+0x202>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a48      	ldr	r2, [pc, #288]	; (800342c <HAL_GPIO_Init+0x2f4>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d013      	beq.n	8003336 <HAL_GPIO_Init+0x1fe>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a47      	ldr	r2, [pc, #284]	; (8003430 <HAL_GPIO_Init+0x2f8>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d00d      	beq.n	8003332 <HAL_GPIO_Init+0x1fa>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a46      	ldr	r2, [pc, #280]	; (8003434 <HAL_GPIO_Init+0x2fc>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d007      	beq.n	800332e <HAL_GPIO_Init+0x1f6>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a45      	ldr	r2, [pc, #276]	; (8003438 <HAL_GPIO_Init+0x300>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d101      	bne.n	800332a <HAL_GPIO_Init+0x1f2>
 8003326:	2304      	movs	r3, #4
 8003328:	e008      	b.n	800333c <HAL_GPIO_Init+0x204>
 800332a:	2307      	movs	r3, #7
 800332c:	e006      	b.n	800333c <HAL_GPIO_Init+0x204>
 800332e:	2303      	movs	r3, #3
 8003330:	e004      	b.n	800333c <HAL_GPIO_Init+0x204>
 8003332:	2302      	movs	r3, #2
 8003334:	e002      	b.n	800333c <HAL_GPIO_Init+0x204>
 8003336:	2301      	movs	r3, #1
 8003338:	e000      	b.n	800333c <HAL_GPIO_Init+0x204>
 800333a:	2300      	movs	r3, #0
 800333c:	69fa      	ldr	r2, [r7, #28]
 800333e:	f002 0203 	and.w	r2, r2, #3
 8003342:	0092      	lsls	r2, r2, #2
 8003344:	4093      	lsls	r3, r2
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	4313      	orrs	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800334c:	4935      	ldr	r1, [pc, #212]	; (8003424 <HAL_GPIO_Init+0x2ec>)
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	089b      	lsrs	r3, r3, #2
 8003352:	3302      	adds	r3, #2
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800335a:	4b38      	ldr	r3, [pc, #224]	; (800343c <HAL_GPIO_Init+0x304>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	43db      	mvns	r3, r3
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	4013      	ands	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	4313      	orrs	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800337e:	4a2f      	ldr	r2, [pc, #188]	; (800343c <HAL_GPIO_Init+0x304>)
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003384:	4b2d      	ldr	r3, [pc, #180]	; (800343c <HAL_GPIO_Init+0x304>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	43db      	mvns	r3, r3
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	4013      	ands	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033a8:	4a24      	ldr	r2, [pc, #144]	; (800343c <HAL_GPIO_Init+0x304>)
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033ae:	4b23      	ldr	r3, [pc, #140]	; (800343c <HAL_GPIO_Init+0x304>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	43db      	mvns	r3, r3
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	4013      	ands	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033d2:	4a1a      	ldr	r2, [pc, #104]	; (800343c <HAL_GPIO_Init+0x304>)
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033d8:	4b18      	ldr	r3, [pc, #96]	; (800343c <HAL_GPIO_Init+0x304>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	43db      	mvns	r3, r3
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4013      	ands	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033fc:	4a0f      	ldr	r2, [pc, #60]	; (800343c <HAL_GPIO_Init+0x304>)
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	3301      	adds	r3, #1
 8003406:	61fb      	str	r3, [r7, #28]
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	2b0f      	cmp	r3, #15
 800340c:	f67f aea2 	bls.w	8003154 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003410:	bf00      	nop
 8003412:	bf00      	nop
 8003414:	3724      	adds	r7, #36	; 0x24
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	40023800 	.word	0x40023800
 8003424:	40013800 	.word	0x40013800
 8003428:	40020000 	.word	0x40020000
 800342c:	40020400 	.word	0x40020400
 8003430:	40020800 	.word	0x40020800
 8003434:	40020c00 	.word	0x40020c00
 8003438:	40021000 	.word	0x40021000
 800343c:	40013c00 	.word	0x40013c00

08003440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	460b      	mov	r3, r1
 800344a:	807b      	strh	r3, [r7, #2]
 800344c:	4613      	mov	r3, r2
 800344e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003450:	787b      	ldrb	r3, [r7, #1]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003456:	887a      	ldrh	r2, [r7, #2]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800345c:	e003      	b.n	8003466 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800345e:	887b      	ldrh	r3, [r7, #2]
 8003460:	041a      	lsls	r2, r3, #16
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	619a      	str	r2, [r3, #24]
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003472:	b480      	push	{r7}
 8003474:	b085      	sub	sp, #20
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	460b      	mov	r3, r1
 800347c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003484:	887a      	ldrh	r2, [r7, #2]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	4013      	ands	r3, r2
 800348a:	041a      	lsls	r2, r3, #16
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	43d9      	mvns	r1, r3
 8003490:	887b      	ldrh	r3, [r7, #2]
 8003492:	400b      	ands	r3, r1
 8003494:	431a      	orrs	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	619a      	str	r2, [r3, #24]
}
 800349a:	bf00      	nop
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
	...

080034a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80034b2:	4b08      	ldr	r3, [pc, #32]	; (80034d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034b4:	695a      	ldr	r2, [r3, #20]
 80034b6:	88fb      	ldrh	r3, [r7, #6]
 80034b8:	4013      	ands	r3, r2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d006      	beq.n	80034cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034be:	4a05      	ldr	r2, [pc, #20]	; (80034d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034c0:	88fb      	ldrh	r3, [r7, #6]
 80034c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034c4:	88fb      	ldrh	r3, [r7, #6]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7fe fa3c 	bl	8001944 <HAL_GPIO_EXTI_Callback>
  }
}
 80034cc:	bf00      	nop
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40013c00 	.word	0x40013c00

080034d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e267      	b.n	80039ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d075      	beq.n	80035e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034f6:	4b88      	ldr	r3, [pc, #544]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 030c 	and.w	r3, r3, #12
 80034fe:	2b04      	cmp	r3, #4
 8003500:	d00c      	beq.n	800351c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003502:	4b85      	ldr	r3, [pc, #532]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800350a:	2b08      	cmp	r3, #8
 800350c:	d112      	bne.n	8003534 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800350e:	4b82      	ldr	r3, [pc, #520]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003516:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800351a:	d10b      	bne.n	8003534 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800351c:	4b7e      	ldr	r3, [pc, #504]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d05b      	beq.n	80035e0 <HAL_RCC_OscConfig+0x108>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d157      	bne.n	80035e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e242      	b.n	80039ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800353c:	d106      	bne.n	800354c <HAL_RCC_OscConfig+0x74>
 800353e:	4b76      	ldr	r3, [pc, #472]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a75      	ldr	r2, [pc, #468]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 8003544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	e01d      	b.n	8003588 <HAL_RCC_OscConfig+0xb0>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003554:	d10c      	bne.n	8003570 <HAL_RCC_OscConfig+0x98>
 8003556:	4b70      	ldr	r3, [pc, #448]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a6f      	ldr	r2, [pc, #444]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 800355c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	4b6d      	ldr	r3, [pc, #436]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a6c      	ldr	r2, [pc, #432]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 8003568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	e00b      	b.n	8003588 <HAL_RCC_OscConfig+0xb0>
 8003570:	4b69      	ldr	r3, [pc, #420]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a68      	ldr	r2, [pc, #416]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 8003576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800357a:	6013      	str	r3, [r2, #0]
 800357c:	4b66      	ldr	r3, [pc, #408]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a65      	ldr	r2, [pc, #404]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 8003582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003586:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d013      	beq.n	80035b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003590:	f7ff f81c 	bl	80025cc <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003598:	f7ff f818 	bl	80025cc <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b64      	cmp	r3, #100	; 0x64
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e207      	b.n	80039ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035aa:	4b5b      	ldr	r3, [pc, #364]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0f0      	beq.n	8003598 <HAL_RCC_OscConfig+0xc0>
 80035b6:	e014      	b.n	80035e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b8:	f7ff f808 	bl	80025cc <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035c0:	f7ff f804 	bl	80025cc <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b64      	cmp	r3, #100	; 0x64
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e1f3      	b.n	80039ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035d2:	4b51      	ldr	r3, [pc, #324]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f0      	bne.n	80035c0 <HAL_RCC_OscConfig+0xe8>
 80035de:	e000      	b.n	80035e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d063      	beq.n	80036b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035ee:	4b4a      	ldr	r3, [pc, #296]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 030c 	and.w	r3, r3, #12
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00b      	beq.n	8003612 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035fa:	4b47      	ldr	r3, [pc, #284]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003602:	2b08      	cmp	r3, #8
 8003604:	d11c      	bne.n	8003640 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003606:	4b44      	ldr	r3, [pc, #272]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d116      	bne.n	8003640 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003612:	4b41      	ldr	r3, [pc, #260]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d005      	beq.n	800362a <HAL_RCC_OscConfig+0x152>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d001      	beq.n	800362a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e1c7      	b.n	80039ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800362a:	4b3b      	ldr	r3, [pc, #236]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	4937      	ldr	r1, [pc, #220]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 800363a:	4313      	orrs	r3, r2
 800363c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800363e:	e03a      	b.n	80036b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d020      	beq.n	800368a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003648:	4b34      	ldr	r3, [pc, #208]	; (800371c <HAL_RCC_OscConfig+0x244>)
 800364a:	2201      	movs	r2, #1
 800364c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364e:	f7fe ffbd 	bl	80025cc <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003656:	f7fe ffb9 	bl	80025cc <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e1a8      	b.n	80039ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003668:	4b2b      	ldr	r3, [pc, #172]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0f0      	beq.n	8003656 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003674:	4b28      	ldr	r3, [pc, #160]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	4925      	ldr	r1, [pc, #148]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 8003684:	4313      	orrs	r3, r2
 8003686:	600b      	str	r3, [r1, #0]
 8003688:	e015      	b.n	80036b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800368a:	4b24      	ldr	r3, [pc, #144]	; (800371c <HAL_RCC_OscConfig+0x244>)
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003690:	f7fe ff9c 	bl	80025cc <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003698:	f7fe ff98 	bl	80025cc <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e187      	b.n	80039ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036aa:	4b1b      	ldr	r3, [pc, #108]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1f0      	bne.n	8003698 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d036      	beq.n	8003730 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d016      	beq.n	80036f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ca:	4b15      	ldr	r3, [pc, #84]	; (8003720 <HAL_RCC_OscConfig+0x248>)
 80036cc:	2201      	movs	r2, #1
 80036ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d0:	f7fe ff7c 	bl	80025cc <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036d8:	f7fe ff78 	bl	80025cc <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e167      	b.n	80039ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ea:	4b0b      	ldr	r3, [pc, #44]	; (8003718 <HAL_RCC_OscConfig+0x240>)
 80036ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0f0      	beq.n	80036d8 <HAL_RCC_OscConfig+0x200>
 80036f6:	e01b      	b.n	8003730 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036f8:	4b09      	ldr	r3, [pc, #36]	; (8003720 <HAL_RCC_OscConfig+0x248>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036fe:	f7fe ff65 	bl	80025cc <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003704:	e00e      	b.n	8003724 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003706:	f7fe ff61 	bl	80025cc <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d907      	bls.n	8003724 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e150      	b.n	80039ba <HAL_RCC_OscConfig+0x4e2>
 8003718:	40023800 	.word	0x40023800
 800371c:	42470000 	.word	0x42470000
 8003720:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003724:	4b88      	ldr	r3, [pc, #544]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 8003726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1ea      	bne.n	8003706 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 8097 	beq.w	800386c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800373e:	2300      	movs	r3, #0
 8003740:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003742:	4b81      	ldr	r3, [pc, #516]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10f      	bne.n	800376e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800374e:	2300      	movs	r3, #0
 8003750:	60bb      	str	r3, [r7, #8]
 8003752:	4b7d      	ldr	r3, [pc, #500]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	4a7c      	ldr	r2, [pc, #496]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 8003758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800375c:	6413      	str	r3, [r2, #64]	; 0x40
 800375e:	4b7a      	ldr	r3, [pc, #488]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003766:	60bb      	str	r3, [r7, #8]
 8003768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800376a:	2301      	movs	r3, #1
 800376c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376e:	4b77      	ldr	r3, [pc, #476]	; (800394c <HAL_RCC_OscConfig+0x474>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003776:	2b00      	cmp	r3, #0
 8003778:	d118      	bne.n	80037ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800377a:	4b74      	ldr	r3, [pc, #464]	; (800394c <HAL_RCC_OscConfig+0x474>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a73      	ldr	r2, [pc, #460]	; (800394c <HAL_RCC_OscConfig+0x474>)
 8003780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003786:	f7fe ff21 	bl	80025cc <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800378e:	f7fe ff1d 	bl	80025cc <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e10c      	b.n	80039ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a0:	4b6a      	ldr	r3, [pc, #424]	; (800394c <HAL_RCC_OscConfig+0x474>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0f0      	beq.n	800378e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d106      	bne.n	80037c2 <HAL_RCC_OscConfig+0x2ea>
 80037b4:	4b64      	ldr	r3, [pc, #400]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 80037b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b8:	4a63      	ldr	r2, [pc, #396]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 80037ba:	f043 0301 	orr.w	r3, r3, #1
 80037be:	6713      	str	r3, [r2, #112]	; 0x70
 80037c0:	e01c      	b.n	80037fc <HAL_RCC_OscConfig+0x324>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	2b05      	cmp	r3, #5
 80037c8:	d10c      	bne.n	80037e4 <HAL_RCC_OscConfig+0x30c>
 80037ca:	4b5f      	ldr	r3, [pc, #380]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 80037cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ce:	4a5e      	ldr	r2, [pc, #376]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 80037d0:	f043 0304 	orr.w	r3, r3, #4
 80037d4:	6713      	str	r3, [r2, #112]	; 0x70
 80037d6:	4b5c      	ldr	r3, [pc, #368]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 80037d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037da:	4a5b      	ldr	r2, [pc, #364]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 80037dc:	f043 0301 	orr.w	r3, r3, #1
 80037e0:	6713      	str	r3, [r2, #112]	; 0x70
 80037e2:	e00b      	b.n	80037fc <HAL_RCC_OscConfig+0x324>
 80037e4:	4b58      	ldr	r3, [pc, #352]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 80037e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e8:	4a57      	ldr	r2, [pc, #348]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 80037ea:	f023 0301 	bic.w	r3, r3, #1
 80037ee:	6713      	str	r3, [r2, #112]	; 0x70
 80037f0:	4b55      	ldr	r3, [pc, #340]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 80037f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f4:	4a54      	ldr	r2, [pc, #336]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 80037f6:	f023 0304 	bic.w	r3, r3, #4
 80037fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d015      	beq.n	8003830 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003804:	f7fe fee2 	bl	80025cc <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800380a:	e00a      	b.n	8003822 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800380c:	f7fe fede 	bl	80025cc <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	f241 3288 	movw	r2, #5000	; 0x1388
 800381a:	4293      	cmp	r3, r2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e0cb      	b.n	80039ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003822:	4b49      	ldr	r3, [pc, #292]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 8003824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0ee      	beq.n	800380c <HAL_RCC_OscConfig+0x334>
 800382e:	e014      	b.n	800385a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003830:	f7fe fecc 	bl	80025cc <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003836:	e00a      	b.n	800384e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003838:	f7fe fec8 	bl	80025cc <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	f241 3288 	movw	r2, #5000	; 0x1388
 8003846:	4293      	cmp	r3, r2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e0b5      	b.n	80039ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800384e:	4b3e      	ldr	r3, [pc, #248]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 8003850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1ee      	bne.n	8003838 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800385a:	7dfb      	ldrb	r3, [r7, #23]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d105      	bne.n	800386c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003860:	4b39      	ldr	r3, [pc, #228]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 8003862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003864:	4a38      	ldr	r2, [pc, #224]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 8003866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800386a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	2b00      	cmp	r3, #0
 8003872:	f000 80a1 	beq.w	80039b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003876:	4b34      	ldr	r3, [pc, #208]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 030c 	and.w	r3, r3, #12
 800387e:	2b08      	cmp	r3, #8
 8003880:	d05c      	beq.n	800393c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	2b02      	cmp	r3, #2
 8003888:	d141      	bne.n	800390e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800388a:	4b31      	ldr	r3, [pc, #196]	; (8003950 <HAL_RCC_OscConfig+0x478>)
 800388c:	2200      	movs	r2, #0
 800388e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003890:	f7fe fe9c 	bl	80025cc <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003898:	f7fe fe98 	bl	80025cc <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e087      	b.n	80039ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038aa:	4b27      	ldr	r3, [pc, #156]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1f0      	bne.n	8003898 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69da      	ldr	r2, [r3, #28]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	019b      	lsls	r3, r3, #6
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038cc:	085b      	lsrs	r3, r3, #1
 80038ce:	3b01      	subs	r3, #1
 80038d0:	041b      	lsls	r3, r3, #16
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d8:	061b      	lsls	r3, r3, #24
 80038da:	491b      	ldr	r1, [pc, #108]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038e0:	4b1b      	ldr	r3, [pc, #108]	; (8003950 <HAL_RCC_OscConfig+0x478>)
 80038e2:	2201      	movs	r2, #1
 80038e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e6:	f7fe fe71 	bl	80025cc <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ec:	e008      	b.n	8003900 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ee:	f7fe fe6d 	bl	80025cc <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e05c      	b.n	80039ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003900:	4b11      	ldr	r3, [pc, #68]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0f0      	beq.n	80038ee <HAL_RCC_OscConfig+0x416>
 800390c:	e054      	b.n	80039b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800390e:	4b10      	ldr	r3, [pc, #64]	; (8003950 <HAL_RCC_OscConfig+0x478>)
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003914:	f7fe fe5a 	bl	80025cc <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800391c:	f7fe fe56 	bl	80025cc <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e045      	b.n	80039ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392e:	4b06      	ldr	r3, [pc, #24]	; (8003948 <HAL_RCC_OscConfig+0x470>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1f0      	bne.n	800391c <HAL_RCC_OscConfig+0x444>
 800393a:	e03d      	b.n	80039b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d107      	bne.n	8003954 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e038      	b.n	80039ba <HAL_RCC_OscConfig+0x4e2>
 8003948:	40023800 	.word	0x40023800
 800394c:	40007000 	.word	0x40007000
 8003950:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003954:	4b1b      	ldr	r3, [pc, #108]	; (80039c4 <HAL_RCC_OscConfig+0x4ec>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d028      	beq.n	80039b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800396c:	429a      	cmp	r2, r3
 800396e:	d121      	bne.n	80039b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800397a:	429a      	cmp	r2, r3
 800397c:	d11a      	bne.n	80039b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003984:	4013      	ands	r3, r2
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800398a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800398c:	4293      	cmp	r3, r2
 800398e:	d111      	bne.n	80039b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399a:	085b      	lsrs	r3, r3, #1
 800399c:	3b01      	subs	r3, #1
 800399e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d107      	bne.n	80039b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d001      	beq.n	80039b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e000      	b.n	80039ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40023800 	.word	0x40023800

080039c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e0cc      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039dc:	4b68      	ldr	r3, [pc, #416]	; (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0307 	and.w	r3, r3, #7
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d90c      	bls.n	8003a04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ea:	4b65      	ldr	r3, [pc, #404]	; (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	b2d2      	uxtb	r2, r2
 80039f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f2:	4b63      	ldr	r3, [pc, #396]	; (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0307 	and.w	r3, r3, #7
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d001      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e0b8      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d020      	beq.n	8003a52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0304 	and.w	r3, r3, #4
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d005      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a1c:	4b59      	ldr	r3, [pc, #356]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	4a58      	ldr	r2, [pc, #352]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0308 	and.w	r3, r3, #8
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d005      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a34:	4b53      	ldr	r3, [pc, #332]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	4a52      	ldr	r2, [pc, #328]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a40:	4b50      	ldr	r3, [pc, #320]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	494d      	ldr	r1, [pc, #308]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d044      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d107      	bne.n	8003a76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a66:	4b47      	ldr	r3, [pc, #284]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d119      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e07f      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d003      	beq.n	8003a86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a82:	2b03      	cmp	r3, #3
 8003a84:	d107      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a86:	4b3f      	ldr	r3, [pc, #252]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d109      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e06f      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a96:	4b3b      	ldr	r3, [pc, #236]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e067      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aa6:	4b37      	ldr	r3, [pc, #220]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f023 0203 	bic.w	r2, r3, #3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	4934      	ldr	r1, [pc, #208]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ab8:	f7fe fd88 	bl	80025cc <HAL_GetTick>
 8003abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003abe:	e00a      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ac0:	f7fe fd84 	bl	80025cc <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e04f      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad6:	4b2b      	ldr	r3, [pc, #172]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 020c 	and.w	r2, r3, #12
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d1eb      	bne.n	8003ac0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ae8:	4b25      	ldr	r3, [pc, #148]	; (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d20c      	bcs.n	8003b10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003af6:	4b22      	ldr	r3, [pc, #136]	; (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	b2d2      	uxtb	r2, r2
 8003afc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003afe:	4b20      	ldr	r3, [pc, #128]	; (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d001      	beq.n	8003b10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e032      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d008      	beq.n	8003b2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b1c:	4b19      	ldr	r3, [pc, #100]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	4916      	ldr	r1, [pc, #88]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d009      	beq.n	8003b4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b3a:	4b12      	ldr	r3, [pc, #72]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	490e      	ldr	r1, [pc, #56]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b4e:	f000 f821 	bl	8003b94 <HAL_RCC_GetSysClockFreq>
 8003b52:	4602      	mov	r2, r0
 8003b54:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	091b      	lsrs	r3, r3, #4
 8003b5a:	f003 030f 	and.w	r3, r3, #15
 8003b5e:	490a      	ldr	r1, [pc, #40]	; (8003b88 <HAL_RCC_ClockConfig+0x1c0>)
 8003b60:	5ccb      	ldrb	r3, [r1, r3]
 8003b62:	fa22 f303 	lsr.w	r3, r2, r3
 8003b66:	4a09      	ldr	r2, [pc, #36]	; (8003b8c <HAL_RCC_ClockConfig+0x1c4>)
 8003b68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b6a:	4b09      	ldr	r3, [pc, #36]	; (8003b90 <HAL_RCC_ClockConfig+0x1c8>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fe fce8 	bl	8002544 <HAL_InitTick>

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	40023c00 	.word	0x40023c00
 8003b84:	40023800 	.word	0x40023800
 8003b88:	08006d5c 	.word	0x08006d5c
 8003b8c:	20000018 	.word	0x20000018
 8003b90:	2000001c 	.word	0x2000001c

08003b94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b98:	b094      	sub	sp, #80	; 0x50
 8003b9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	647b      	str	r3, [r7, #68]	; 0x44
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bac:	4b79      	ldr	r3, [pc, #484]	; (8003d94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f003 030c 	and.w	r3, r3, #12
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d00d      	beq.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x40>
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	f200 80e1 	bhi.w	8003d80 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d002      	beq.n	8003bc8 <HAL_RCC_GetSysClockFreq+0x34>
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d003      	beq.n	8003bce <HAL_RCC_GetSysClockFreq+0x3a>
 8003bc6:	e0db      	b.n	8003d80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bc8:	4b73      	ldr	r3, [pc, #460]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003bcc:	e0db      	b.n	8003d86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bce:	4b73      	ldr	r3, [pc, #460]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x208>)
 8003bd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bd2:	e0d8      	b.n	8003d86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bd4:	4b6f      	ldr	r3, [pc, #444]	; (8003d94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bdc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bde:	4b6d      	ldr	r3, [pc, #436]	; (8003d94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d063      	beq.n	8003cb2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bea:	4b6a      	ldr	r3, [pc, #424]	; (8003d94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	099b      	lsrs	r3, r3, #6
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bf4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bfc:	633b      	str	r3, [r7, #48]	; 0x30
 8003bfe:	2300      	movs	r3, #0
 8003c00:	637b      	str	r3, [r7, #52]	; 0x34
 8003c02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c06:	4622      	mov	r2, r4
 8003c08:	462b      	mov	r3, r5
 8003c0a:	f04f 0000 	mov.w	r0, #0
 8003c0e:	f04f 0100 	mov.w	r1, #0
 8003c12:	0159      	lsls	r1, r3, #5
 8003c14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c18:	0150      	lsls	r0, r2, #5
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	4621      	mov	r1, r4
 8003c20:	1a51      	subs	r1, r2, r1
 8003c22:	6139      	str	r1, [r7, #16]
 8003c24:	4629      	mov	r1, r5
 8003c26:	eb63 0301 	sbc.w	r3, r3, r1
 8003c2a:	617b      	str	r3, [r7, #20]
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	f04f 0300 	mov.w	r3, #0
 8003c34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c38:	4659      	mov	r1, fp
 8003c3a:	018b      	lsls	r3, r1, #6
 8003c3c:	4651      	mov	r1, sl
 8003c3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c42:	4651      	mov	r1, sl
 8003c44:	018a      	lsls	r2, r1, #6
 8003c46:	4651      	mov	r1, sl
 8003c48:	ebb2 0801 	subs.w	r8, r2, r1
 8003c4c:	4659      	mov	r1, fp
 8003c4e:	eb63 0901 	sbc.w	r9, r3, r1
 8003c52:	f04f 0200 	mov.w	r2, #0
 8003c56:	f04f 0300 	mov.w	r3, #0
 8003c5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c66:	4690      	mov	r8, r2
 8003c68:	4699      	mov	r9, r3
 8003c6a:	4623      	mov	r3, r4
 8003c6c:	eb18 0303 	adds.w	r3, r8, r3
 8003c70:	60bb      	str	r3, [r7, #8]
 8003c72:	462b      	mov	r3, r5
 8003c74:	eb49 0303 	adc.w	r3, r9, r3
 8003c78:	60fb      	str	r3, [r7, #12]
 8003c7a:	f04f 0200 	mov.w	r2, #0
 8003c7e:	f04f 0300 	mov.w	r3, #0
 8003c82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c86:	4629      	mov	r1, r5
 8003c88:	024b      	lsls	r3, r1, #9
 8003c8a:	4621      	mov	r1, r4
 8003c8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c90:	4621      	mov	r1, r4
 8003c92:	024a      	lsls	r2, r1, #9
 8003c94:	4610      	mov	r0, r2
 8003c96:	4619      	mov	r1, r3
 8003c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ca0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ca4:	f7fc faf4 	bl	8000290 <__aeabi_uldivmod>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	460b      	mov	r3, r1
 8003cac:	4613      	mov	r3, r2
 8003cae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cb0:	e058      	b.n	8003d64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cb2:	4b38      	ldr	r3, [pc, #224]	; (8003d94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	099b      	lsrs	r3, r3, #6
 8003cb8:	2200      	movs	r2, #0
 8003cba:	4618      	mov	r0, r3
 8003cbc:	4611      	mov	r1, r2
 8003cbe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cc2:	623b      	str	r3, [r7, #32]
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ccc:	4642      	mov	r2, r8
 8003cce:	464b      	mov	r3, r9
 8003cd0:	f04f 0000 	mov.w	r0, #0
 8003cd4:	f04f 0100 	mov.w	r1, #0
 8003cd8:	0159      	lsls	r1, r3, #5
 8003cda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cde:	0150      	lsls	r0, r2, #5
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	4641      	mov	r1, r8
 8003ce6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cea:	4649      	mov	r1, r9
 8003cec:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cf0:	f04f 0200 	mov.w	r2, #0
 8003cf4:	f04f 0300 	mov.w	r3, #0
 8003cf8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003cfc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d04:	ebb2 040a 	subs.w	r4, r2, sl
 8003d08:	eb63 050b 	sbc.w	r5, r3, fp
 8003d0c:	f04f 0200 	mov.w	r2, #0
 8003d10:	f04f 0300 	mov.w	r3, #0
 8003d14:	00eb      	lsls	r3, r5, #3
 8003d16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d1a:	00e2      	lsls	r2, r4, #3
 8003d1c:	4614      	mov	r4, r2
 8003d1e:	461d      	mov	r5, r3
 8003d20:	4643      	mov	r3, r8
 8003d22:	18e3      	adds	r3, r4, r3
 8003d24:	603b      	str	r3, [r7, #0]
 8003d26:	464b      	mov	r3, r9
 8003d28:	eb45 0303 	adc.w	r3, r5, r3
 8003d2c:	607b      	str	r3, [r7, #4]
 8003d2e:	f04f 0200 	mov.w	r2, #0
 8003d32:	f04f 0300 	mov.w	r3, #0
 8003d36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d3a:	4629      	mov	r1, r5
 8003d3c:	028b      	lsls	r3, r1, #10
 8003d3e:	4621      	mov	r1, r4
 8003d40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d44:	4621      	mov	r1, r4
 8003d46:	028a      	lsls	r2, r1, #10
 8003d48:	4610      	mov	r0, r2
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d4e:	2200      	movs	r2, #0
 8003d50:	61bb      	str	r3, [r7, #24]
 8003d52:	61fa      	str	r2, [r7, #28]
 8003d54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d58:	f7fc fa9a 	bl	8000290 <__aeabi_uldivmod>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	460b      	mov	r3, r1
 8003d60:	4613      	mov	r3, r2
 8003d62:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d64:	4b0b      	ldr	r3, [pc, #44]	; (8003d94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	0c1b      	lsrs	r3, r3, #16
 8003d6a:	f003 0303 	and.w	r3, r3, #3
 8003d6e:	3301      	adds	r3, #1
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003d74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d7e:	e002      	b.n	8003d86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d80:	4b05      	ldr	r3, [pc, #20]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d82:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3750      	adds	r7, #80	; 0x50
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d92:	bf00      	nop
 8003d94:	40023800 	.word	0x40023800
 8003d98:	00f42400 	.word	0x00f42400
 8003d9c:	007a1200 	.word	0x007a1200

08003da0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003da4:	4b03      	ldr	r3, [pc, #12]	; (8003db4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003da6:	681b      	ldr	r3, [r3, #0]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	20000018 	.word	0x20000018

08003db8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003dbc:	f7ff fff0 	bl	8003da0 <HAL_RCC_GetHCLKFreq>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	4b05      	ldr	r3, [pc, #20]	; (8003dd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	0a9b      	lsrs	r3, r3, #10
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	4903      	ldr	r1, [pc, #12]	; (8003ddc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dce:	5ccb      	ldrb	r3, [r1, r3]
 8003dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	08006d6c 	.word	0x08006d6c

08003de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003de4:	f7ff ffdc 	bl	8003da0 <HAL_RCC_GetHCLKFreq>
 8003de8:	4602      	mov	r2, r0
 8003dea:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	0b5b      	lsrs	r3, r3, #13
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	4903      	ldr	r1, [pc, #12]	; (8003e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003df6:	5ccb      	ldrb	r3, [r1, r3]
 8003df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40023800 	.word	0x40023800
 8003e04:	08006d6c 	.word	0x08006d6c

08003e08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e041      	b.n	8003e9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d106      	bne.n	8003e34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7fe f90a 	bl	8002048 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3304      	adds	r3, #4
 8003e44:	4619      	mov	r1, r3
 8003e46:	4610      	mov	r0, r2
 8003e48:	f000 fcae 	bl	80047a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
	...

08003ea8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d001      	beq.n	8003ec0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e03c      	b.n	8003f3a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a1e      	ldr	r2, [pc, #120]	; (8003f48 <HAL_TIM_Base_Start+0xa0>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d018      	beq.n	8003f04 <HAL_TIM_Base_Start+0x5c>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eda:	d013      	beq.n	8003f04 <HAL_TIM_Base_Start+0x5c>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a1a      	ldr	r2, [pc, #104]	; (8003f4c <HAL_TIM_Base_Start+0xa4>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d00e      	beq.n	8003f04 <HAL_TIM_Base_Start+0x5c>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a19      	ldr	r2, [pc, #100]	; (8003f50 <HAL_TIM_Base_Start+0xa8>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d009      	beq.n	8003f04 <HAL_TIM_Base_Start+0x5c>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a17      	ldr	r2, [pc, #92]	; (8003f54 <HAL_TIM_Base_Start+0xac>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d004      	beq.n	8003f04 <HAL_TIM_Base_Start+0x5c>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a16      	ldr	r2, [pc, #88]	; (8003f58 <HAL_TIM_Base_Start+0xb0>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d111      	bne.n	8003f28 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 0307 	and.w	r3, r3, #7
 8003f0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2b06      	cmp	r3, #6
 8003f14:	d010      	beq.n	8003f38 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f042 0201 	orr.w	r2, r2, #1
 8003f24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f26:	e007      	b.n	8003f38 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0201 	orr.w	r2, r2, #1
 8003f36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	40010000 	.word	0x40010000
 8003f4c:	40000400 	.word	0x40000400
 8003f50:	40000800 	.word	0x40000800
 8003f54:	40000c00 	.word	0x40000c00
 8003f58:	40014000 	.word	0x40014000

08003f5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d001      	beq.n	8003f74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e044      	b.n	8003ffe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2202      	movs	r2, #2
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 0201 	orr.w	r2, r2, #1
 8003f8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a1e      	ldr	r2, [pc, #120]	; (800400c <HAL_TIM_Base_Start_IT+0xb0>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d018      	beq.n	8003fc8 <HAL_TIM_Base_Start_IT+0x6c>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f9e:	d013      	beq.n	8003fc8 <HAL_TIM_Base_Start_IT+0x6c>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a1a      	ldr	r2, [pc, #104]	; (8004010 <HAL_TIM_Base_Start_IT+0xb4>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d00e      	beq.n	8003fc8 <HAL_TIM_Base_Start_IT+0x6c>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a19      	ldr	r2, [pc, #100]	; (8004014 <HAL_TIM_Base_Start_IT+0xb8>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d009      	beq.n	8003fc8 <HAL_TIM_Base_Start_IT+0x6c>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a17      	ldr	r2, [pc, #92]	; (8004018 <HAL_TIM_Base_Start_IT+0xbc>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d004      	beq.n	8003fc8 <HAL_TIM_Base_Start_IT+0x6c>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a16      	ldr	r2, [pc, #88]	; (800401c <HAL_TIM_Base_Start_IT+0xc0>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d111      	bne.n	8003fec <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 0307 	and.w	r3, r3, #7
 8003fd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2b06      	cmp	r3, #6
 8003fd8:	d010      	beq.n	8003ffc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f042 0201 	orr.w	r2, r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fea:	e007      	b.n	8003ffc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f042 0201 	orr.w	r2, r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	40010000 	.word	0x40010000
 8004010:	40000400 	.word	0x40000400
 8004014:	40000800 	.word	0x40000800
 8004018:	40000c00 	.word	0x40000c00
 800401c:	40014000 	.word	0x40014000

08004020 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e041      	b.n	80040b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d106      	bne.n	800404c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f839 	bl	80040be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3304      	adds	r3, #4
 800405c:	4619      	mov	r1, r3
 800405e:	4610      	mov	r0, r2
 8004060:	f000 fba2 	bl	80047a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040be:	b480      	push	{r7}
 80040c0:	b083      	sub	sp, #12
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040c6:	bf00      	nop
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
	...

080040d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d109      	bne.n	80040f8 <HAL_TIM_PWM_Start+0x24>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	bf14      	ite	ne
 80040f0:	2301      	movne	r3, #1
 80040f2:	2300      	moveq	r3, #0
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	e022      	b.n	800413e <HAL_TIM_PWM_Start+0x6a>
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	2b04      	cmp	r3, #4
 80040fc:	d109      	bne.n	8004112 <HAL_TIM_PWM_Start+0x3e>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b01      	cmp	r3, #1
 8004108:	bf14      	ite	ne
 800410a:	2301      	movne	r3, #1
 800410c:	2300      	moveq	r3, #0
 800410e:	b2db      	uxtb	r3, r3
 8004110:	e015      	b.n	800413e <HAL_TIM_PWM_Start+0x6a>
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	2b08      	cmp	r3, #8
 8004116:	d109      	bne.n	800412c <HAL_TIM_PWM_Start+0x58>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b01      	cmp	r3, #1
 8004122:	bf14      	ite	ne
 8004124:	2301      	movne	r3, #1
 8004126:	2300      	moveq	r3, #0
 8004128:	b2db      	uxtb	r3, r3
 800412a:	e008      	b.n	800413e <HAL_TIM_PWM_Start+0x6a>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b01      	cmp	r3, #1
 8004136:	bf14      	ite	ne
 8004138:	2301      	movne	r3, #1
 800413a:	2300      	moveq	r3, #0
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e068      	b.n	8004218 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d104      	bne.n	8004156 <HAL_TIM_PWM_Start+0x82>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004154:	e013      	b.n	800417e <HAL_TIM_PWM_Start+0xaa>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b04      	cmp	r3, #4
 800415a:	d104      	bne.n	8004166 <HAL_TIM_PWM_Start+0x92>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2202      	movs	r2, #2
 8004160:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004164:	e00b      	b.n	800417e <HAL_TIM_PWM_Start+0xaa>
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b08      	cmp	r3, #8
 800416a:	d104      	bne.n	8004176 <HAL_TIM_PWM_Start+0xa2>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2202      	movs	r2, #2
 8004170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004174:	e003      	b.n	800417e <HAL_TIM_PWM_Start+0xaa>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2202      	movs	r2, #2
 800417a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2201      	movs	r2, #1
 8004184:	6839      	ldr	r1, [r7, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f000 fdb4 	bl	8004cf4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a23      	ldr	r2, [pc, #140]	; (8004220 <HAL_TIM_PWM_Start+0x14c>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d107      	bne.n	80041a6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a1d      	ldr	r2, [pc, #116]	; (8004220 <HAL_TIM_PWM_Start+0x14c>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d018      	beq.n	80041e2 <HAL_TIM_PWM_Start+0x10e>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b8:	d013      	beq.n	80041e2 <HAL_TIM_PWM_Start+0x10e>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a19      	ldr	r2, [pc, #100]	; (8004224 <HAL_TIM_PWM_Start+0x150>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d00e      	beq.n	80041e2 <HAL_TIM_PWM_Start+0x10e>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a17      	ldr	r2, [pc, #92]	; (8004228 <HAL_TIM_PWM_Start+0x154>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d009      	beq.n	80041e2 <HAL_TIM_PWM_Start+0x10e>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a16      	ldr	r2, [pc, #88]	; (800422c <HAL_TIM_PWM_Start+0x158>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d004      	beq.n	80041e2 <HAL_TIM_PWM_Start+0x10e>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a14      	ldr	r2, [pc, #80]	; (8004230 <HAL_TIM_PWM_Start+0x15c>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d111      	bne.n	8004206 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f003 0307 	and.w	r3, r3, #7
 80041ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2b06      	cmp	r3, #6
 80041f2:	d010      	beq.n	8004216 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f042 0201 	orr.w	r2, r2, #1
 8004202:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004204:	e007      	b.n	8004216 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f042 0201 	orr.w	r2, r2, #1
 8004214:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	40010000 	.word	0x40010000
 8004224:	40000400 	.word	0x40000400
 8004228:	40000800 	.word	0x40000800
 800422c:	40000c00 	.word	0x40000c00
 8004230:	40014000 	.word	0x40014000

08004234 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b02      	cmp	r3, #2
 8004248:	d122      	bne.n	8004290 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b02      	cmp	r3, #2
 8004256:	d11b      	bne.n	8004290 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f06f 0202 	mvn.w	r2, #2
 8004260:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	f003 0303 	and.w	r3, r3, #3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 fa77 	bl	800476a <HAL_TIM_IC_CaptureCallback>
 800427c:	e005      	b.n	800428a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 fa69 	bl	8004756 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 fa7a 	bl	800477e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	f003 0304 	and.w	r3, r3, #4
 800429a:	2b04      	cmp	r3, #4
 800429c:	d122      	bne.n	80042e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f003 0304 	and.w	r3, r3, #4
 80042a8:	2b04      	cmp	r3, #4
 80042aa:	d11b      	bne.n	80042e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f06f 0204 	mvn.w	r2, #4
 80042b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2202      	movs	r2, #2
 80042ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d003      	beq.n	80042d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 fa4d 	bl	800476a <HAL_TIM_IC_CaptureCallback>
 80042d0:	e005      	b.n	80042de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 fa3f 	bl	8004756 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 fa50 	bl	800477e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	f003 0308 	and.w	r3, r3, #8
 80042ee:	2b08      	cmp	r3, #8
 80042f0:	d122      	bne.n	8004338 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f003 0308 	and.w	r3, r3, #8
 80042fc:	2b08      	cmp	r3, #8
 80042fe:	d11b      	bne.n	8004338 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f06f 0208 	mvn.w	r2, #8
 8004308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2204      	movs	r2, #4
 800430e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	f003 0303 	and.w	r3, r3, #3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 fa23 	bl	800476a <HAL_TIM_IC_CaptureCallback>
 8004324:	e005      	b.n	8004332 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 fa15 	bl	8004756 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 fa26 	bl	800477e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	f003 0310 	and.w	r3, r3, #16
 8004342:	2b10      	cmp	r3, #16
 8004344:	d122      	bne.n	800438c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f003 0310 	and.w	r3, r3, #16
 8004350:	2b10      	cmp	r3, #16
 8004352:	d11b      	bne.n	800438c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f06f 0210 	mvn.w	r2, #16
 800435c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2208      	movs	r2, #8
 8004362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f9f9 	bl	800476a <HAL_TIM_IC_CaptureCallback>
 8004378:	e005      	b.n	8004386 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f9eb 	bl	8004756 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 f9fc 	bl	800477e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b01      	cmp	r3, #1
 8004398:	d10e      	bne.n	80043b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d107      	bne.n	80043b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f06f 0201 	mvn.w	r2, #1
 80043b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7fd fae8 	bl	8001988 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c2:	2b80      	cmp	r3, #128	; 0x80
 80043c4:	d10e      	bne.n	80043e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d0:	2b80      	cmp	r3, #128	; 0x80
 80043d2:	d107      	bne.n	80043e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 fd26 	bl	8004e30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ee:	2b40      	cmp	r3, #64	; 0x40
 80043f0:	d10e      	bne.n	8004410 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fc:	2b40      	cmp	r3, #64	; 0x40
 80043fe:	d107      	bne.n	8004410 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f9c1 	bl	8004792 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	f003 0320 	and.w	r3, r3, #32
 800441a:	2b20      	cmp	r3, #32
 800441c:	d10e      	bne.n	800443c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f003 0320 	and.w	r3, r3, #32
 8004428:	2b20      	cmp	r3, #32
 800442a:	d107      	bne.n	800443c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f06f 0220 	mvn.w	r2, #32
 8004434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 fcf0 	bl	8004e1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800443c:	bf00      	nop
 800443e:	3708      	adds	r7, #8
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800445a:	2b01      	cmp	r3, #1
 800445c:	d101      	bne.n	8004462 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800445e:	2302      	movs	r3, #2
 8004460:	e0ae      	b.n	80045c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b0c      	cmp	r3, #12
 800446e:	f200 809f 	bhi.w	80045b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004472:	a201      	add	r2, pc, #4	; (adr r2, 8004478 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004478:	080044ad 	.word	0x080044ad
 800447c:	080045b1 	.word	0x080045b1
 8004480:	080045b1 	.word	0x080045b1
 8004484:	080045b1 	.word	0x080045b1
 8004488:	080044ed 	.word	0x080044ed
 800448c:	080045b1 	.word	0x080045b1
 8004490:	080045b1 	.word	0x080045b1
 8004494:	080045b1 	.word	0x080045b1
 8004498:	0800452f 	.word	0x0800452f
 800449c:	080045b1 	.word	0x080045b1
 80044a0:	080045b1 	.word	0x080045b1
 80044a4:	080045b1 	.word	0x080045b1
 80044a8:	0800456f 	.word	0x0800456f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68b9      	ldr	r1, [r7, #8]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 f9f8 	bl	80048a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	699a      	ldr	r2, [r3, #24]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f042 0208 	orr.w	r2, r2, #8
 80044c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	699a      	ldr	r2, [r3, #24]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 0204 	bic.w	r2, r2, #4
 80044d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6999      	ldr	r1, [r3, #24]
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	691a      	ldr	r2, [r3, #16]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	619a      	str	r2, [r3, #24]
      break;
 80044ea:	e064      	b.n	80045b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68b9      	ldr	r1, [r7, #8]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 fa3e 	bl	8004974 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	699a      	ldr	r2, [r3, #24]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004506:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	699a      	ldr	r2, [r3, #24]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004516:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6999      	ldr	r1, [r3, #24]
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	021a      	lsls	r2, r3, #8
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	430a      	orrs	r2, r1
 800452a:	619a      	str	r2, [r3, #24]
      break;
 800452c:	e043      	b.n	80045b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68b9      	ldr	r1, [r7, #8]
 8004534:	4618      	mov	r0, r3
 8004536:	f000 fa89 	bl	8004a4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	69da      	ldr	r2, [r3, #28]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f042 0208 	orr.w	r2, r2, #8
 8004548:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	69da      	ldr	r2, [r3, #28]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 0204 	bic.w	r2, r2, #4
 8004558:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	69d9      	ldr	r1, [r3, #28]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	691a      	ldr	r2, [r3, #16]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	430a      	orrs	r2, r1
 800456a:	61da      	str	r2, [r3, #28]
      break;
 800456c:	e023      	b.n	80045b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68b9      	ldr	r1, [r7, #8]
 8004574:	4618      	mov	r0, r3
 8004576:	f000 fad3 	bl	8004b20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	69da      	ldr	r2, [r3, #28]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004588:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	69da      	ldr	r2, [r3, #28]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004598:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	69d9      	ldr	r1, [r3, #28]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	021a      	lsls	r2, r3, #8
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	61da      	str	r2, [r3, #28]
      break;
 80045ae:	e002      	b.n	80045b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	75fb      	strb	r3, [r7, #23]
      break;
 80045b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045be:	7dfb      	ldrb	r3, [r7, #23]
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3718      	adds	r7, #24
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045d2:	2300      	movs	r3, #0
 80045d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d101      	bne.n	80045e4 <HAL_TIM_ConfigClockSource+0x1c>
 80045e0:	2302      	movs	r3, #2
 80045e2:	e0b4      	b.n	800474e <HAL_TIM_ConfigClockSource+0x186>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2202      	movs	r2, #2
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004602:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800460a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800461c:	d03e      	beq.n	800469c <HAL_TIM_ConfigClockSource+0xd4>
 800461e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004622:	f200 8087 	bhi.w	8004734 <HAL_TIM_ConfigClockSource+0x16c>
 8004626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800462a:	f000 8086 	beq.w	800473a <HAL_TIM_ConfigClockSource+0x172>
 800462e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004632:	d87f      	bhi.n	8004734 <HAL_TIM_ConfigClockSource+0x16c>
 8004634:	2b70      	cmp	r3, #112	; 0x70
 8004636:	d01a      	beq.n	800466e <HAL_TIM_ConfigClockSource+0xa6>
 8004638:	2b70      	cmp	r3, #112	; 0x70
 800463a:	d87b      	bhi.n	8004734 <HAL_TIM_ConfigClockSource+0x16c>
 800463c:	2b60      	cmp	r3, #96	; 0x60
 800463e:	d050      	beq.n	80046e2 <HAL_TIM_ConfigClockSource+0x11a>
 8004640:	2b60      	cmp	r3, #96	; 0x60
 8004642:	d877      	bhi.n	8004734 <HAL_TIM_ConfigClockSource+0x16c>
 8004644:	2b50      	cmp	r3, #80	; 0x50
 8004646:	d03c      	beq.n	80046c2 <HAL_TIM_ConfigClockSource+0xfa>
 8004648:	2b50      	cmp	r3, #80	; 0x50
 800464a:	d873      	bhi.n	8004734 <HAL_TIM_ConfigClockSource+0x16c>
 800464c:	2b40      	cmp	r3, #64	; 0x40
 800464e:	d058      	beq.n	8004702 <HAL_TIM_ConfigClockSource+0x13a>
 8004650:	2b40      	cmp	r3, #64	; 0x40
 8004652:	d86f      	bhi.n	8004734 <HAL_TIM_ConfigClockSource+0x16c>
 8004654:	2b30      	cmp	r3, #48	; 0x30
 8004656:	d064      	beq.n	8004722 <HAL_TIM_ConfigClockSource+0x15a>
 8004658:	2b30      	cmp	r3, #48	; 0x30
 800465a:	d86b      	bhi.n	8004734 <HAL_TIM_ConfigClockSource+0x16c>
 800465c:	2b20      	cmp	r3, #32
 800465e:	d060      	beq.n	8004722 <HAL_TIM_ConfigClockSource+0x15a>
 8004660:	2b20      	cmp	r3, #32
 8004662:	d867      	bhi.n	8004734 <HAL_TIM_ConfigClockSource+0x16c>
 8004664:	2b00      	cmp	r3, #0
 8004666:	d05c      	beq.n	8004722 <HAL_TIM_ConfigClockSource+0x15a>
 8004668:	2b10      	cmp	r3, #16
 800466a:	d05a      	beq.n	8004722 <HAL_TIM_ConfigClockSource+0x15a>
 800466c:	e062      	b.n	8004734 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6818      	ldr	r0, [r3, #0]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	6899      	ldr	r1, [r3, #8]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	685a      	ldr	r2, [r3, #4]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	f000 fb19 	bl	8004cb4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004690:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	609a      	str	r2, [r3, #8]
      break;
 800469a:	e04f      	b.n	800473c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6818      	ldr	r0, [r3, #0]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	6899      	ldr	r1, [r3, #8]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	f000 fb02 	bl	8004cb4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689a      	ldr	r2, [r3, #8]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046be:	609a      	str	r2, [r3, #8]
      break;
 80046c0:	e03c      	b.n	800473c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6818      	ldr	r0, [r3, #0]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	6859      	ldr	r1, [r3, #4]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	461a      	mov	r2, r3
 80046d0:	f000 fa76 	bl	8004bc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2150      	movs	r1, #80	; 0x50
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 facf 	bl	8004c7e <TIM_ITRx_SetConfig>
      break;
 80046e0:	e02c      	b.n	800473c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6818      	ldr	r0, [r3, #0]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	6859      	ldr	r1, [r3, #4]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	461a      	mov	r2, r3
 80046f0:	f000 fa95 	bl	8004c1e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2160      	movs	r1, #96	; 0x60
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 fabf 	bl	8004c7e <TIM_ITRx_SetConfig>
      break;
 8004700:	e01c      	b.n	800473c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6818      	ldr	r0, [r3, #0]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	6859      	ldr	r1, [r3, #4]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	461a      	mov	r2, r3
 8004710:	f000 fa56 	bl	8004bc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2140      	movs	r1, #64	; 0x40
 800471a:	4618      	mov	r0, r3
 800471c:	f000 faaf 	bl	8004c7e <TIM_ITRx_SetConfig>
      break;
 8004720:	e00c      	b.n	800473c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4619      	mov	r1, r3
 800472c:	4610      	mov	r0, r2
 800472e:	f000 faa6 	bl	8004c7e <TIM_ITRx_SetConfig>
      break;
 8004732:	e003      	b.n	800473c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	73fb      	strb	r3, [r7, #15]
      break;
 8004738:	e000      	b.n	800473c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800473a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800474c:	7bfb      	ldrb	r3, [r7, #15]
}
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004756:	b480      	push	{r7}
 8004758:	b083      	sub	sp, #12
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800475e:	bf00      	nop
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800476a:	b480      	push	{r7}
 800476c:	b083      	sub	sp, #12
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004772:	bf00      	nop
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800477e:	b480      	push	{r7}
 8004780:	b083      	sub	sp, #12
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004786:	bf00      	nop
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr

08004792 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004792:	b480      	push	{r7}
 8004794:	b083      	sub	sp, #12
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800479a:	bf00      	nop
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
	...

080047a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a34      	ldr	r2, [pc, #208]	; (800488c <TIM_Base_SetConfig+0xe4>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d00f      	beq.n	80047e0 <TIM_Base_SetConfig+0x38>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c6:	d00b      	beq.n	80047e0 <TIM_Base_SetConfig+0x38>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a31      	ldr	r2, [pc, #196]	; (8004890 <TIM_Base_SetConfig+0xe8>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d007      	beq.n	80047e0 <TIM_Base_SetConfig+0x38>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a30      	ldr	r2, [pc, #192]	; (8004894 <TIM_Base_SetConfig+0xec>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d003      	beq.n	80047e0 <TIM_Base_SetConfig+0x38>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a2f      	ldr	r2, [pc, #188]	; (8004898 <TIM_Base_SetConfig+0xf0>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d108      	bne.n	80047f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a25      	ldr	r2, [pc, #148]	; (800488c <TIM_Base_SetConfig+0xe4>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d01b      	beq.n	8004832 <TIM_Base_SetConfig+0x8a>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004800:	d017      	beq.n	8004832 <TIM_Base_SetConfig+0x8a>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a22      	ldr	r2, [pc, #136]	; (8004890 <TIM_Base_SetConfig+0xe8>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d013      	beq.n	8004832 <TIM_Base_SetConfig+0x8a>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a21      	ldr	r2, [pc, #132]	; (8004894 <TIM_Base_SetConfig+0xec>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d00f      	beq.n	8004832 <TIM_Base_SetConfig+0x8a>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a20      	ldr	r2, [pc, #128]	; (8004898 <TIM_Base_SetConfig+0xf0>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d00b      	beq.n	8004832 <TIM_Base_SetConfig+0x8a>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a1f      	ldr	r2, [pc, #124]	; (800489c <TIM_Base_SetConfig+0xf4>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d007      	beq.n	8004832 <TIM_Base_SetConfig+0x8a>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a1e      	ldr	r2, [pc, #120]	; (80048a0 <TIM_Base_SetConfig+0xf8>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d003      	beq.n	8004832 <TIM_Base_SetConfig+0x8a>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a1d      	ldr	r2, [pc, #116]	; (80048a4 <TIM_Base_SetConfig+0xfc>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d108      	bne.n	8004844 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004838:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	4313      	orrs	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	4313      	orrs	r3, r2
 8004850:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a08      	ldr	r2, [pc, #32]	; (800488c <TIM_Base_SetConfig+0xe4>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d103      	bne.n	8004878 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	691a      	ldr	r2, [r3, #16]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	615a      	str	r2, [r3, #20]
}
 800487e:	bf00      	nop
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	40010000 	.word	0x40010000
 8004890:	40000400 	.word	0x40000400
 8004894:	40000800 	.word	0x40000800
 8004898:	40000c00 	.word	0x40000c00
 800489c:	40014000 	.word	0x40014000
 80048a0:	40014400 	.word	0x40014400
 80048a4:	40014800 	.word	0x40014800

080048a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	f023 0201 	bic.w	r2, r3, #1
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f023 0303 	bic.w	r3, r3, #3
 80048de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f023 0302 	bic.w	r3, r3, #2
 80048f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a1c      	ldr	r2, [pc, #112]	; (8004970 <TIM_OC1_SetConfig+0xc8>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d10c      	bne.n	800491e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	f023 0308 	bic.w	r3, r3, #8
 800490a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	4313      	orrs	r3, r2
 8004914:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f023 0304 	bic.w	r3, r3, #4
 800491c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a13      	ldr	r2, [pc, #76]	; (8004970 <TIM_OC1_SetConfig+0xc8>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d111      	bne.n	800494a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800492c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004934:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	4313      	orrs	r3, r2
 800493e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	4313      	orrs	r3, r2
 8004948:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	621a      	str	r2, [r3, #32]
}
 8004964:	bf00      	nop
 8004966:	371c      	adds	r7, #28
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr
 8004970:	40010000 	.word	0x40010000

08004974 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	f023 0210 	bic.w	r2, r3, #16
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	021b      	lsls	r3, r3, #8
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	f023 0320 	bic.w	r3, r3, #32
 80049be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	011b      	lsls	r3, r3, #4
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a1e      	ldr	r2, [pc, #120]	; (8004a48 <TIM_OC2_SetConfig+0xd4>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d10d      	bne.n	80049f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	011b      	lsls	r3, r3, #4
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a15      	ldr	r2, [pc, #84]	; (8004a48 <TIM_OC2_SetConfig+0xd4>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d113      	bne.n	8004a20 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	621a      	str	r2, [r3, #32]
}
 8004a3a:	bf00      	nop
 8004a3c:	371c      	adds	r7, #28
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	40010000 	.word	0x40010000

08004a4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b087      	sub	sp, #28
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	69db      	ldr	r3, [r3, #28]
 8004a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f023 0303 	bic.w	r3, r3, #3
 8004a82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	021b      	lsls	r3, r3, #8
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a1d      	ldr	r2, [pc, #116]	; (8004b1c <TIM_OC3_SetConfig+0xd0>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d10d      	bne.n	8004ac6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ab0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	021b      	lsls	r3, r3, #8
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ac4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a14      	ldr	r2, [pc, #80]	; (8004b1c <TIM_OC3_SetConfig+0xd0>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d113      	bne.n	8004af6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ad4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004adc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	011b      	lsls	r3, r3, #4
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	011b      	lsls	r3, r3, #4
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	621a      	str	r2, [r3, #32]
}
 8004b10:	bf00      	nop
 8004b12:	371c      	adds	r7, #28
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	40010000 	.word	0x40010000

08004b20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b087      	sub	sp, #28
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	021b      	lsls	r3, r3, #8
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	031b      	lsls	r3, r3, #12
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a10      	ldr	r2, [pc, #64]	; (8004bbc <TIM_OC4_SetConfig+0x9c>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d109      	bne.n	8004b94 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	019b      	lsls	r3, r3, #6
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	621a      	str	r2, [r3, #32]
}
 8004bae:	bf00      	nop
 8004bb0:	371c      	adds	r7, #28
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	40010000 	.word	0x40010000

08004bc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b087      	sub	sp, #28
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	f023 0201 	bic.w	r2, r3, #1
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	011b      	lsls	r3, r3, #4
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f023 030a 	bic.w	r3, r3, #10
 8004bfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	621a      	str	r2, [r3, #32]
}
 8004c12:	bf00      	nop
 8004c14:	371c      	adds	r7, #28
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b087      	sub	sp, #28
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	60f8      	str	r0, [r7, #12]
 8004c26:	60b9      	str	r1, [r7, #8]
 8004c28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	f023 0210 	bic.w	r2, r3, #16
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	031b      	lsls	r3, r3, #12
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c5a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	011b      	lsls	r3, r3, #4
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	621a      	str	r2, [r3, #32]
}
 8004c72:	bf00      	nop
 8004c74:	371c      	adds	r7, #28
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b085      	sub	sp, #20
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
 8004c86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	f043 0307 	orr.w	r3, r3, #7
 8004ca0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	609a      	str	r2, [r3, #8]
}
 8004ca8:	bf00      	nop
 8004caa:	3714      	adds	r7, #20
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b087      	sub	sp, #28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
 8004cc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	021a      	lsls	r2, r3, #8
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	609a      	str	r2, [r3, #8]
}
 8004ce8:	bf00      	nop
 8004cea:	371c      	adds	r7, #28
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b087      	sub	sp, #28
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	f003 031f 	and.w	r3, r3, #31
 8004d06:	2201      	movs	r2, #1
 8004d08:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6a1a      	ldr	r2, [r3, #32]
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	43db      	mvns	r3, r3
 8004d16:	401a      	ands	r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6a1a      	ldr	r2, [r3, #32]
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	f003 031f 	and.w	r3, r3, #31
 8004d26:	6879      	ldr	r1, [r7, #4]
 8004d28:	fa01 f303 	lsl.w	r3, r1, r3
 8004d2c:	431a      	orrs	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	621a      	str	r2, [r3, #32]
}
 8004d32:	bf00      	nop
 8004d34:	371c      	adds	r7, #28
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
	...

08004d40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d101      	bne.n	8004d58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d54:	2302      	movs	r3, #2
 8004d56:	e050      	b.n	8004dfa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2202      	movs	r2, #2
 8004d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a1c      	ldr	r2, [pc, #112]	; (8004e08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d018      	beq.n	8004dce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da4:	d013      	beq.n	8004dce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a18      	ldr	r2, [pc, #96]	; (8004e0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d00e      	beq.n	8004dce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a16      	ldr	r2, [pc, #88]	; (8004e10 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d009      	beq.n	8004dce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a15      	ldr	r2, [pc, #84]	; (8004e14 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d004      	beq.n	8004dce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a13      	ldr	r2, [pc, #76]	; (8004e18 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d10c      	bne.n	8004de8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	40010000 	.word	0x40010000
 8004e0c:	40000400 	.word	0x40000400
 8004e10:	40000800 	.word	0x40000800
 8004e14:	40000c00 	.word	0x40000c00
 8004e18:	40014000 	.word	0x40014000

08004e1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e03f      	b.n	8004ed6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d106      	bne.n	8004e70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7fd f9bc 	bl	80021e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2224      	movs	r2, #36	; 0x24
 8004e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68da      	ldr	r2, [r3, #12]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 fddf 	bl	8005a4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	691a      	ldr	r2, [r3, #16]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	695a      	ldr	r2, [r3, #20]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004eac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68da      	ldr	r2, [r3, #12]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ebc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b08a      	sub	sp, #40	; 0x28
 8004ee2:	af02      	add	r7, sp, #8
 8004ee4:	60f8      	str	r0, [r7, #12]
 8004ee6:	60b9      	str	r1, [r7, #8]
 8004ee8:	603b      	str	r3, [r7, #0]
 8004eea:	4613      	mov	r3, r2
 8004eec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b20      	cmp	r3, #32
 8004efc:	d17c      	bne.n	8004ff8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d002      	beq.n	8004f0a <HAL_UART_Transmit+0x2c>
 8004f04:	88fb      	ldrh	r3, [r7, #6]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e075      	b.n	8004ffa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d101      	bne.n	8004f1c <HAL_UART_Transmit+0x3e>
 8004f18:	2302      	movs	r3, #2
 8004f1a:	e06e      	b.n	8004ffa <HAL_UART_Transmit+0x11c>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2221      	movs	r2, #33	; 0x21
 8004f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f32:	f7fd fb4b 	bl	80025cc <HAL_GetTick>
 8004f36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	88fa      	ldrh	r2, [r7, #6]
 8004f3c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	88fa      	ldrh	r2, [r7, #6]
 8004f42:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f4c:	d108      	bne.n	8004f60 <HAL_UART_Transmit+0x82>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d104      	bne.n	8004f60 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004f56:	2300      	movs	r3, #0
 8004f58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	61bb      	str	r3, [r7, #24]
 8004f5e:	e003      	b.n	8004f68 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f64:	2300      	movs	r3, #0
 8004f66:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004f70:	e02a      	b.n	8004fc8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	2180      	movs	r1, #128	; 0x80
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 fb1f 	bl	80055c0 <UART_WaitOnFlagUntilTimeout>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d001      	beq.n	8004f8c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e036      	b.n	8004ffa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10b      	bne.n	8004faa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	881b      	ldrh	r3, [r3, #0]
 8004f96:	461a      	mov	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fa0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	3302      	adds	r3, #2
 8004fa6:	61bb      	str	r3, [r7, #24]
 8004fa8:	e007      	b.n	8004fba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	781a      	ldrb	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1cf      	bne.n	8004f72 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	9300      	str	r3, [sp, #0]
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	2140      	movs	r1, #64	; 0x40
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f000 faef 	bl	80055c0 <UART_WaitOnFlagUntilTimeout>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e006      	b.n	8004ffa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	e000      	b.n	8004ffa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004ff8:	2302      	movs	r3, #2
  }
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3720      	adds	r7, #32
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b084      	sub	sp, #16
 8005006:	af00      	add	r7, sp, #0
 8005008:	60f8      	str	r0, [r7, #12]
 800500a:	60b9      	str	r1, [r7, #8]
 800500c:	4613      	mov	r3, r2
 800500e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b20      	cmp	r3, #32
 800501a:	d11d      	bne.n	8005058 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d002      	beq.n	8005028 <HAL_UART_Receive_IT+0x26>
 8005022:	88fb      	ldrh	r3, [r7, #6]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e016      	b.n	800505a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005032:	2b01      	cmp	r3, #1
 8005034:	d101      	bne.n	800503a <HAL_UART_Receive_IT+0x38>
 8005036:	2302      	movs	r3, #2
 8005038:	e00f      	b.n	800505a <HAL_UART_Receive_IT+0x58>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005048:	88fb      	ldrh	r3, [r7, #6]
 800504a:	461a      	mov	r2, r3
 800504c:	68b9      	ldr	r1, [r7, #8]
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f000 fb24 	bl	800569c <UART_Start_Receive_IT>
 8005054:	4603      	mov	r3, r0
 8005056:	e000      	b.n	800505a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005058:	2302      	movs	r3, #2
  }
}
 800505a:	4618      	mov	r0, r3
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
	...

08005064 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b0ba      	sub	sp, #232	; 0xe8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800508a:	2300      	movs	r3, #0
 800508c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005090:	2300      	movs	r3, #0
 8005092:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800509a:	f003 030f 	and.w	r3, r3, #15
 800509e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80050a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10f      	bne.n	80050ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ae:	f003 0320 	and.w	r3, r3, #32
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d009      	beq.n	80050ca <HAL_UART_IRQHandler+0x66>
 80050b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050ba:	f003 0320 	and.w	r3, r3, #32
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 fc07 	bl	80058d6 <UART_Receive_IT>
      return;
 80050c8:	e256      	b.n	8005578 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80050ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f000 80de 	beq.w	8005290 <HAL_UART_IRQHandler+0x22c>
 80050d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050d8:	f003 0301 	and.w	r3, r3, #1
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d106      	bne.n	80050ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80050e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 80d1 	beq.w	8005290 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80050ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00b      	beq.n	8005112 <HAL_UART_IRQHandler+0xae>
 80050fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005102:	2b00      	cmp	r3, #0
 8005104:	d005      	beq.n	8005112 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	f043 0201 	orr.w	r2, r3, #1
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005116:	f003 0304 	and.w	r3, r3, #4
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00b      	beq.n	8005136 <HAL_UART_IRQHandler+0xd2>
 800511e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005122:	f003 0301 	and.w	r3, r3, #1
 8005126:	2b00      	cmp	r3, #0
 8005128:	d005      	beq.n	8005136 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512e:	f043 0202 	orr.w	r2, r3, #2
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00b      	beq.n	800515a <HAL_UART_IRQHandler+0xf6>
 8005142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b00      	cmp	r3, #0
 800514c:	d005      	beq.n	800515a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005152:	f043 0204 	orr.w	r2, r3, #4
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800515a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800515e:	f003 0308 	and.w	r3, r3, #8
 8005162:	2b00      	cmp	r3, #0
 8005164:	d011      	beq.n	800518a <HAL_UART_IRQHandler+0x126>
 8005166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800516a:	f003 0320 	and.w	r3, r3, #32
 800516e:	2b00      	cmp	r3, #0
 8005170:	d105      	bne.n	800517e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005172:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b00      	cmp	r3, #0
 800517c:	d005      	beq.n	800518a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005182:	f043 0208 	orr.w	r2, r3, #8
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	2b00      	cmp	r3, #0
 8005190:	f000 81ed 	beq.w	800556e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005198:	f003 0320 	and.w	r3, r3, #32
 800519c:	2b00      	cmp	r3, #0
 800519e:	d008      	beq.n	80051b2 <HAL_UART_IRQHandler+0x14e>
 80051a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051a4:	f003 0320 	and.w	r3, r3, #32
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d002      	beq.n	80051b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 fb92 	bl	80058d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051bc:	2b40      	cmp	r3, #64	; 0x40
 80051be:	bf0c      	ite	eq
 80051c0:	2301      	moveq	r3, #1
 80051c2:	2300      	movne	r3, #0
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ce:	f003 0308 	and.w	r3, r3, #8
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d103      	bne.n	80051de <HAL_UART_IRQHandler+0x17a>
 80051d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d04f      	beq.n	800527e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 fa9a 	bl	8005718 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ee:	2b40      	cmp	r3, #64	; 0x40
 80051f0:	d141      	bne.n	8005276 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	3314      	adds	r3, #20
 80051f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005200:	e853 3f00 	ldrex	r3, [r3]
 8005204:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005208:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800520c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005210:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	3314      	adds	r3, #20
 800521a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800521e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005222:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005226:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800522a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800522e:	e841 2300 	strex	r3, r2, [r1]
 8005232:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005236:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1d9      	bne.n	80051f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005242:	2b00      	cmp	r3, #0
 8005244:	d013      	beq.n	800526e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524a:	4a7d      	ldr	r2, [pc, #500]	; (8005440 <HAL_UART_IRQHandler+0x3dc>)
 800524c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005252:	4618      	mov	r0, r3
 8005254:	f7fd ff4d 	bl	80030f2 <HAL_DMA_Abort_IT>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d016      	beq.n	800528c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005268:	4610      	mov	r0, r2
 800526a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800526c:	e00e      	b.n	800528c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f990 	bl	8005594 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005274:	e00a      	b.n	800528c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f98c 	bl	8005594 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800527c:	e006      	b.n	800528c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f988 	bl	8005594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800528a:	e170      	b.n	800556e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800528c:	bf00      	nop
    return;
 800528e:	e16e      	b.n	800556e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005294:	2b01      	cmp	r3, #1
 8005296:	f040 814a 	bne.w	800552e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800529a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800529e:	f003 0310 	and.w	r3, r3, #16
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 8143 	beq.w	800552e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80052a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052ac:	f003 0310 	and.w	r3, r3, #16
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 813c 	beq.w	800552e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052b6:	2300      	movs	r3, #0
 80052b8:	60bb      	str	r3, [r7, #8]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	60bb      	str	r3, [r7, #8]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	60bb      	str	r3, [r7, #8]
 80052ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d6:	2b40      	cmp	r3, #64	; 0x40
 80052d8:	f040 80b4 	bne.w	8005444 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80052e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 8140 	beq.w	8005572 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052fa:	429a      	cmp	r2, r3
 80052fc:	f080 8139 	bcs.w	8005572 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005306:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005312:	f000 8088 	beq.w	8005426 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	330c      	adds	r3, #12
 800531c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005320:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005324:	e853 3f00 	ldrex	r3, [r3]
 8005328:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800532c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005334:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	330c      	adds	r3, #12
 800533e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005342:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005346:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800534e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005352:	e841 2300 	strex	r3, r2, [r1]
 8005356:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800535a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1d9      	bne.n	8005316 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	3314      	adds	r3, #20
 8005368:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800536c:	e853 3f00 	ldrex	r3, [r3]
 8005370:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005372:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005374:	f023 0301 	bic.w	r3, r3, #1
 8005378:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	3314      	adds	r3, #20
 8005382:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005386:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800538a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800538e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005392:	e841 2300 	strex	r3, r2, [r1]
 8005396:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005398:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1e1      	bne.n	8005362 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	3314      	adds	r3, #20
 80053a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053a8:	e853 3f00 	ldrex	r3, [r3]
 80053ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80053ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	3314      	adds	r3, #20
 80053be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80053c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80053c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80053c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80053ca:	e841 2300 	strex	r3, r2, [r1]
 80053ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80053d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1e3      	bne.n	800539e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2220      	movs	r2, #32
 80053da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	330c      	adds	r3, #12
 80053ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053ee:	e853 3f00 	ldrex	r3, [r3]
 80053f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80053f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053f6:	f023 0310 	bic.w	r3, r3, #16
 80053fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	330c      	adds	r3, #12
 8005404:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005408:	65ba      	str	r2, [r7, #88]	; 0x58
 800540a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800540e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005410:	e841 2300 	strex	r3, r2, [r1]
 8005414:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1e3      	bne.n	80053e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005420:	4618      	mov	r0, r3
 8005422:	f7fd fdf6 	bl	8003012 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800542e:	b29b      	uxth	r3, r3
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	b29b      	uxth	r3, r3
 8005434:	4619      	mov	r1, r3
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f8b6 	bl	80055a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800543c:	e099      	b.n	8005572 <HAL_UART_IRQHandler+0x50e>
 800543e:	bf00      	nop
 8005440:	080057df 	.word	0x080057df
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800544c:	b29b      	uxth	r3, r3
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005458:	b29b      	uxth	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	f000 808b 	beq.w	8005576 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005460:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005464:	2b00      	cmp	r3, #0
 8005466:	f000 8086 	beq.w	8005576 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	330c      	adds	r3, #12
 8005470:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005474:	e853 3f00 	ldrex	r3, [r3]
 8005478:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800547a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800547c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005480:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	330c      	adds	r3, #12
 800548a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800548e:	647a      	str	r2, [r7, #68]	; 0x44
 8005490:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005492:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005494:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005496:	e841 2300 	strex	r3, r2, [r1]
 800549a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800549c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1e3      	bne.n	800546a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	3314      	adds	r3, #20
 80054a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	e853 3f00 	ldrex	r3, [r3]
 80054b0:	623b      	str	r3, [r7, #32]
   return(result);
 80054b2:	6a3b      	ldr	r3, [r7, #32]
 80054b4:	f023 0301 	bic.w	r3, r3, #1
 80054b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	3314      	adds	r3, #20
 80054c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80054c6:	633a      	str	r2, [r7, #48]	; 0x30
 80054c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054ce:	e841 2300 	strex	r3, r2, [r1]
 80054d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1e3      	bne.n	80054a2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2220      	movs	r2, #32
 80054de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	330c      	adds	r3, #12
 80054ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	e853 3f00 	ldrex	r3, [r3]
 80054f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f023 0310 	bic.w	r3, r3, #16
 80054fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	330c      	adds	r3, #12
 8005508:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800550c:	61fa      	str	r2, [r7, #28]
 800550e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005510:	69b9      	ldr	r1, [r7, #24]
 8005512:	69fa      	ldr	r2, [r7, #28]
 8005514:	e841 2300 	strex	r3, r2, [r1]
 8005518:	617b      	str	r3, [r7, #20]
   return(result);
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1e3      	bne.n	80054e8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005520:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005524:	4619      	mov	r1, r3
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f83e 	bl	80055a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800552c:	e023      	b.n	8005576 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800552e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005536:	2b00      	cmp	r3, #0
 8005538:	d009      	beq.n	800554e <HAL_UART_IRQHandler+0x4ea>
 800553a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800553e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f95d 	bl	8005806 <UART_Transmit_IT>
    return;
 800554c:	e014      	b.n	8005578 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800554e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00e      	beq.n	8005578 <HAL_UART_IRQHandler+0x514>
 800555a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800555e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005562:	2b00      	cmp	r3, #0
 8005564:	d008      	beq.n	8005578 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f99d 	bl	80058a6 <UART_EndTransmit_IT>
    return;
 800556c:	e004      	b.n	8005578 <HAL_UART_IRQHandler+0x514>
    return;
 800556e:	bf00      	nop
 8005570:	e002      	b.n	8005578 <HAL_UART_IRQHandler+0x514>
      return;
 8005572:	bf00      	nop
 8005574:	e000      	b.n	8005578 <HAL_UART_IRQHandler+0x514>
      return;
 8005576:	bf00      	nop
  }
}
 8005578:	37e8      	adds	r7, #232	; 0xe8
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop

08005580 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	460b      	mov	r3, r1
 80055b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b090      	sub	sp, #64	; 0x40
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	603b      	str	r3, [r7, #0]
 80055cc:	4613      	mov	r3, r2
 80055ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055d0:	e050      	b.n	8005674 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d8:	d04c      	beq.n	8005674 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80055da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d007      	beq.n	80055f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80055e0:	f7fc fff4 	bl	80025cc <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d241      	bcs.n	8005674 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	330c      	adds	r3, #12
 80055f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fa:	e853 3f00 	ldrex	r3, [r3]
 80055fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005606:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	330c      	adds	r3, #12
 800560e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005610:	637a      	str	r2, [r7, #52]	; 0x34
 8005612:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005614:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005616:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005618:	e841 2300 	strex	r3, r2, [r1]
 800561c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800561e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1e5      	bne.n	80055f0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	3314      	adds	r3, #20
 800562a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	e853 3f00 	ldrex	r3, [r3]
 8005632:	613b      	str	r3, [r7, #16]
   return(result);
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	f023 0301 	bic.w	r3, r3, #1
 800563a:	63bb      	str	r3, [r7, #56]	; 0x38
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	3314      	adds	r3, #20
 8005642:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005644:	623a      	str	r2, [r7, #32]
 8005646:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005648:	69f9      	ldr	r1, [r7, #28]
 800564a:	6a3a      	ldr	r2, [r7, #32]
 800564c:	e841 2300 	strex	r3, r2, [r1]
 8005650:	61bb      	str	r3, [r7, #24]
   return(result);
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1e5      	bne.n	8005624 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2220      	movs	r2, #32
 800565c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2220      	movs	r2, #32
 8005664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e00f      	b.n	8005694 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	4013      	ands	r3, r2
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	429a      	cmp	r2, r3
 8005682:	bf0c      	ite	eq
 8005684:	2301      	moveq	r3, #1
 8005686:	2300      	movne	r3, #0
 8005688:	b2db      	uxtb	r3, r3
 800568a:	461a      	mov	r2, r3
 800568c:	79fb      	ldrb	r3, [r7, #7]
 800568e:	429a      	cmp	r2, r3
 8005690:	d09f      	beq.n	80055d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3740      	adds	r7, #64	; 0x40
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	4613      	mov	r3, r2
 80056a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	88fa      	ldrh	r2, [r7, #6]
 80056b4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	88fa      	ldrh	r2, [r7, #6]
 80056ba:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2222      	movs	r2, #34	; 0x22
 80056c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d007      	beq.n	80056ea <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68da      	ldr	r2, [r3, #12]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056e8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	695a      	ldr	r2, [r3, #20]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f042 0201 	orr.w	r2, r2, #1
 80056f8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68da      	ldr	r2, [r3, #12]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f042 0220 	orr.w	r2, r2, #32
 8005708:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3714      	adds	r7, #20
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005718:	b480      	push	{r7}
 800571a:	b095      	sub	sp, #84	; 0x54
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	330c      	adds	r3, #12
 8005726:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800572a:	e853 3f00 	ldrex	r3, [r3]
 800572e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005732:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005736:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	330c      	adds	r3, #12
 800573e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005740:	643a      	str	r2, [r7, #64]	; 0x40
 8005742:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005744:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005746:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005748:	e841 2300 	strex	r3, r2, [r1]
 800574c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800574e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1e5      	bne.n	8005720 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	3314      	adds	r3, #20
 800575a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575c:	6a3b      	ldr	r3, [r7, #32]
 800575e:	e853 3f00 	ldrex	r3, [r3]
 8005762:	61fb      	str	r3, [r7, #28]
   return(result);
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	f023 0301 	bic.w	r3, r3, #1
 800576a:	64bb      	str	r3, [r7, #72]	; 0x48
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	3314      	adds	r3, #20
 8005772:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005774:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005776:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005778:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800577a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800577c:	e841 2300 	strex	r3, r2, [r1]
 8005780:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1e5      	bne.n	8005754 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578c:	2b01      	cmp	r3, #1
 800578e:	d119      	bne.n	80057c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	330c      	adds	r3, #12
 8005796:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	e853 3f00 	ldrex	r3, [r3]
 800579e:	60bb      	str	r3, [r7, #8]
   return(result);
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	f023 0310 	bic.w	r3, r3, #16
 80057a6:	647b      	str	r3, [r7, #68]	; 0x44
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	330c      	adds	r3, #12
 80057ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057b0:	61ba      	str	r2, [r7, #24]
 80057b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b4:	6979      	ldr	r1, [r7, #20]
 80057b6:	69ba      	ldr	r2, [r7, #24]
 80057b8:	e841 2300 	strex	r3, r2, [r1]
 80057bc:	613b      	str	r3, [r7, #16]
   return(result);
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1e5      	bne.n	8005790 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2220      	movs	r2, #32
 80057c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80057d2:	bf00      	nop
 80057d4:	3754      	adds	r7, #84	; 0x54
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b084      	sub	sp, #16
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	f7ff fecb 	bl	8005594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057fe:	bf00      	nop
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005806:	b480      	push	{r7}
 8005808:	b085      	sub	sp, #20
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b21      	cmp	r3, #33	; 0x21
 8005818:	d13e      	bne.n	8005898 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005822:	d114      	bne.n	800584e <UART_Transmit_IT+0x48>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d110      	bne.n	800584e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a1b      	ldr	r3, [r3, #32]
 8005830:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	881b      	ldrh	r3, [r3, #0]
 8005836:	461a      	mov	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005840:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	1c9a      	adds	r2, r3, #2
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	621a      	str	r2, [r3, #32]
 800584c:	e008      	b.n	8005860 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	1c59      	adds	r1, r3, #1
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	6211      	str	r1, [r2, #32]
 8005858:	781a      	ldrb	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005864:	b29b      	uxth	r3, r3
 8005866:	3b01      	subs	r3, #1
 8005868:	b29b      	uxth	r3, r3
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	4619      	mov	r1, r3
 800586e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005870:	2b00      	cmp	r3, #0
 8005872:	d10f      	bne.n	8005894 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68da      	ldr	r2, [r3, #12]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005882:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68da      	ldr	r2, [r3, #12]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005892:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005894:	2300      	movs	r3, #0
 8005896:	e000      	b.n	800589a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005898:	2302      	movs	r3, #2
  }
}
 800589a:	4618      	mov	r0, r3
 800589c:	3714      	adds	r7, #20
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b082      	sub	sp, #8
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68da      	ldr	r2, [r3, #12]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2220      	movs	r2, #32
 80058c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f7ff fe5a 	bl	8005580 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3708      	adds	r7, #8
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b08c      	sub	sp, #48	; 0x30
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b22      	cmp	r3, #34	; 0x22
 80058e8:	f040 80ab 	bne.w	8005a42 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058f4:	d117      	bne.n	8005926 <UART_Receive_IT+0x50>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d113      	bne.n	8005926 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80058fe:	2300      	movs	r3, #0
 8005900:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005906:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	b29b      	uxth	r3, r3
 8005910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005914:	b29a      	uxth	r2, r3
 8005916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005918:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800591e:	1c9a      	adds	r2, r3, #2
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	629a      	str	r2, [r3, #40]	; 0x28
 8005924:	e026      	b.n	8005974 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800592a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800592c:	2300      	movs	r3, #0
 800592e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005938:	d007      	beq.n	800594a <UART_Receive_IT+0x74>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d10a      	bne.n	8005958 <UART_Receive_IT+0x82>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d106      	bne.n	8005958 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	b2da      	uxtb	r2, r3
 8005952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005954:	701a      	strb	r2, [r3, #0]
 8005956:	e008      	b.n	800596a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	b2db      	uxtb	r3, r3
 8005960:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005964:	b2da      	uxtb	r2, r3
 8005966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005968:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800596e:	1c5a      	adds	r2, r3, #1
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005978:	b29b      	uxth	r3, r3
 800597a:	3b01      	subs	r3, #1
 800597c:	b29b      	uxth	r3, r3
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	4619      	mov	r1, r3
 8005982:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005984:	2b00      	cmp	r3, #0
 8005986:	d15a      	bne.n	8005a3e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68da      	ldr	r2, [r3, #12]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f022 0220 	bic.w	r2, r2, #32
 8005996:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68da      	ldr	r2, [r3, #12]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	695a      	ldr	r2, [r3, #20]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 0201 	bic.w	r2, r2, #1
 80059b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2220      	movs	r2, #32
 80059bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d135      	bne.n	8005a34 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	330c      	adds	r3, #12
 80059d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	e853 3f00 	ldrex	r3, [r3]
 80059dc:	613b      	str	r3, [r7, #16]
   return(result);
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	f023 0310 	bic.w	r3, r3, #16
 80059e4:	627b      	str	r3, [r7, #36]	; 0x24
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	330c      	adds	r3, #12
 80059ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ee:	623a      	str	r2, [r7, #32]
 80059f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f2:	69f9      	ldr	r1, [r7, #28]
 80059f4:	6a3a      	ldr	r2, [r7, #32]
 80059f6:	e841 2300 	strex	r3, r2, [r1]
 80059fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1e5      	bne.n	80059ce <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0310 	and.w	r3, r3, #16
 8005a0c:	2b10      	cmp	r3, #16
 8005a0e:	d10a      	bne.n	8005a26 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a10:	2300      	movs	r3, #0
 8005a12:	60fb      	str	r3, [r7, #12]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	60fb      	str	r3, [r7, #12]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	60fb      	str	r3, [r7, #12]
 8005a24:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f7ff fdbb 	bl	80055a8 <HAL_UARTEx_RxEventCallback>
 8005a32:	e002      	b.n	8005a3a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f7fb ff63 	bl	8001900 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	e002      	b.n	8005a44 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	e000      	b.n	8005a44 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005a42:	2302      	movs	r3, #2
  }
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3730      	adds	r7, #48	; 0x30
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a50:	b0c0      	sub	sp, #256	; 0x100
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a68:	68d9      	ldr	r1, [r3, #12]
 8005a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	ea40 0301 	orr.w	r3, r0, r1
 8005a74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a7a:	689a      	ldr	r2, [r3, #8]
 8005a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	431a      	orrs	r2, r3
 8005a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a90:	69db      	ldr	r3, [r3, #28]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005aa4:	f021 010c 	bic.w	r1, r1, #12
 8005aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ab2:	430b      	orrs	r3, r1
 8005ab4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac6:	6999      	ldr	r1, [r3, #24]
 8005ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	ea40 0301 	orr.w	r3, r0, r1
 8005ad2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	4b8f      	ldr	r3, [pc, #572]	; (8005d18 <UART_SetConfig+0x2cc>)
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d005      	beq.n	8005aec <UART_SetConfig+0xa0>
 8005ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	4b8d      	ldr	r3, [pc, #564]	; (8005d1c <UART_SetConfig+0x2d0>)
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d104      	bne.n	8005af6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005aec:	f7fe f978 	bl	8003de0 <HAL_RCC_GetPCLK2Freq>
 8005af0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005af4:	e003      	b.n	8005afe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005af6:	f7fe f95f 	bl	8003db8 <HAL_RCC_GetPCLK1Freq>
 8005afa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b02:	69db      	ldr	r3, [r3, #28]
 8005b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b08:	f040 810c 	bne.w	8005d24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b10:	2200      	movs	r2, #0
 8005b12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b16:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005b1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005b1e:	4622      	mov	r2, r4
 8005b20:	462b      	mov	r3, r5
 8005b22:	1891      	adds	r1, r2, r2
 8005b24:	65b9      	str	r1, [r7, #88]	; 0x58
 8005b26:	415b      	adcs	r3, r3
 8005b28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005b2e:	4621      	mov	r1, r4
 8005b30:	eb12 0801 	adds.w	r8, r2, r1
 8005b34:	4629      	mov	r1, r5
 8005b36:	eb43 0901 	adc.w	r9, r3, r1
 8005b3a:	f04f 0200 	mov.w	r2, #0
 8005b3e:	f04f 0300 	mov.w	r3, #0
 8005b42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b4e:	4690      	mov	r8, r2
 8005b50:	4699      	mov	r9, r3
 8005b52:	4623      	mov	r3, r4
 8005b54:	eb18 0303 	adds.w	r3, r8, r3
 8005b58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b5c:	462b      	mov	r3, r5
 8005b5e:	eb49 0303 	adc.w	r3, r9, r3
 8005b62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b72:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005b76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	18db      	adds	r3, r3, r3
 8005b7e:	653b      	str	r3, [r7, #80]	; 0x50
 8005b80:	4613      	mov	r3, r2
 8005b82:	eb42 0303 	adc.w	r3, r2, r3
 8005b86:	657b      	str	r3, [r7, #84]	; 0x54
 8005b88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005b8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005b90:	f7fa fb7e 	bl	8000290 <__aeabi_uldivmod>
 8005b94:	4602      	mov	r2, r0
 8005b96:	460b      	mov	r3, r1
 8005b98:	4b61      	ldr	r3, [pc, #388]	; (8005d20 <UART_SetConfig+0x2d4>)
 8005b9a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b9e:	095b      	lsrs	r3, r3, #5
 8005ba0:	011c      	lsls	r4, r3, #4
 8005ba2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005bac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005bb0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005bb4:	4642      	mov	r2, r8
 8005bb6:	464b      	mov	r3, r9
 8005bb8:	1891      	adds	r1, r2, r2
 8005bba:	64b9      	str	r1, [r7, #72]	; 0x48
 8005bbc:	415b      	adcs	r3, r3
 8005bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005bc4:	4641      	mov	r1, r8
 8005bc6:	eb12 0a01 	adds.w	sl, r2, r1
 8005bca:	4649      	mov	r1, r9
 8005bcc:	eb43 0b01 	adc.w	fp, r3, r1
 8005bd0:	f04f 0200 	mov.w	r2, #0
 8005bd4:	f04f 0300 	mov.w	r3, #0
 8005bd8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005bdc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005be0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005be4:	4692      	mov	sl, r2
 8005be6:	469b      	mov	fp, r3
 8005be8:	4643      	mov	r3, r8
 8005bea:	eb1a 0303 	adds.w	r3, sl, r3
 8005bee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005bf2:	464b      	mov	r3, r9
 8005bf4:	eb4b 0303 	adc.w	r3, fp, r3
 8005bf8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c08:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005c0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005c10:	460b      	mov	r3, r1
 8005c12:	18db      	adds	r3, r3, r3
 8005c14:	643b      	str	r3, [r7, #64]	; 0x40
 8005c16:	4613      	mov	r3, r2
 8005c18:	eb42 0303 	adc.w	r3, r2, r3
 8005c1c:	647b      	str	r3, [r7, #68]	; 0x44
 8005c1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005c26:	f7fa fb33 	bl	8000290 <__aeabi_uldivmod>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	4611      	mov	r1, r2
 8005c30:	4b3b      	ldr	r3, [pc, #236]	; (8005d20 <UART_SetConfig+0x2d4>)
 8005c32:	fba3 2301 	umull	r2, r3, r3, r1
 8005c36:	095b      	lsrs	r3, r3, #5
 8005c38:	2264      	movs	r2, #100	; 0x64
 8005c3a:	fb02 f303 	mul.w	r3, r2, r3
 8005c3e:	1acb      	subs	r3, r1, r3
 8005c40:	00db      	lsls	r3, r3, #3
 8005c42:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005c46:	4b36      	ldr	r3, [pc, #216]	; (8005d20 <UART_SetConfig+0x2d4>)
 8005c48:	fba3 2302 	umull	r2, r3, r3, r2
 8005c4c:	095b      	lsrs	r3, r3, #5
 8005c4e:	005b      	lsls	r3, r3, #1
 8005c50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c54:	441c      	add	r4, r3
 8005c56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c60:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005c64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005c68:	4642      	mov	r2, r8
 8005c6a:	464b      	mov	r3, r9
 8005c6c:	1891      	adds	r1, r2, r2
 8005c6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c70:	415b      	adcs	r3, r3
 8005c72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c78:	4641      	mov	r1, r8
 8005c7a:	1851      	adds	r1, r2, r1
 8005c7c:	6339      	str	r1, [r7, #48]	; 0x30
 8005c7e:	4649      	mov	r1, r9
 8005c80:	414b      	adcs	r3, r1
 8005c82:	637b      	str	r3, [r7, #52]	; 0x34
 8005c84:	f04f 0200 	mov.w	r2, #0
 8005c88:	f04f 0300 	mov.w	r3, #0
 8005c8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005c90:	4659      	mov	r1, fp
 8005c92:	00cb      	lsls	r3, r1, #3
 8005c94:	4651      	mov	r1, sl
 8005c96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c9a:	4651      	mov	r1, sl
 8005c9c:	00ca      	lsls	r2, r1, #3
 8005c9e:	4610      	mov	r0, r2
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	4642      	mov	r2, r8
 8005ca6:	189b      	adds	r3, r3, r2
 8005ca8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005cac:	464b      	mov	r3, r9
 8005cae:	460a      	mov	r2, r1
 8005cb0:	eb42 0303 	adc.w	r3, r2, r3
 8005cb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005cc4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005cc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005ccc:	460b      	mov	r3, r1
 8005cce:	18db      	adds	r3, r3, r3
 8005cd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	eb42 0303 	adc.w	r3, r2, r3
 8005cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005cde:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005ce2:	f7fa fad5 	bl	8000290 <__aeabi_uldivmod>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	460b      	mov	r3, r1
 8005cea:	4b0d      	ldr	r3, [pc, #52]	; (8005d20 <UART_SetConfig+0x2d4>)
 8005cec:	fba3 1302 	umull	r1, r3, r3, r2
 8005cf0:	095b      	lsrs	r3, r3, #5
 8005cf2:	2164      	movs	r1, #100	; 0x64
 8005cf4:	fb01 f303 	mul.w	r3, r1, r3
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	00db      	lsls	r3, r3, #3
 8005cfc:	3332      	adds	r3, #50	; 0x32
 8005cfe:	4a08      	ldr	r2, [pc, #32]	; (8005d20 <UART_SetConfig+0x2d4>)
 8005d00:	fba2 2303 	umull	r2, r3, r2, r3
 8005d04:	095b      	lsrs	r3, r3, #5
 8005d06:	f003 0207 	and.w	r2, r3, #7
 8005d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4422      	add	r2, r4
 8005d12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d14:	e106      	b.n	8005f24 <UART_SetConfig+0x4d8>
 8005d16:	bf00      	nop
 8005d18:	40011000 	.word	0x40011000
 8005d1c:	40011400 	.word	0x40011400
 8005d20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d2e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005d32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005d36:	4642      	mov	r2, r8
 8005d38:	464b      	mov	r3, r9
 8005d3a:	1891      	adds	r1, r2, r2
 8005d3c:	6239      	str	r1, [r7, #32]
 8005d3e:	415b      	adcs	r3, r3
 8005d40:	627b      	str	r3, [r7, #36]	; 0x24
 8005d42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d46:	4641      	mov	r1, r8
 8005d48:	1854      	adds	r4, r2, r1
 8005d4a:	4649      	mov	r1, r9
 8005d4c:	eb43 0501 	adc.w	r5, r3, r1
 8005d50:	f04f 0200 	mov.w	r2, #0
 8005d54:	f04f 0300 	mov.w	r3, #0
 8005d58:	00eb      	lsls	r3, r5, #3
 8005d5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d5e:	00e2      	lsls	r2, r4, #3
 8005d60:	4614      	mov	r4, r2
 8005d62:	461d      	mov	r5, r3
 8005d64:	4643      	mov	r3, r8
 8005d66:	18e3      	adds	r3, r4, r3
 8005d68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005d6c:	464b      	mov	r3, r9
 8005d6e:	eb45 0303 	adc.w	r3, r5, r3
 8005d72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d86:	f04f 0200 	mov.w	r2, #0
 8005d8a:	f04f 0300 	mov.w	r3, #0
 8005d8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005d92:	4629      	mov	r1, r5
 8005d94:	008b      	lsls	r3, r1, #2
 8005d96:	4621      	mov	r1, r4
 8005d98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d9c:	4621      	mov	r1, r4
 8005d9e:	008a      	lsls	r2, r1, #2
 8005da0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005da4:	f7fa fa74 	bl	8000290 <__aeabi_uldivmod>
 8005da8:	4602      	mov	r2, r0
 8005daa:	460b      	mov	r3, r1
 8005dac:	4b60      	ldr	r3, [pc, #384]	; (8005f30 <UART_SetConfig+0x4e4>)
 8005dae:	fba3 2302 	umull	r2, r3, r3, r2
 8005db2:	095b      	lsrs	r3, r3, #5
 8005db4:	011c      	lsls	r4, r3, #4
 8005db6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005dc0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005dc4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005dc8:	4642      	mov	r2, r8
 8005dca:	464b      	mov	r3, r9
 8005dcc:	1891      	adds	r1, r2, r2
 8005dce:	61b9      	str	r1, [r7, #24]
 8005dd0:	415b      	adcs	r3, r3
 8005dd2:	61fb      	str	r3, [r7, #28]
 8005dd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005dd8:	4641      	mov	r1, r8
 8005dda:	1851      	adds	r1, r2, r1
 8005ddc:	6139      	str	r1, [r7, #16]
 8005dde:	4649      	mov	r1, r9
 8005de0:	414b      	adcs	r3, r1
 8005de2:	617b      	str	r3, [r7, #20]
 8005de4:	f04f 0200 	mov.w	r2, #0
 8005de8:	f04f 0300 	mov.w	r3, #0
 8005dec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005df0:	4659      	mov	r1, fp
 8005df2:	00cb      	lsls	r3, r1, #3
 8005df4:	4651      	mov	r1, sl
 8005df6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dfa:	4651      	mov	r1, sl
 8005dfc:	00ca      	lsls	r2, r1, #3
 8005dfe:	4610      	mov	r0, r2
 8005e00:	4619      	mov	r1, r3
 8005e02:	4603      	mov	r3, r0
 8005e04:	4642      	mov	r2, r8
 8005e06:	189b      	adds	r3, r3, r2
 8005e08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e0c:	464b      	mov	r3, r9
 8005e0e:	460a      	mov	r2, r1
 8005e10:	eb42 0303 	adc.w	r3, r2, r3
 8005e14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e22:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005e24:	f04f 0200 	mov.w	r2, #0
 8005e28:	f04f 0300 	mov.w	r3, #0
 8005e2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005e30:	4649      	mov	r1, r9
 8005e32:	008b      	lsls	r3, r1, #2
 8005e34:	4641      	mov	r1, r8
 8005e36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e3a:	4641      	mov	r1, r8
 8005e3c:	008a      	lsls	r2, r1, #2
 8005e3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005e42:	f7fa fa25 	bl	8000290 <__aeabi_uldivmod>
 8005e46:	4602      	mov	r2, r0
 8005e48:	460b      	mov	r3, r1
 8005e4a:	4611      	mov	r1, r2
 8005e4c:	4b38      	ldr	r3, [pc, #224]	; (8005f30 <UART_SetConfig+0x4e4>)
 8005e4e:	fba3 2301 	umull	r2, r3, r3, r1
 8005e52:	095b      	lsrs	r3, r3, #5
 8005e54:	2264      	movs	r2, #100	; 0x64
 8005e56:	fb02 f303 	mul.w	r3, r2, r3
 8005e5a:	1acb      	subs	r3, r1, r3
 8005e5c:	011b      	lsls	r3, r3, #4
 8005e5e:	3332      	adds	r3, #50	; 0x32
 8005e60:	4a33      	ldr	r2, [pc, #204]	; (8005f30 <UART_SetConfig+0x4e4>)
 8005e62:	fba2 2303 	umull	r2, r3, r2, r3
 8005e66:	095b      	lsrs	r3, r3, #5
 8005e68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e6c:	441c      	add	r4, r3
 8005e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e72:	2200      	movs	r2, #0
 8005e74:	673b      	str	r3, [r7, #112]	; 0x70
 8005e76:	677a      	str	r2, [r7, #116]	; 0x74
 8005e78:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005e7c:	4642      	mov	r2, r8
 8005e7e:	464b      	mov	r3, r9
 8005e80:	1891      	adds	r1, r2, r2
 8005e82:	60b9      	str	r1, [r7, #8]
 8005e84:	415b      	adcs	r3, r3
 8005e86:	60fb      	str	r3, [r7, #12]
 8005e88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e8c:	4641      	mov	r1, r8
 8005e8e:	1851      	adds	r1, r2, r1
 8005e90:	6039      	str	r1, [r7, #0]
 8005e92:	4649      	mov	r1, r9
 8005e94:	414b      	adcs	r3, r1
 8005e96:	607b      	str	r3, [r7, #4]
 8005e98:	f04f 0200 	mov.w	r2, #0
 8005e9c:	f04f 0300 	mov.w	r3, #0
 8005ea0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ea4:	4659      	mov	r1, fp
 8005ea6:	00cb      	lsls	r3, r1, #3
 8005ea8:	4651      	mov	r1, sl
 8005eaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005eae:	4651      	mov	r1, sl
 8005eb0:	00ca      	lsls	r2, r1, #3
 8005eb2:	4610      	mov	r0, r2
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	4642      	mov	r2, r8
 8005eba:	189b      	adds	r3, r3, r2
 8005ebc:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ebe:	464b      	mov	r3, r9
 8005ec0:	460a      	mov	r2, r1
 8005ec2:	eb42 0303 	adc.w	r3, r2, r3
 8005ec6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	663b      	str	r3, [r7, #96]	; 0x60
 8005ed2:	667a      	str	r2, [r7, #100]	; 0x64
 8005ed4:	f04f 0200 	mov.w	r2, #0
 8005ed8:	f04f 0300 	mov.w	r3, #0
 8005edc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005ee0:	4649      	mov	r1, r9
 8005ee2:	008b      	lsls	r3, r1, #2
 8005ee4:	4641      	mov	r1, r8
 8005ee6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005eea:	4641      	mov	r1, r8
 8005eec:	008a      	lsls	r2, r1, #2
 8005eee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005ef2:	f7fa f9cd 	bl	8000290 <__aeabi_uldivmod>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	460b      	mov	r3, r1
 8005efa:	4b0d      	ldr	r3, [pc, #52]	; (8005f30 <UART_SetConfig+0x4e4>)
 8005efc:	fba3 1302 	umull	r1, r3, r3, r2
 8005f00:	095b      	lsrs	r3, r3, #5
 8005f02:	2164      	movs	r1, #100	; 0x64
 8005f04:	fb01 f303 	mul.w	r3, r1, r3
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	011b      	lsls	r3, r3, #4
 8005f0c:	3332      	adds	r3, #50	; 0x32
 8005f0e:	4a08      	ldr	r2, [pc, #32]	; (8005f30 <UART_SetConfig+0x4e4>)
 8005f10:	fba2 2303 	umull	r2, r3, r2, r3
 8005f14:	095b      	lsrs	r3, r3, #5
 8005f16:	f003 020f 	and.w	r2, r3, #15
 8005f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4422      	add	r2, r4
 8005f22:	609a      	str	r2, [r3, #8]
}
 8005f24:	bf00      	nop
 8005f26:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f30:	51eb851f 	.word	0x51eb851f

08005f34 <atoi>:
 8005f34:	220a      	movs	r2, #10
 8005f36:	2100      	movs	r1, #0
 8005f38:	f000 b882 	b.w	8006040 <strtol>

08005f3c <_strtol_l.constprop.0>:
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f42:	d001      	beq.n	8005f48 <_strtol_l.constprop.0+0xc>
 8005f44:	2b24      	cmp	r3, #36	; 0x24
 8005f46:	d906      	bls.n	8005f56 <_strtol_l.constprop.0+0x1a>
 8005f48:	f000 f8ac 	bl	80060a4 <__errno>
 8005f4c:	2316      	movs	r3, #22
 8005f4e:	6003      	str	r3, [r0, #0]
 8005f50:	2000      	movs	r0, #0
 8005f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f56:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800603c <_strtol_l.constprop.0+0x100>
 8005f5a:	460d      	mov	r5, r1
 8005f5c:	462e      	mov	r6, r5
 8005f5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f62:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8005f66:	f017 0708 	ands.w	r7, r7, #8
 8005f6a:	d1f7      	bne.n	8005f5c <_strtol_l.constprop.0+0x20>
 8005f6c:	2c2d      	cmp	r4, #45	; 0x2d
 8005f6e:	d132      	bne.n	8005fd6 <_strtol_l.constprop.0+0x9a>
 8005f70:	782c      	ldrb	r4, [r5, #0]
 8005f72:	2701      	movs	r7, #1
 8005f74:	1cb5      	adds	r5, r6, #2
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d05b      	beq.n	8006032 <_strtol_l.constprop.0+0xf6>
 8005f7a:	2b10      	cmp	r3, #16
 8005f7c:	d109      	bne.n	8005f92 <_strtol_l.constprop.0+0x56>
 8005f7e:	2c30      	cmp	r4, #48	; 0x30
 8005f80:	d107      	bne.n	8005f92 <_strtol_l.constprop.0+0x56>
 8005f82:	782c      	ldrb	r4, [r5, #0]
 8005f84:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005f88:	2c58      	cmp	r4, #88	; 0x58
 8005f8a:	d14d      	bne.n	8006028 <_strtol_l.constprop.0+0xec>
 8005f8c:	786c      	ldrb	r4, [r5, #1]
 8005f8e:	2310      	movs	r3, #16
 8005f90:	3502      	adds	r5, #2
 8005f92:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005f96:	f108 38ff 	add.w	r8, r8, #4294967295
 8005f9a:	f04f 0e00 	mov.w	lr, #0
 8005f9e:	fbb8 f9f3 	udiv	r9, r8, r3
 8005fa2:	4676      	mov	r6, lr
 8005fa4:	fb03 8a19 	mls	sl, r3, r9, r8
 8005fa8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005fac:	f1bc 0f09 	cmp.w	ip, #9
 8005fb0:	d816      	bhi.n	8005fe0 <_strtol_l.constprop.0+0xa4>
 8005fb2:	4664      	mov	r4, ip
 8005fb4:	42a3      	cmp	r3, r4
 8005fb6:	dd24      	ble.n	8006002 <_strtol_l.constprop.0+0xc6>
 8005fb8:	f1be 3fff 	cmp.w	lr, #4294967295
 8005fbc:	d008      	beq.n	8005fd0 <_strtol_l.constprop.0+0x94>
 8005fbe:	45b1      	cmp	r9, r6
 8005fc0:	d31c      	bcc.n	8005ffc <_strtol_l.constprop.0+0xc0>
 8005fc2:	d101      	bne.n	8005fc8 <_strtol_l.constprop.0+0x8c>
 8005fc4:	45a2      	cmp	sl, r4
 8005fc6:	db19      	blt.n	8005ffc <_strtol_l.constprop.0+0xc0>
 8005fc8:	fb06 4603 	mla	r6, r6, r3, r4
 8005fcc:	f04f 0e01 	mov.w	lr, #1
 8005fd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005fd4:	e7e8      	b.n	8005fa8 <_strtol_l.constprop.0+0x6c>
 8005fd6:	2c2b      	cmp	r4, #43	; 0x2b
 8005fd8:	bf04      	itt	eq
 8005fda:	782c      	ldrbeq	r4, [r5, #0]
 8005fdc:	1cb5      	addeq	r5, r6, #2
 8005fde:	e7ca      	b.n	8005f76 <_strtol_l.constprop.0+0x3a>
 8005fe0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005fe4:	f1bc 0f19 	cmp.w	ip, #25
 8005fe8:	d801      	bhi.n	8005fee <_strtol_l.constprop.0+0xb2>
 8005fea:	3c37      	subs	r4, #55	; 0x37
 8005fec:	e7e2      	b.n	8005fb4 <_strtol_l.constprop.0+0x78>
 8005fee:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005ff2:	f1bc 0f19 	cmp.w	ip, #25
 8005ff6:	d804      	bhi.n	8006002 <_strtol_l.constprop.0+0xc6>
 8005ff8:	3c57      	subs	r4, #87	; 0x57
 8005ffa:	e7db      	b.n	8005fb4 <_strtol_l.constprop.0+0x78>
 8005ffc:	f04f 3eff 	mov.w	lr, #4294967295
 8006000:	e7e6      	b.n	8005fd0 <_strtol_l.constprop.0+0x94>
 8006002:	f1be 3fff 	cmp.w	lr, #4294967295
 8006006:	d105      	bne.n	8006014 <_strtol_l.constprop.0+0xd8>
 8006008:	2322      	movs	r3, #34	; 0x22
 800600a:	6003      	str	r3, [r0, #0]
 800600c:	4646      	mov	r6, r8
 800600e:	b942      	cbnz	r2, 8006022 <_strtol_l.constprop.0+0xe6>
 8006010:	4630      	mov	r0, r6
 8006012:	e79e      	b.n	8005f52 <_strtol_l.constprop.0+0x16>
 8006014:	b107      	cbz	r7, 8006018 <_strtol_l.constprop.0+0xdc>
 8006016:	4276      	negs	r6, r6
 8006018:	2a00      	cmp	r2, #0
 800601a:	d0f9      	beq.n	8006010 <_strtol_l.constprop.0+0xd4>
 800601c:	f1be 0f00 	cmp.w	lr, #0
 8006020:	d000      	beq.n	8006024 <_strtol_l.constprop.0+0xe8>
 8006022:	1e69      	subs	r1, r5, #1
 8006024:	6011      	str	r1, [r2, #0]
 8006026:	e7f3      	b.n	8006010 <_strtol_l.constprop.0+0xd4>
 8006028:	2430      	movs	r4, #48	; 0x30
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1b1      	bne.n	8005f92 <_strtol_l.constprop.0+0x56>
 800602e:	2308      	movs	r3, #8
 8006030:	e7af      	b.n	8005f92 <_strtol_l.constprop.0+0x56>
 8006032:	2c30      	cmp	r4, #48	; 0x30
 8006034:	d0a5      	beq.n	8005f82 <_strtol_l.constprop.0+0x46>
 8006036:	230a      	movs	r3, #10
 8006038:	e7ab      	b.n	8005f92 <_strtol_l.constprop.0+0x56>
 800603a:	bf00      	nop
 800603c:	08006d75 	.word	0x08006d75

08006040 <strtol>:
 8006040:	4613      	mov	r3, r2
 8006042:	460a      	mov	r2, r1
 8006044:	4601      	mov	r1, r0
 8006046:	4802      	ldr	r0, [pc, #8]	; (8006050 <strtol+0x10>)
 8006048:	6800      	ldr	r0, [r0, #0]
 800604a:	f7ff bf77 	b.w	8005f3c <_strtol_l.constprop.0>
 800604e:	bf00      	nop
 8006050:	20000070 	.word	0x20000070

08006054 <siprintf>:
 8006054:	b40e      	push	{r1, r2, r3}
 8006056:	b500      	push	{lr}
 8006058:	b09c      	sub	sp, #112	; 0x70
 800605a:	ab1d      	add	r3, sp, #116	; 0x74
 800605c:	9002      	str	r0, [sp, #8]
 800605e:	9006      	str	r0, [sp, #24]
 8006060:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006064:	4809      	ldr	r0, [pc, #36]	; (800608c <siprintf+0x38>)
 8006066:	9107      	str	r1, [sp, #28]
 8006068:	9104      	str	r1, [sp, #16]
 800606a:	4909      	ldr	r1, [pc, #36]	; (8006090 <siprintf+0x3c>)
 800606c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006070:	9105      	str	r1, [sp, #20]
 8006072:	6800      	ldr	r0, [r0, #0]
 8006074:	9301      	str	r3, [sp, #4]
 8006076:	a902      	add	r1, sp, #8
 8006078:	f000 f992 	bl	80063a0 <_svfiprintf_r>
 800607c:	9b02      	ldr	r3, [sp, #8]
 800607e:	2200      	movs	r2, #0
 8006080:	701a      	strb	r2, [r3, #0]
 8006082:	b01c      	add	sp, #112	; 0x70
 8006084:	f85d eb04 	ldr.w	lr, [sp], #4
 8006088:	b003      	add	sp, #12
 800608a:	4770      	bx	lr
 800608c:	20000070 	.word	0x20000070
 8006090:	ffff0208 	.word	0xffff0208

08006094 <memset>:
 8006094:	4402      	add	r2, r0
 8006096:	4603      	mov	r3, r0
 8006098:	4293      	cmp	r3, r2
 800609a:	d100      	bne.n	800609e <memset+0xa>
 800609c:	4770      	bx	lr
 800609e:	f803 1b01 	strb.w	r1, [r3], #1
 80060a2:	e7f9      	b.n	8006098 <memset+0x4>

080060a4 <__errno>:
 80060a4:	4b01      	ldr	r3, [pc, #4]	; (80060ac <__errno+0x8>)
 80060a6:	6818      	ldr	r0, [r3, #0]
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	20000070 	.word	0x20000070

080060b0 <__libc_init_array>:
 80060b0:	b570      	push	{r4, r5, r6, lr}
 80060b2:	4d0d      	ldr	r5, [pc, #52]	; (80060e8 <__libc_init_array+0x38>)
 80060b4:	4c0d      	ldr	r4, [pc, #52]	; (80060ec <__libc_init_array+0x3c>)
 80060b6:	1b64      	subs	r4, r4, r5
 80060b8:	10a4      	asrs	r4, r4, #2
 80060ba:	2600      	movs	r6, #0
 80060bc:	42a6      	cmp	r6, r4
 80060be:	d109      	bne.n	80060d4 <__libc_init_array+0x24>
 80060c0:	4d0b      	ldr	r5, [pc, #44]	; (80060f0 <__libc_init_array+0x40>)
 80060c2:	4c0c      	ldr	r4, [pc, #48]	; (80060f4 <__libc_init_array+0x44>)
 80060c4:	f000 fc6a 	bl	800699c <_init>
 80060c8:	1b64      	subs	r4, r4, r5
 80060ca:	10a4      	asrs	r4, r4, #2
 80060cc:	2600      	movs	r6, #0
 80060ce:	42a6      	cmp	r6, r4
 80060d0:	d105      	bne.n	80060de <__libc_init_array+0x2e>
 80060d2:	bd70      	pop	{r4, r5, r6, pc}
 80060d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80060d8:	4798      	blx	r3
 80060da:	3601      	adds	r6, #1
 80060dc:	e7ee      	b.n	80060bc <__libc_init_array+0xc>
 80060de:	f855 3b04 	ldr.w	r3, [r5], #4
 80060e2:	4798      	blx	r3
 80060e4:	3601      	adds	r6, #1
 80060e6:	e7f2      	b.n	80060ce <__libc_init_array+0x1e>
 80060e8:	08006eb0 	.word	0x08006eb0
 80060ec:	08006eb0 	.word	0x08006eb0
 80060f0:	08006eb0 	.word	0x08006eb0
 80060f4:	08006eb4 	.word	0x08006eb4

080060f8 <__retarget_lock_acquire_recursive>:
 80060f8:	4770      	bx	lr

080060fa <__retarget_lock_release_recursive>:
 80060fa:	4770      	bx	lr

080060fc <_free_r>:
 80060fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060fe:	2900      	cmp	r1, #0
 8006100:	d044      	beq.n	800618c <_free_r+0x90>
 8006102:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006106:	9001      	str	r0, [sp, #4]
 8006108:	2b00      	cmp	r3, #0
 800610a:	f1a1 0404 	sub.w	r4, r1, #4
 800610e:	bfb8      	it	lt
 8006110:	18e4      	addlt	r4, r4, r3
 8006112:	f000 f8df 	bl	80062d4 <__malloc_lock>
 8006116:	4a1e      	ldr	r2, [pc, #120]	; (8006190 <_free_r+0x94>)
 8006118:	9801      	ldr	r0, [sp, #4]
 800611a:	6813      	ldr	r3, [r2, #0]
 800611c:	b933      	cbnz	r3, 800612c <_free_r+0x30>
 800611e:	6063      	str	r3, [r4, #4]
 8006120:	6014      	str	r4, [r2, #0]
 8006122:	b003      	add	sp, #12
 8006124:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006128:	f000 b8da 	b.w	80062e0 <__malloc_unlock>
 800612c:	42a3      	cmp	r3, r4
 800612e:	d908      	bls.n	8006142 <_free_r+0x46>
 8006130:	6825      	ldr	r5, [r4, #0]
 8006132:	1961      	adds	r1, r4, r5
 8006134:	428b      	cmp	r3, r1
 8006136:	bf01      	itttt	eq
 8006138:	6819      	ldreq	r1, [r3, #0]
 800613a:	685b      	ldreq	r3, [r3, #4]
 800613c:	1949      	addeq	r1, r1, r5
 800613e:	6021      	streq	r1, [r4, #0]
 8006140:	e7ed      	b.n	800611e <_free_r+0x22>
 8006142:	461a      	mov	r2, r3
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	b10b      	cbz	r3, 800614c <_free_r+0x50>
 8006148:	42a3      	cmp	r3, r4
 800614a:	d9fa      	bls.n	8006142 <_free_r+0x46>
 800614c:	6811      	ldr	r1, [r2, #0]
 800614e:	1855      	adds	r5, r2, r1
 8006150:	42a5      	cmp	r5, r4
 8006152:	d10b      	bne.n	800616c <_free_r+0x70>
 8006154:	6824      	ldr	r4, [r4, #0]
 8006156:	4421      	add	r1, r4
 8006158:	1854      	adds	r4, r2, r1
 800615a:	42a3      	cmp	r3, r4
 800615c:	6011      	str	r1, [r2, #0]
 800615e:	d1e0      	bne.n	8006122 <_free_r+0x26>
 8006160:	681c      	ldr	r4, [r3, #0]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	6053      	str	r3, [r2, #4]
 8006166:	440c      	add	r4, r1
 8006168:	6014      	str	r4, [r2, #0]
 800616a:	e7da      	b.n	8006122 <_free_r+0x26>
 800616c:	d902      	bls.n	8006174 <_free_r+0x78>
 800616e:	230c      	movs	r3, #12
 8006170:	6003      	str	r3, [r0, #0]
 8006172:	e7d6      	b.n	8006122 <_free_r+0x26>
 8006174:	6825      	ldr	r5, [r4, #0]
 8006176:	1961      	adds	r1, r4, r5
 8006178:	428b      	cmp	r3, r1
 800617a:	bf04      	itt	eq
 800617c:	6819      	ldreq	r1, [r3, #0]
 800617e:	685b      	ldreq	r3, [r3, #4]
 8006180:	6063      	str	r3, [r4, #4]
 8006182:	bf04      	itt	eq
 8006184:	1949      	addeq	r1, r1, r5
 8006186:	6021      	streq	r1, [r4, #0]
 8006188:	6054      	str	r4, [r2, #4]
 800618a:	e7ca      	b.n	8006122 <_free_r+0x26>
 800618c:	b003      	add	sp, #12
 800618e:	bd30      	pop	{r4, r5, pc}
 8006190:	20000420 	.word	0x20000420

08006194 <sbrk_aligned>:
 8006194:	b570      	push	{r4, r5, r6, lr}
 8006196:	4e0e      	ldr	r6, [pc, #56]	; (80061d0 <sbrk_aligned+0x3c>)
 8006198:	460c      	mov	r4, r1
 800619a:	6831      	ldr	r1, [r6, #0]
 800619c:	4605      	mov	r5, r0
 800619e:	b911      	cbnz	r1, 80061a6 <sbrk_aligned+0x12>
 80061a0:	f000 fba6 	bl	80068f0 <_sbrk_r>
 80061a4:	6030      	str	r0, [r6, #0]
 80061a6:	4621      	mov	r1, r4
 80061a8:	4628      	mov	r0, r5
 80061aa:	f000 fba1 	bl	80068f0 <_sbrk_r>
 80061ae:	1c43      	adds	r3, r0, #1
 80061b0:	d00a      	beq.n	80061c8 <sbrk_aligned+0x34>
 80061b2:	1cc4      	adds	r4, r0, #3
 80061b4:	f024 0403 	bic.w	r4, r4, #3
 80061b8:	42a0      	cmp	r0, r4
 80061ba:	d007      	beq.n	80061cc <sbrk_aligned+0x38>
 80061bc:	1a21      	subs	r1, r4, r0
 80061be:	4628      	mov	r0, r5
 80061c0:	f000 fb96 	bl	80068f0 <_sbrk_r>
 80061c4:	3001      	adds	r0, #1
 80061c6:	d101      	bne.n	80061cc <sbrk_aligned+0x38>
 80061c8:	f04f 34ff 	mov.w	r4, #4294967295
 80061cc:	4620      	mov	r0, r4
 80061ce:	bd70      	pop	{r4, r5, r6, pc}
 80061d0:	20000424 	.word	0x20000424

080061d4 <_malloc_r>:
 80061d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061d8:	1ccd      	adds	r5, r1, #3
 80061da:	f025 0503 	bic.w	r5, r5, #3
 80061de:	3508      	adds	r5, #8
 80061e0:	2d0c      	cmp	r5, #12
 80061e2:	bf38      	it	cc
 80061e4:	250c      	movcc	r5, #12
 80061e6:	2d00      	cmp	r5, #0
 80061e8:	4607      	mov	r7, r0
 80061ea:	db01      	blt.n	80061f0 <_malloc_r+0x1c>
 80061ec:	42a9      	cmp	r1, r5
 80061ee:	d905      	bls.n	80061fc <_malloc_r+0x28>
 80061f0:	230c      	movs	r3, #12
 80061f2:	603b      	str	r3, [r7, #0]
 80061f4:	2600      	movs	r6, #0
 80061f6:	4630      	mov	r0, r6
 80061f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80062d0 <_malloc_r+0xfc>
 8006200:	f000 f868 	bl	80062d4 <__malloc_lock>
 8006204:	f8d8 3000 	ldr.w	r3, [r8]
 8006208:	461c      	mov	r4, r3
 800620a:	bb5c      	cbnz	r4, 8006264 <_malloc_r+0x90>
 800620c:	4629      	mov	r1, r5
 800620e:	4638      	mov	r0, r7
 8006210:	f7ff ffc0 	bl	8006194 <sbrk_aligned>
 8006214:	1c43      	adds	r3, r0, #1
 8006216:	4604      	mov	r4, r0
 8006218:	d155      	bne.n	80062c6 <_malloc_r+0xf2>
 800621a:	f8d8 4000 	ldr.w	r4, [r8]
 800621e:	4626      	mov	r6, r4
 8006220:	2e00      	cmp	r6, #0
 8006222:	d145      	bne.n	80062b0 <_malloc_r+0xdc>
 8006224:	2c00      	cmp	r4, #0
 8006226:	d048      	beq.n	80062ba <_malloc_r+0xe6>
 8006228:	6823      	ldr	r3, [r4, #0]
 800622a:	4631      	mov	r1, r6
 800622c:	4638      	mov	r0, r7
 800622e:	eb04 0903 	add.w	r9, r4, r3
 8006232:	f000 fb5d 	bl	80068f0 <_sbrk_r>
 8006236:	4581      	cmp	r9, r0
 8006238:	d13f      	bne.n	80062ba <_malloc_r+0xe6>
 800623a:	6821      	ldr	r1, [r4, #0]
 800623c:	1a6d      	subs	r5, r5, r1
 800623e:	4629      	mov	r1, r5
 8006240:	4638      	mov	r0, r7
 8006242:	f7ff ffa7 	bl	8006194 <sbrk_aligned>
 8006246:	3001      	adds	r0, #1
 8006248:	d037      	beq.n	80062ba <_malloc_r+0xe6>
 800624a:	6823      	ldr	r3, [r4, #0]
 800624c:	442b      	add	r3, r5
 800624e:	6023      	str	r3, [r4, #0]
 8006250:	f8d8 3000 	ldr.w	r3, [r8]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d038      	beq.n	80062ca <_malloc_r+0xf6>
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	42a2      	cmp	r2, r4
 800625c:	d12b      	bne.n	80062b6 <_malloc_r+0xe2>
 800625e:	2200      	movs	r2, #0
 8006260:	605a      	str	r2, [r3, #4]
 8006262:	e00f      	b.n	8006284 <_malloc_r+0xb0>
 8006264:	6822      	ldr	r2, [r4, #0]
 8006266:	1b52      	subs	r2, r2, r5
 8006268:	d41f      	bmi.n	80062aa <_malloc_r+0xd6>
 800626a:	2a0b      	cmp	r2, #11
 800626c:	d917      	bls.n	800629e <_malloc_r+0xca>
 800626e:	1961      	adds	r1, r4, r5
 8006270:	42a3      	cmp	r3, r4
 8006272:	6025      	str	r5, [r4, #0]
 8006274:	bf18      	it	ne
 8006276:	6059      	strne	r1, [r3, #4]
 8006278:	6863      	ldr	r3, [r4, #4]
 800627a:	bf08      	it	eq
 800627c:	f8c8 1000 	streq.w	r1, [r8]
 8006280:	5162      	str	r2, [r4, r5]
 8006282:	604b      	str	r3, [r1, #4]
 8006284:	4638      	mov	r0, r7
 8006286:	f104 060b 	add.w	r6, r4, #11
 800628a:	f000 f829 	bl	80062e0 <__malloc_unlock>
 800628e:	f026 0607 	bic.w	r6, r6, #7
 8006292:	1d23      	adds	r3, r4, #4
 8006294:	1af2      	subs	r2, r6, r3
 8006296:	d0ae      	beq.n	80061f6 <_malloc_r+0x22>
 8006298:	1b9b      	subs	r3, r3, r6
 800629a:	50a3      	str	r3, [r4, r2]
 800629c:	e7ab      	b.n	80061f6 <_malloc_r+0x22>
 800629e:	42a3      	cmp	r3, r4
 80062a0:	6862      	ldr	r2, [r4, #4]
 80062a2:	d1dd      	bne.n	8006260 <_malloc_r+0x8c>
 80062a4:	f8c8 2000 	str.w	r2, [r8]
 80062a8:	e7ec      	b.n	8006284 <_malloc_r+0xb0>
 80062aa:	4623      	mov	r3, r4
 80062ac:	6864      	ldr	r4, [r4, #4]
 80062ae:	e7ac      	b.n	800620a <_malloc_r+0x36>
 80062b0:	4634      	mov	r4, r6
 80062b2:	6876      	ldr	r6, [r6, #4]
 80062b4:	e7b4      	b.n	8006220 <_malloc_r+0x4c>
 80062b6:	4613      	mov	r3, r2
 80062b8:	e7cc      	b.n	8006254 <_malloc_r+0x80>
 80062ba:	230c      	movs	r3, #12
 80062bc:	603b      	str	r3, [r7, #0]
 80062be:	4638      	mov	r0, r7
 80062c0:	f000 f80e 	bl	80062e0 <__malloc_unlock>
 80062c4:	e797      	b.n	80061f6 <_malloc_r+0x22>
 80062c6:	6025      	str	r5, [r4, #0]
 80062c8:	e7dc      	b.n	8006284 <_malloc_r+0xb0>
 80062ca:	605b      	str	r3, [r3, #4]
 80062cc:	deff      	udf	#255	; 0xff
 80062ce:	bf00      	nop
 80062d0:	20000420 	.word	0x20000420

080062d4 <__malloc_lock>:
 80062d4:	4801      	ldr	r0, [pc, #4]	; (80062dc <__malloc_lock+0x8>)
 80062d6:	f7ff bf0f 	b.w	80060f8 <__retarget_lock_acquire_recursive>
 80062da:	bf00      	nop
 80062dc:	2000041c 	.word	0x2000041c

080062e0 <__malloc_unlock>:
 80062e0:	4801      	ldr	r0, [pc, #4]	; (80062e8 <__malloc_unlock+0x8>)
 80062e2:	f7ff bf0a 	b.w	80060fa <__retarget_lock_release_recursive>
 80062e6:	bf00      	nop
 80062e8:	2000041c 	.word	0x2000041c

080062ec <__ssputs_r>:
 80062ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062f0:	688e      	ldr	r6, [r1, #8]
 80062f2:	461f      	mov	r7, r3
 80062f4:	42be      	cmp	r6, r7
 80062f6:	680b      	ldr	r3, [r1, #0]
 80062f8:	4682      	mov	sl, r0
 80062fa:	460c      	mov	r4, r1
 80062fc:	4690      	mov	r8, r2
 80062fe:	d82c      	bhi.n	800635a <__ssputs_r+0x6e>
 8006300:	898a      	ldrh	r2, [r1, #12]
 8006302:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006306:	d026      	beq.n	8006356 <__ssputs_r+0x6a>
 8006308:	6965      	ldr	r5, [r4, #20]
 800630a:	6909      	ldr	r1, [r1, #16]
 800630c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006310:	eba3 0901 	sub.w	r9, r3, r1
 8006314:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006318:	1c7b      	adds	r3, r7, #1
 800631a:	444b      	add	r3, r9
 800631c:	106d      	asrs	r5, r5, #1
 800631e:	429d      	cmp	r5, r3
 8006320:	bf38      	it	cc
 8006322:	461d      	movcc	r5, r3
 8006324:	0553      	lsls	r3, r2, #21
 8006326:	d527      	bpl.n	8006378 <__ssputs_r+0x8c>
 8006328:	4629      	mov	r1, r5
 800632a:	f7ff ff53 	bl	80061d4 <_malloc_r>
 800632e:	4606      	mov	r6, r0
 8006330:	b360      	cbz	r0, 800638c <__ssputs_r+0xa0>
 8006332:	6921      	ldr	r1, [r4, #16]
 8006334:	464a      	mov	r2, r9
 8006336:	f000 faeb 	bl	8006910 <memcpy>
 800633a:	89a3      	ldrh	r3, [r4, #12]
 800633c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006344:	81a3      	strh	r3, [r4, #12]
 8006346:	6126      	str	r6, [r4, #16]
 8006348:	6165      	str	r5, [r4, #20]
 800634a:	444e      	add	r6, r9
 800634c:	eba5 0509 	sub.w	r5, r5, r9
 8006350:	6026      	str	r6, [r4, #0]
 8006352:	60a5      	str	r5, [r4, #8]
 8006354:	463e      	mov	r6, r7
 8006356:	42be      	cmp	r6, r7
 8006358:	d900      	bls.n	800635c <__ssputs_r+0x70>
 800635a:	463e      	mov	r6, r7
 800635c:	6820      	ldr	r0, [r4, #0]
 800635e:	4632      	mov	r2, r6
 8006360:	4641      	mov	r1, r8
 8006362:	f000 faab 	bl	80068bc <memmove>
 8006366:	68a3      	ldr	r3, [r4, #8]
 8006368:	1b9b      	subs	r3, r3, r6
 800636a:	60a3      	str	r3, [r4, #8]
 800636c:	6823      	ldr	r3, [r4, #0]
 800636e:	4433      	add	r3, r6
 8006370:	6023      	str	r3, [r4, #0]
 8006372:	2000      	movs	r0, #0
 8006374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006378:	462a      	mov	r2, r5
 800637a:	f000 fad7 	bl	800692c <_realloc_r>
 800637e:	4606      	mov	r6, r0
 8006380:	2800      	cmp	r0, #0
 8006382:	d1e0      	bne.n	8006346 <__ssputs_r+0x5a>
 8006384:	6921      	ldr	r1, [r4, #16]
 8006386:	4650      	mov	r0, sl
 8006388:	f7ff feb8 	bl	80060fc <_free_r>
 800638c:	230c      	movs	r3, #12
 800638e:	f8ca 3000 	str.w	r3, [sl]
 8006392:	89a3      	ldrh	r3, [r4, #12]
 8006394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006398:	81a3      	strh	r3, [r4, #12]
 800639a:	f04f 30ff 	mov.w	r0, #4294967295
 800639e:	e7e9      	b.n	8006374 <__ssputs_r+0x88>

080063a0 <_svfiprintf_r>:
 80063a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063a4:	4698      	mov	r8, r3
 80063a6:	898b      	ldrh	r3, [r1, #12]
 80063a8:	061b      	lsls	r3, r3, #24
 80063aa:	b09d      	sub	sp, #116	; 0x74
 80063ac:	4607      	mov	r7, r0
 80063ae:	460d      	mov	r5, r1
 80063b0:	4614      	mov	r4, r2
 80063b2:	d50e      	bpl.n	80063d2 <_svfiprintf_r+0x32>
 80063b4:	690b      	ldr	r3, [r1, #16]
 80063b6:	b963      	cbnz	r3, 80063d2 <_svfiprintf_r+0x32>
 80063b8:	2140      	movs	r1, #64	; 0x40
 80063ba:	f7ff ff0b 	bl	80061d4 <_malloc_r>
 80063be:	6028      	str	r0, [r5, #0]
 80063c0:	6128      	str	r0, [r5, #16]
 80063c2:	b920      	cbnz	r0, 80063ce <_svfiprintf_r+0x2e>
 80063c4:	230c      	movs	r3, #12
 80063c6:	603b      	str	r3, [r7, #0]
 80063c8:	f04f 30ff 	mov.w	r0, #4294967295
 80063cc:	e0d0      	b.n	8006570 <_svfiprintf_r+0x1d0>
 80063ce:	2340      	movs	r3, #64	; 0x40
 80063d0:	616b      	str	r3, [r5, #20]
 80063d2:	2300      	movs	r3, #0
 80063d4:	9309      	str	r3, [sp, #36]	; 0x24
 80063d6:	2320      	movs	r3, #32
 80063d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80063e0:	2330      	movs	r3, #48	; 0x30
 80063e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006588 <_svfiprintf_r+0x1e8>
 80063e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063ea:	f04f 0901 	mov.w	r9, #1
 80063ee:	4623      	mov	r3, r4
 80063f0:	469a      	mov	sl, r3
 80063f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063f6:	b10a      	cbz	r2, 80063fc <_svfiprintf_r+0x5c>
 80063f8:	2a25      	cmp	r2, #37	; 0x25
 80063fa:	d1f9      	bne.n	80063f0 <_svfiprintf_r+0x50>
 80063fc:	ebba 0b04 	subs.w	fp, sl, r4
 8006400:	d00b      	beq.n	800641a <_svfiprintf_r+0x7a>
 8006402:	465b      	mov	r3, fp
 8006404:	4622      	mov	r2, r4
 8006406:	4629      	mov	r1, r5
 8006408:	4638      	mov	r0, r7
 800640a:	f7ff ff6f 	bl	80062ec <__ssputs_r>
 800640e:	3001      	adds	r0, #1
 8006410:	f000 80a9 	beq.w	8006566 <_svfiprintf_r+0x1c6>
 8006414:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006416:	445a      	add	r2, fp
 8006418:	9209      	str	r2, [sp, #36]	; 0x24
 800641a:	f89a 3000 	ldrb.w	r3, [sl]
 800641e:	2b00      	cmp	r3, #0
 8006420:	f000 80a1 	beq.w	8006566 <_svfiprintf_r+0x1c6>
 8006424:	2300      	movs	r3, #0
 8006426:	f04f 32ff 	mov.w	r2, #4294967295
 800642a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800642e:	f10a 0a01 	add.w	sl, sl, #1
 8006432:	9304      	str	r3, [sp, #16]
 8006434:	9307      	str	r3, [sp, #28]
 8006436:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800643a:	931a      	str	r3, [sp, #104]	; 0x68
 800643c:	4654      	mov	r4, sl
 800643e:	2205      	movs	r2, #5
 8006440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006444:	4850      	ldr	r0, [pc, #320]	; (8006588 <_svfiprintf_r+0x1e8>)
 8006446:	f7f9 fed3 	bl	80001f0 <memchr>
 800644a:	9a04      	ldr	r2, [sp, #16]
 800644c:	b9d8      	cbnz	r0, 8006486 <_svfiprintf_r+0xe6>
 800644e:	06d0      	lsls	r0, r2, #27
 8006450:	bf44      	itt	mi
 8006452:	2320      	movmi	r3, #32
 8006454:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006458:	0711      	lsls	r1, r2, #28
 800645a:	bf44      	itt	mi
 800645c:	232b      	movmi	r3, #43	; 0x2b
 800645e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006462:	f89a 3000 	ldrb.w	r3, [sl]
 8006466:	2b2a      	cmp	r3, #42	; 0x2a
 8006468:	d015      	beq.n	8006496 <_svfiprintf_r+0xf6>
 800646a:	9a07      	ldr	r2, [sp, #28]
 800646c:	4654      	mov	r4, sl
 800646e:	2000      	movs	r0, #0
 8006470:	f04f 0c0a 	mov.w	ip, #10
 8006474:	4621      	mov	r1, r4
 8006476:	f811 3b01 	ldrb.w	r3, [r1], #1
 800647a:	3b30      	subs	r3, #48	; 0x30
 800647c:	2b09      	cmp	r3, #9
 800647e:	d94d      	bls.n	800651c <_svfiprintf_r+0x17c>
 8006480:	b1b0      	cbz	r0, 80064b0 <_svfiprintf_r+0x110>
 8006482:	9207      	str	r2, [sp, #28]
 8006484:	e014      	b.n	80064b0 <_svfiprintf_r+0x110>
 8006486:	eba0 0308 	sub.w	r3, r0, r8
 800648a:	fa09 f303 	lsl.w	r3, r9, r3
 800648e:	4313      	orrs	r3, r2
 8006490:	9304      	str	r3, [sp, #16]
 8006492:	46a2      	mov	sl, r4
 8006494:	e7d2      	b.n	800643c <_svfiprintf_r+0x9c>
 8006496:	9b03      	ldr	r3, [sp, #12]
 8006498:	1d19      	adds	r1, r3, #4
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	9103      	str	r1, [sp, #12]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	bfbb      	ittet	lt
 80064a2:	425b      	neglt	r3, r3
 80064a4:	f042 0202 	orrlt.w	r2, r2, #2
 80064a8:	9307      	strge	r3, [sp, #28]
 80064aa:	9307      	strlt	r3, [sp, #28]
 80064ac:	bfb8      	it	lt
 80064ae:	9204      	strlt	r2, [sp, #16]
 80064b0:	7823      	ldrb	r3, [r4, #0]
 80064b2:	2b2e      	cmp	r3, #46	; 0x2e
 80064b4:	d10c      	bne.n	80064d0 <_svfiprintf_r+0x130>
 80064b6:	7863      	ldrb	r3, [r4, #1]
 80064b8:	2b2a      	cmp	r3, #42	; 0x2a
 80064ba:	d134      	bne.n	8006526 <_svfiprintf_r+0x186>
 80064bc:	9b03      	ldr	r3, [sp, #12]
 80064be:	1d1a      	adds	r2, r3, #4
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	9203      	str	r2, [sp, #12]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	bfb8      	it	lt
 80064c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80064cc:	3402      	adds	r4, #2
 80064ce:	9305      	str	r3, [sp, #20]
 80064d0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006598 <_svfiprintf_r+0x1f8>
 80064d4:	7821      	ldrb	r1, [r4, #0]
 80064d6:	2203      	movs	r2, #3
 80064d8:	4650      	mov	r0, sl
 80064da:	f7f9 fe89 	bl	80001f0 <memchr>
 80064de:	b138      	cbz	r0, 80064f0 <_svfiprintf_r+0x150>
 80064e0:	9b04      	ldr	r3, [sp, #16]
 80064e2:	eba0 000a 	sub.w	r0, r0, sl
 80064e6:	2240      	movs	r2, #64	; 0x40
 80064e8:	4082      	lsls	r2, r0
 80064ea:	4313      	orrs	r3, r2
 80064ec:	3401      	adds	r4, #1
 80064ee:	9304      	str	r3, [sp, #16]
 80064f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064f4:	4825      	ldr	r0, [pc, #148]	; (800658c <_svfiprintf_r+0x1ec>)
 80064f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064fa:	2206      	movs	r2, #6
 80064fc:	f7f9 fe78 	bl	80001f0 <memchr>
 8006500:	2800      	cmp	r0, #0
 8006502:	d038      	beq.n	8006576 <_svfiprintf_r+0x1d6>
 8006504:	4b22      	ldr	r3, [pc, #136]	; (8006590 <_svfiprintf_r+0x1f0>)
 8006506:	bb1b      	cbnz	r3, 8006550 <_svfiprintf_r+0x1b0>
 8006508:	9b03      	ldr	r3, [sp, #12]
 800650a:	3307      	adds	r3, #7
 800650c:	f023 0307 	bic.w	r3, r3, #7
 8006510:	3308      	adds	r3, #8
 8006512:	9303      	str	r3, [sp, #12]
 8006514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006516:	4433      	add	r3, r6
 8006518:	9309      	str	r3, [sp, #36]	; 0x24
 800651a:	e768      	b.n	80063ee <_svfiprintf_r+0x4e>
 800651c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006520:	460c      	mov	r4, r1
 8006522:	2001      	movs	r0, #1
 8006524:	e7a6      	b.n	8006474 <_svfiprintf_r+0xd4>
 8006526:	2300      	movs	r3, #0
 8006528:	3401      	adds	r4, #1
 800652a:	9305      	str	r3, [sp, #20]
 800652c:	4619      	mov	r1, r3
 800652e:	f04f 0c0a 	mov.w	ip, #10
 8006532:	4620      	mov	r0, r4
 8006534:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006538:	3a30      	subs	r2, #48	; 0x30
 800653a:	2a09      	cmp	r2, #9
 800653c:	d903      	bls.n	8006546 <_svfiprintf_r+0x1a6>
 800653e:	2b00      	cmp	r3, #0
 8006540:	d0c6      	beq.n	80064d0 <_svfiprintf_r+0x130>
 8006542:	9105      	str	r1, [sp, #20]
 8006544:	e7c4      	b.n	80064d0 <_svfiprintf_r+0x130>
 8006546:	fb0c 2101 	mla	r1, ip, r1, r2
 800654a:	4604      	mov	r4, r0
 800654c:	2301      	movs	r3, #1
 800654e:	e7f0      	b.n	8006532 <_svfiprintf_r+0x192>
 8006550:	ab03      	add	r3, sp, #12
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	462a      	mov	r2, r5
 8006556:	4b0f      	ldr	r3, [pc, #60]	; (8006594 <_svfiprintf_r+0x1f4>)
 8006558:	a904      	add	r1, sp, #16
 800655a:	4638      	mov	r0, r7
 800655c:	f3af 8000 	nop.w
 8006560:	1c42      	adds	r2, r0, #1
 8006562:	4606      	mov	r6, r0
 8006564:	d1d6      	bne.n	8006514 <_svfiprintf_r+0x174>
 8006566:	89ab      	ldrh	r3, [r5, #12]
 8006568:	065b      	lsls	r3, r3, #25
 800656a:	f53f af2d 	bmi.w	80063c8 <_svfiprintf_r+0x28>
 800656e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006570:	b01d      	add	sp, #116	; 0x74
 8006572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006576:	ab03      	add	r3, sp, #12
 8006578:	9300      	str	r3, [sp, #0]
 800657a:	462a      	mov	r2, r5
 800657c:	4b05      	ldr	r3, [pc, #20]	; (8006594 <_svfiprintf_r+0x1f4>)
 800657e:	a904      	add	r1, sp, #16
 8006580:	4638      	mov	r0, r7
 8006582:	f000 f879 	bl	8006678 <_printf_i>
 8006586:	e7eb      	b.n	8006560 <_svfiprintf_r+0x1c0>
 8006588:	08006e75 	.word	0x08006e75
 800658c:	08006e7f 	.word	0x08006e7f
 8006590:	00000000 	.word	0x00000000
 8006594:	080062ed 	.word	0x080062ed
 8006598:	08006e7b 	.word	0x08006e7b

0800659c <_printf_common>:
 800659c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065a0:	4616      	mov	r6, r2
 80065a2:	4699      	mov	r9, r3
 80065a4:	688a      	ldr	r2, [r1, #8]
 80065a6:	690b      	ldr	r3, [r1, #16]
 80065a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80065ac:	4293      	cmp	r3, r2
 80065ae:	bfb8      	it	lt
 80065b0:	4613      	movlt	r3, r2
 80065b2:	6033      	str	r3, [r6, #0]
 80065b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065b8:	4607      	mov	r7, r0
 80065ba:	460c      	mov	r4, r1
 80065bc:	b10a      	cbz	r2, 80065c2 <_printf_common+0x26>
 80065be:	3301      	adds	r3, #1
 80065c0:	6033      	str	r3, [r6, #0]
 80065c2:	6823      	ldr	r3, [r4, #0]
 80065c4:	0699      	lsls	r1, r3, #26
 80065c6:	bf42      	ittt	mi
 80065c8:	6833      	ldrmi	r3, [r6, #0]
 80065ca:	3302      	addmi	r3, #2
 80065cc:	6033      	strmi	r3, [r6, #0]
 80065ce:	6825      	ldr	r5, [r4, #0]
 80065d0:	f015 0506 	ands.w	r5, r5, #6
 80065d4:	d106      	bne.n	80065e4 <_printf_common+0x48>
 80065d6:	f104 0a19 	add.w	sl, r4, #25
 80065da:	68e3      	ldr	r3, [r4, #12]
 80065dc:	6832      	ldr	r2, [r6, #0]
 80065de:	1a9b      	subs	r3, r3, r2
 80065e0:	42ab      	cmp	r3, r5
 80065e2:	dc26      	bgt.n	8006632 <_printf_common+0x96>
 80065e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80065e8:	1e13      	subs	r3, r2, #0
 80065ea:	6822      	ldr	r2, [r4, #0]
 80065ec:	bf18      	it	ne
 80065ee:	2301      	movne	r3, #1
 80065f0:	0692      	lsls	r2, r2, #26
 80065f2:	d42b      	bmi.n	800664c <_printf_common+0xb0>
 80065f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065f8:	4649      	mov	r1, r9
 80065fa:	4638      	mov	r0, r7
 80065fc:	47c0      	blx	r8
 80065fe:	3001      	adds	r0, #1
 8006600:	d01e      	beq.n	8006640 <_printf_common+0xa4>
 8006602:	6823      	ldr	r3, [r4, #0]
 8006604:	6922      	ldr	r2, [r4, #16]
 8006606:	f003 0306 	and.w	r3, r3, #6
 800660a:	2b04      	cmp	r3, #4
 800660c:	bf02      	ittt	eq
 800660e:	68e5      	ldreq	r5, [r4, #12]
 8006610:	6833      	ldreq	r3, [r6, #0]
 8006612:	1aed      	subeq	r5, r5, r3
 8006614:	68a3      	ldr	r3, [r4, #8]
 8006616:	bf0c      	ite	eq
 8006618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800661c:	2500      	movne	r5, #0
 800661e:	4293      	cmp	r3, r2
 8006620:	bfc4      	itt	gt
 8006622:	1a9b      	subgt	r3, r3, r2
 8006624:	18ed      	addgt	r5, r5, r3
 8006626:	2600      	movs	r6, #0
 8006628:	341a      	adds	r4, #26
 800662a:	42b5      	cmp	r5, r6
 800662c:	d11a      	bne.n	8006664 <_printf_common+0xc8>
 800662e:	2000      	movs	r0, #0
 8006630:	e008      	b.n	8006644 <_printf_common+0xa8>
 8006632:	2301      	movs	r3, #1
 8006634:	4652      	mov	r2, sl
 8006636:	4649      	mov	r1, r9
 8006638:	4638      	mov	r0, r7
 800663a:	47c0      	blx	r8
 800663c:	3001      	adds	r0, #1
 800663e:	d103      	bne.n	8006648 <_printf_common+0xac>
 8006640:	f04f 30ff 	mov.w	r0, #4294967295
 8006644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006648:	3501      	adds	r5, #1
 800664a:	e7c6      	b.n	80065da <_printf_common+0x3e>
 800664c:	18e1      	adds	r1, r4, r3
 800664e:	1c5a      	adds	r2, r3, #1
 8006650:	2030      	movs	r0, #48	; 0x30
 8006652:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006656:	4422      	add	r2, r4
 8006658:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800665c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006660:	3302      	adds	r3, #2
 8006662:	e7c7      	b.n	80065f4 <_printf_common+0x58>
 8006664:	2301      	movs	r3, #1
 8006666:	4622      	mov	r2, r4
 8006668:	4649      	mov	r1, r9
 800666a:	4638      	mov	r0, r7
 800666c:	47c0      	blx	r8
 800666e:	3001      	adds	r0, #1
 8006670:	d0e6      	beq.n	8006640 <_printf_common+0xa4>
 8006672:	3601      	adds	r6, #1
 8006674:	e7d9      	b.n	800662a <_printf_common+0x8e>
	...

08006678 <_printf_i>:
 8006678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800667c:	7e0f      	ldrb	r7, [r1, #24]
 800667e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006680:	2f78      	cmp	r7, #120	; 0x78
 8006682:	4691      	mov	r9, r2
 8006684:	4680      	mov	r8, r0
 8006686:	460c      	mov	r4, r1
 8006688:	469a      	mov	sl, r3
 800668a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800668e:	d807      	bhi.n	80066a0 <_printf_i+0x28>
 8006690:	2f62      	cmp	r7, #98	; 0x62
 8006692:	d80a      	bhi.n	80066aa <_printf_i+0x32>
 8006694:	2f00      	cmp	r7, #0
 8006696:	f000 80d4 	beq.w	8006842 <_printf_i+0x1ca>
 800669a:	2f58      	cmp	r7, #88	; 0x58
 800669c:	f000 80c0 	beq.w	8006820 <_printf_i+0x1a8>
 80066a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80066a8:	e03a      	b.n	8006720 <_printf_i+0xa8>
 80066aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80066ae:	2b15      	cmp	r3, #21
 80066b0:	d8f6      	bhi.n	80066a0 <_printf_i+0x28>
 80066b2:	a101      	add	r1, pc, #4	; (adr r1, 80066b8 <_printf_i+0x40>)
 80066b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066b8:	08006711 	.word	0x08006711
 80066bc:	08006725 	.word	0x08006725
 80066c0:	080066a1 	.word	0x080066a1
 80066c4:	080066a1 	.word	0x080066a1
 80066c8:	080066a1 	.word	0x080066a1
 80066cc:	080066a1 	.word	0x080066a1
 80066d0:	08006725 	.word	0x08006725
 80066d4:	080066a1 	.word	0x080066a1
 80066d8:	080066a1 	.word	0x080066a1
 80066dc:	080066a1 	.word	0x080066a1
 80066e0:	080066a1 	.word	0x080066a1
 80066e4:	08006829 	.word	0x08006829
 80066e8:	08006751 	.word	0x08006751
 80066ec:	080067e3 	.word	0x080067e3
 80066f0:	080066a1 	.word	0x080066a1
 80066f4:	080066a1 	.word	0x080066a1
 80066f8:	0800684b 	.word	0x0800684b
 80066fc:	080066a1 	.word	0x080066a1
 8006700:	08006751 	.word	0x08006751
 8006704:	080066a1 	.word	0x080066a1
 8006708:	080066a1 	.word	0x080066a1
 800670c:	080067eb 	.word	0x080067eb
 8006710:	682b      	ldr	r3, [r5, #0]
 8006712:	1d1a      	adds	r2, r3, #4
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	602a      	str	r2, [r5, #0]
 8006718:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800671c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006720:	2301      	movs	r3, #1
 8006722:	e09f      	b.n	8006864 <_printf_i+0x1ec>
 8006724:	6820      	ldr	r0, [r4, #0]
 8006726:	682b      	ldr	r3, [r5, #0]
 8006728:	0607      	lsls	r7, r0, #24
 800672a:	f103 0104 	add.w	r1, r3, #4
 800672e:	6029      	str	r1, [r5, #0]
 8006730:	d501      	bpl.n	8006736 <_printf_i+0xbe>
 8006732:	681e      	ldr	r6, [r3, #0]
 8006734:	e003      	b.n	800673e <_printf_i+0xc6>
 8006736:	0646      	lsls	r6, r0, #25
 8006738:	d5fb      	bpl.n	8006732 <_printf_i+0xba>
 800673a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800673e:	2e00      	cmp	r6, #0
 8006740:	da03      	bge.n	800674a <_printf_i+0xd2>
 8006742:	232d      	movs	r3, #45	; 0x2d
 8006744:	4276      	negs	r6, r6
 8006746:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800674a:	485a      	ldr	r0, [pc, #360]	; (80068b4 <_printf_i+0x23c>)
 800674c:	230a      	movs	r3, #10
 800674e:	e012      	b.n	8006776 <_printf_i+0xfe>
 8006750:	682b      	ldr	r3, [r5, #0]
 8006752:	6820      	ldr	r0, [r4, #0]
 8006754:	1d19      	adds	r1, r3, #4
 8006756:	6029      	str	r1, [r5, #0]
 8006758:	0605      	lsls	r5, r0, #24
 800675a:	d501      	bpl.n	8006760 <_printf_i+0xe8>
 800675c:	681e      	ldr	r6, [r3, #0]
 800675e:	e002      	b.n	8006766 <_printf_i+0xee>
 8006760:	0641      	lsls	r1, r0, #25
 8006762:	d5fb      	bpl.n	800675c <_printf_i+0xe4>
 8006764:	881e      	ldrh	r6, [r3, #0]
 8006766:	4853      	ldr	r0, [pc, #332]	; (80068b4 <_printf_i+0x23c>)
 8006768:	2f6f      	cmp	r7, #111	; 0x6f
 800676a:	bf0c      	ite	eq
 800676c:	2308      	moveq	r3, #8
 800676e:	230a      	movne	r3, #10
 8006770:	2100      	movs	r1, #0
 8006772:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006776:	6865      	ldr	r5, [r4, #4]
 8006778:	60a5      	str	r5, [r4, #8]
 800677a:	2d00      	cmp	r5, #0
 800677c:	bfa2      	ittt	ge
 800677e:	6821      	ldrge	r1, [r4, #0]
 8006780:	f021 0104 	bicge.w	r1, r1, #4
 8006784:	6021      	strge	r1, [r4, #0]
 8006786:	b90e      	cbnz	r6, 800678c <_printf_i+0x114>
 8006788:	2d00      	cmp	r5, #0
 800678a:	d04b      	beq.n	8006824 <_printf_i+0x1ac>
 800678c:	4615      	mov	r5, r2
 800678e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006792:	fb03 6711 	mls	r7, r3, r1, r6
 8006796:	5dc7      	ldrb	r7, [r0, r7]
 8006798:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800679c:	4637      	mov	r7, r6
 800679e:	42bb      	cmp	r3, r7
 80067a0:	460e      	mov	r6, r1
 80067a2:	d9f4      	bls.n	800678e <_printf_i+0x116>
 80067a4:	2b08      	cmp	r3, #8
 80067a6:	d10b      	bne.n	80067c0 <_printf_i+0x148>
 80067a8:	6823      	ldr	r3, [r4, #0]
 80067aa:	07de      	lsls	r6, r3, #31
 80067ac:	d508      	bpl.n	80067c0 <_printf_i+0x148>
 80067ae:	6923      	ldr	r3, [r4, #16]
 80067b0:	6861      	ldr	r1, [r4, #4]
 80067b2:	4299      	cmp	r1, r3
 80067b4:	bfde      	ittt	le
 80067b6:	2330      	movle	r3, #48	; 0x30
 80067b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80067bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80067c0:	1b52      	subs	r2, r2, r5
 80067c2:	6122      	str	r2, [r4, #16]
 80067c4:	f8cd a000 	str.w	sl, [sp]
 80067c8:	464b      	mov	r3, r9
 80067ca:	aa03      	add	r2, sp, #12
 80067cc:	4621      	mov	r1, r4
 80067ce:	4640      	mov	r0, r8
 80067d0:	f7ff fee4 	bl	800659c <_printf_common>
 80067d4:	3001      	adds	r0, #1
 80067d6:	d14a      	bne.n	800686e <_printf_i+0x1f6>
 80067d8:	f04f 30ff 	mov.w	r0, #4294967295
 80067dc:	b004      	add	sp, #16
 80067de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067e2:	6823      	ldr	r3, [r4, #0]
 80067e4:	f043 0320 	orr.w	r3, r3, #32
 80067e8:	6023      	str	r3, [r4, #0]
 80067ea:	4833      	ldr	r0, [pc, #204]	; (80068b8 <_printf_i+0x240>)
 80067ec:	2778      	movs	r7, #120	; 0x78
 80067ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80067f2:	6823      	ldr	r3, [r4, #0]
 80067f4:	6829      	ldr	r1, [r5, #0]
 80067f6:	061f      	lsls	r7, r3, #24
 80067f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80067fc:	d402      	bmi.n	8006804 <_printf_i+0x18c>
 80067fe:	065f      	lsls	r7, r3, #25
 8006800:	bf48      	it	mi
 8006802:	b2b6      	uxthmi	r6, r6
 8006804:	07df      	lsls	r7, r3, #31
 8006806:	bf48      	it	mi
 8006808:	f043 0320 	orrmi.w	r3, r3, #32
 800680c:	6029      	str	r1, [r5, #0]
 800680e:	bf48      	it	mi
 8006810:	6023      	strmi	r3, [r4, #0]
 8006812:	b91e      	cbnz	r6, 800681c <_printf_i+0x1a4>
 8006814:	6823      	ldr	r3, [r4, #0]
 8006816:	f023 0320 	bic.w	r3, r3, #32
 800681a:	6023      	str	r3, [r4, #0]
 800681c:	2310      	movs	r3, #16
 800681e:	e7a7      	b.n	8006770 <_printf_i+0xf8>
 8006820:	4824      	ldr	r0, [pc, #144]	; (80068b4 <_printf_i+0x23c>)
 8006822:	e7e4      	b.n	80067ee <_printf_i+0x176>
 8006824:	4615      	mov	r5, r2
 8006826:	e7bd      	b.n	80067a4 <_printf_i+0x12c>
 8006828:	682b      	ldr	r3, [r5, #0]
 800682a:	6826      	ldr	r6, [r4, #0]
 800682c:	6961      	ldr	r1, [r4, #20]
 800682e:	1d18      	adds	r0, r3, #4
 8006830:	6028      	str	r0, [r5, #0]
 8006832:	0635      	lsls	r5, r6, #24
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	d501      	bpl.n	800683c <_printf_i+0x1c4>
 8006838:	6019      	str	r1, [r3, #0]
 800683a:	e002      	b.n	8006842 <_printf_i+0x1ca>
 800683c:	0670      	lsls	r0, r6, #25
 800683e:	d5fb      	bpl.n	8006838 <_printf_i+0x1c0>
 8006840:	8019      	strh	r1, [r3, #0]
 8006842:	2300      	movs	r3, #0
 8006844:	6123      	str	r3, [r4, #16]
 8006846:	4615      	mov	r5, r2
 8006848:	e7bc      	b.n	80067c4 <_printf_i+0x14c>
 800684a:	682b      	ldr	r3, [r5, #0]
 800684c:	1d1a      	adds	r2, r3, #4
 800684e:	602a      	str	r2, [r5, #0]
 8006850:	681d      	ldr	r5, [r3, #0]
 8006852:	6862      	ldr	r2, [r4, #4]
 8006854:	2100      	movs	r1, #0
 8006856:	4628      	mov	r0, r5
 8006858:	f7f9 fcca 	bl	80001f0 <memchr>
 800685c:	b108      	cbz	r0, 8006862 <_printf_i+0x1ea>
 800685e:	1b40      	subs	r0, r0, r5
 8006860:	6060      	str	r0, [r4, #4]
 8006862:	6863      	ldr	r3, [r4, #4]
 8006864:	6123      	str	r3, [r4, #16]
 8006866:	2300      	movs	r3, #0
 8006868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800686c:	e7aa      	b.n	80067c4 <_printf_i+0x14c>
 800686e:	6923      	ldr	r3, [r4, #16]
 8006870:	462a      	mov	r2, r5
 8006872:	4649      	mov	r1, r9
 8006874:	4640      	mov	r0, r8
 8006876:	47d0      	blx	sl
 8006878:	3001      	adds	r0, #1
 800687a:	d0ad      	beq.n	80067d8 <_printf_i+0x160>
 800687c:	6823      	ldr	r3, [r4, #0]
 800687e:	079b      	lsls	r3, r3, #30
 8006880:	d413      	bmi.n	80068aa <_printf_i+0x232>
 8006882:	68e0      	ldr	r0, [r4, #12]
 8006884:	9b03      	ldr	r3, [sp, #12]
 8006886:	4298      	cmp	r0, r3
 8006888:	bfb8      	it	lt
 800688a:	4618      	movlt	r0, r3
 800688c:	e7a6      	b.n	80067dc <_printf_i+0x164>
 800688e:	2301      	movs	r3, #1
 8006890:	4632      	mov	r2, r6
 8006892:	4649      	mov	r1, r9
 8006894:	4640      	mov	r0, r8
 8006896:	47d0      	blx	sl
 8006898:	3001      	adds	r0, #1
 800689a:	d09d      	beq.n	80067d8 <_printf_i+0x160>
 800689c:	3501      	adds	r5, #1
 800689e:	68e3      	ldr	r3, [r4, #12]
 80068a0:	9903      	ldr	r1, [sp, #12]
 80068a2:	1a5b      	subs	r3, r3, r1
 80068a4:	42ab      	cmp	r3, r5
 80068a6:	dcf2      	bgt.n	800688e <_printf_i+0x216>
 80068a8:	e7eb      	b.n	8006882 <_printf_i+0x20a>
 80068aa:	2500      	movs	r5, #0
 80068ac:	f104 0619 	add.w	r6, r4, #25
 80068b0:	e7f5      	b.n	800689e <_printf_i+0x226>
 80068b2:	bf00      	nop
 80068b4:	08006e86 	.word	0x08006e86
 80068b8:	08006e97 	.word	0x08006e97

080068bc <memmove>:
 80068bc:	4288      	cmp	r0, r1
 80068be:	b510      	push	{r4, lr}
 80068c0:	eb01 0402 	add.w	r4, r1, r2
 80068c4:	d902      	bls.n	80068cc <memmove+0x10>
 80068c6:	4284      	cmp	r4, r0
 80068c8:	4623      	mov	r3, r4
 80068ca:	d807      	bhi.n	80068dc <memmove+0x20>
 80068cc:	1e43      	subs	r3, r0, #1
 80068ce:	42a1      	cmp	r1, r4
 80068d0:	d008      	beq.n	80068e4 <memmove+0x28>
 80068d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80068da:	e7f8      	b.n	80068ce <memmove+0x12>
 80068dc:	4402      	add	r2, r0
 80068de:	4601      	mov	r1, r0
 80068e0:	428a      	cmp	r2, r1
 80068e2:	d100      	bne.n	80068e6 <memmove+0x2a>
 80068e4:	bd10      	pop	{r4, pc}
 80068e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80068ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80068ee:	e7f7      	b.n	80068e0 <memmove+0x24>

080068f0 <_sbrk_r>:
 80068f0:	b538      	push	{r3, r4, r5, lr}
 80068f2:	4d06      	ldr	r5, [pc, #24]	; (800690c <_sbrk_r+0x1c>)
 80068f4:	2300      	movs	r3, #0
 80068f6:	4604      	mov	r4, r0
 80068f8:	4608      	mov	r0, r1
 80068fa:	602b      	str	r3, [r5, #0]
 80068fc:	f7fb fd8e 	bl	800241c <_sbrk>
 8006900:	1c43      	adds	r3, r0, #1
 8006902:	d102      	bne.n	800690a <_sbrk_r+0x1a>
 8006904:	682b      	ldr	r3, [r5, #0]
 8006906:	b103      	cbz	r3, 800690a <_sbrk_r+0x1a>
 8006908:	6023      	str	r3, [r4, #0]
 800690a:	bd38      	pop	{r3, r4, r5, pc}
 800690c:	20000418 	.word	0x20000418

08006910 <memcpy>:
 8006910:	440a      	add	r2, r1
 8006912:	4291      	cmp	r1, r2
 8006914:	f100 33ff 	add.w	r3, r0, #4294967295
 8006918:	d100      	bne.n	800691c <memcpy+0xc>
 800691a:	4770      	bx	lr
 800691c:	b510      	push	{r4, lr}
 800691e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006922:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006926:	4291      	cmp	r1, r2
 8006928:	d1f9      	bne.n	800691e <memcpy+0xe>
 800692a:	bd10      	pop	{r4, pc}

0800692c <_realloc_r>:
 800692c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006930:	4680      	mov	r8, r0
 8006932:	4614      	mov	r4, r2
 8006934:	460e      	mov	r6, r1
 8006936:	b921      	cbnz	r1, 8006942 <_realloc_r+0x16>
 8006938:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800693c:	4611      	mov	r1, r2
 800693e:	f7ff bc49 	b.w	80061d4 <_malloc_r>
 8006942:	b92a      	cbnz	r2, 8006950 <_realloc_r+0x24>
 8006944:	f7ff fbda 	bl	80060fc <_free_r>
 8006948:	4625      	mov	r5, r4
 800694a:	4628      	mov	r0, r5
 800694c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006950:	f000 f81b 	bl	800698a <_malloc_usable_size_r>
 8006954:	4284      	cmp	r4, r0
 8006956:	4607      	mov	r7, r0
 8006958:	d802      	bhi.n	8006960 <_realloc_r+0x34>
 800695a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800695e:	d812      	bhi.n	8006986 <_realloc_r+0x5a>
 8006960:	4621      	mov	r1, r4
 8006962:	4640      	mov	r0, r8
 8006964:	f7ff fc36 	bl	80061d4 <_malloc_r>
 8006968:	4605      	mov	r5, r0
 800696a:	2800      	cmp	r0, #0
 800696c:	d0ed      	beq.n	800694a <_realloc_r+0x1e>
 800696e:	42bc      	cmp	r4, r7
 8006970:	4622      	mov	r2, r4
 8006972:	4631      	mov	r1, r6
 8006974:	bf28      	it	cs
 8006976:	463a      	movcs	r2, r7
 8006978:	f7ff ffca 	bl	8006910 <memcpy>
 800697c:	4631      	mov	r1, r6
 800697e:	4640      	mov	r0, r8
 8006980:	f7ff fbbc 	bl	80060fc <_free_r>
 8006984:	e7e1      	b.n	800694a <_realloc_r+0x1e>
 8006986:	4635      	mov	r5, r6
 8006988:	e7df      	b.n	800694a <_realloc_r+0x1e>

0800698a <_malloc_usable_size_r>:
 800698a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800698e:	1f18      	subs	r0, r3, #4
 8006990:	2b00      	cmp	r3, #0
 8006992:	bfbc      	itt	lt
 8006994:	580b      	ldrlt	r3, [r1, r0]
 8006996:	18c0      	addlt	r0, r0, r3
 8006998:	4770      	bx	lr
	...

0800699c <_init>:
 800699c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800699e:	bf00      	nop
 80069a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069a2:	bc08      	pop	{r3}
 80069a4:	469e      	mov	lr, r3
 80069a6:	4770      	bx	lr

080069a8 <_fini>:
 80069a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069aa:	bf00      	nop
 80069ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ae:	bc08      	pop	{r3}
 80069b0:	469e      	mov	lr, r3
 80069b2:	4770      	bx	lr
