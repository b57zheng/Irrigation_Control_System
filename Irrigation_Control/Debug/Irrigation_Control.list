
Irrigation_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005eb4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  08006054  08006054  00016054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064a4  080064a4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080064a4  080064a4  000164a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064ac  080064ac  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064ac  080064ac  000164ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064b0  080064b0  000164b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080064b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  20000060  08006510  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003f0  08006510  000203f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ea1e  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f3b  00000000  00000000  0002eaed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db0  00000000  00000000  00030a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ac3  00000000  00000000  000317d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000178f3  00000000  00000000  0003229b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fdce  00000000  00000000  00049b8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000995ce  00000000  00000000  0005995c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003fa0  00000000  00000000  000f2f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000f6ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800603c 	.word	0x0800603c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	0800603c 	.word	0x0800603c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b092      	sub	sp, #72	; 0x48
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000592:	f001 fb05 	bl	8001ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f901 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059a:	f000 fb75 	bl	8000c88 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059e:	f000 fb1f 	bl	8000be0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80005a2:	f000 fa23 	bl	80009ec <MX_TIM3_Init>
  MX_TIM2_Init();
 80005a6:	f000 f9ab 	bl	8000900 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80005aa:	f000 faef 	bl	8000b8c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80005ae:	f000 fb41 	bl	8000c34 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80005b2:	f000 f953 	bl	800085c <MX_ADC1_Init>
  MX_TIM5_Init();
 80005b6:	f000 fa9b 	bl	8000af0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

    /* ------------------ SET UP MODE BEGIN ------------------ */
  // Turn off Nucleo green LED
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2120      	movs	r1, #32
 80005be:	484f      	ldr	r0, [pc, #316]	; (80006fc <main+0x170>)
 80005c0:	f002 fa8e 	bl	8002ae0 <HAL_GPIO_WritePin>
  UART_Send_MSG("\r SETUP MODE");
 80005c4:	484e      	ldr	r0, [pc, #312]	; (8000700 <main+0x174>)
 80005c6:	f000 fecf 	bl	8001368 <UART_Send_MSG>
  //parse PWM options
  UART_Parse_MSG("\r\n\n PMW option: 0) Manual Control; 1) 60% PMW; 2) 80% PMW; 3) 99% PMW;",
 80005ca:	2301      	movs	r3, #1
 80005cc:	4a4d      	ldr	r2, [pc, #308]	; (8000704 <main+0x178>)
 80005ce:	494e      	ldr	r1, [pc, #312]	; (8000708 <main+0x17c>)
 80005d0:	484e      	ldr	r0, [pc, #312]	; (800070c <main+0x180>)
 80005d2:	f000 fe39 	bl	8001248 <UART_Parse_MSG>
			           "\r\n INLET MOTOR SPEED PWM (option 0-3): ", &INLET_PWM, 1);
  UART_Parse_MSG("",
 80005d6:	2301      	movs	r3, #1
 80005d8:	4a4d      	ldr	r2, [pc, #308]	; (8000710 <main+0x184>)
 80005da:	494e      	ldr	r1, [pc, #312]	; (8000714 <main+0x188>)
 80005dc:	484e      	ldr	r0, [pc, #312]	; (8000718 <main+0x18c>)
 80005de:	f000 fe33 	bl	8001248 <UART_Parse_MSG>
			      		 "\r\n ZONE 1 MOTOR SPEED PWM (option 0-3): ", &Zone_1_PWM, 1);
  UART_Parse_MSG("",
 80005e2:	2301      	movs	r3, #1
 80005e4:	4a4d      	ldr	r2, [pc, #308]	; (800071c <main+0x190>)
 80005e6:	494e      	ldr	r1, [pc, #312]	; (8000720 <main+0x194>)
 80005e8:	484b      	ldr	r0, [pc, #300]	; (8000718 <main+0x18c>)
 80005ea:	f000 fe2d 	bl	8001248 <UART_Parse_MSG>
			           "\r\n ZONE 2 MOTOR SPEED PWM (option 0-3): ", &Zone_2_PWM, 1);
  UART_Parse_MSG("",
 80005ee:	2301      	movs	r3, #1
 80005f0:	4a4c      	ldr	r2, [pc, #304]	; (8000724 <main+0x198>)
 80005f2:	494d      	ldr	r1, [pc, #308]	; (8000728 <main+0x19c>)
 80005f4:	4848      	ldr	r0, [pc, #288]	; (8000718 <main+0x18c>)
 80005f6:	f000 fe27 	bl	8001248 <UART_Parse_MSG>
			           "\r\n ZONE 3 MOTOR SPEED PWM (option 0-3): ", &Zone_3_PWM, 1);
  //parse CLOCK options
  UART_Parse_MSG("\r\n\n CLOCK option: 00 - Midnight, 01 - 1:00am, ... , 12 - noon, 13 - 1:00pm",
 80005fa:	2302      	movs	r3, #2
 80005fc:	4a4b      	ldr	r2, [pc, #300]	; (800072c <main+0x1a0>)
 80005fe:	494c      	ldr	r1, [pc, #304]	; (8000730 <main+0x1a4>)
 8000600:	484c      	ldr	r0, [pc, #304]	; (8000734 <main+0x1a8>)
 8000602:	f000 fe21 	bl	8001248 <UART_Parse_MSG>
			           "\r\n CURRENT WALL CLOCK START TIME(0-23): ", &WALL_CLK_START, 2);
  UART_Parse_MSG("",
 8000606:	2302      	movs	r3, #2
 8000608:	4a4b      	ldr	r2, [pc, #300]	; (8000738 <main+0x1ac>)
 800060a:	494c      	ldr	r1, [pc, #304]	; (800073c <main+0x1b0>)
 800060c:	4842      	ldr	r0, [pc, #264]	; (8000718 <main+0x18c>)
 800060e:	f000 fe1b 	bl	8001248 <UART_Parse_MSG>
			           "\r\n\n INLET WALL CLOCK START TIME(0-23): ", &INLET_CLK_START, 2);
  UART_Parse_MSG("",
 8000612:	2302      	movs	r3, #2
 8000614:	4a4a      	ldr	r2, [pc, #296]	; (8000740 <main+0x1b4>)
 8000616:	494b      	ldr	r1, [pc, #300]	; (8000744 <main+0x1b8>)
 8000618:	483f      	ldr	r0, [pc, #252]	; (8000718 <main+0x18c>)
 800061a:	f000 fe15 	bl	8001248 <UART_Parse_MSG>
			           "\r\n INLET WALL CLOCK STOP TIME(0-23): ", &INLET_CLK_STOP, 2);
  UART_Parse_MSG("",
 800061e:	2302      	movs	r3, #2
 8000620:	4a49      	ldr	r2, [pc, #292]	; (8000748 <main+0x1bc>)
 8000622:	494a      	ldr	r1, [pc, #296]	; (800074c <main+0x1c0>)
 8000624:	483c      	ldr	r0, [pc, #240]	; (8000718 <main+0x18c>)
 8000626:	f000 fe0f 	bl	8001248 <UART_Parse_MSG>
			           "\r\n\n ZONE 1 WALL CLOCK START TIME(0-23): ", &Zone_1_CLK_START, 2);
  UART_Parse_MSG("",
 800062a:	2302      	movs	r3, #2
 800062c:	4a48      	ldr	r2, [pc, #288]	; (8000750 <main+0x1c4>)
 800062e:	4949      	ldr	r1, [pc, #292]	; (8000754 <main+0x1c8>)
 8000630:	4839      	ldr	r0, [pc, #228]	; (8000718 <main+0x18c>)
 8000632:	f000 fe09 	bl	8001248 <UART_Parse_MSG>
			           "\r\n ZONE 1 WALL CLOCK STOP TIME(0-23): ", &Zone_1_CLK_STOP, 2);
  UART_Parse_MSG("",
 8000636:	2302      	movs	r3, #2
 8000638:	4a47      	ldr	r2, [pc, #284]	; (8000758 <main+0x1cc>)
 800063a:	4948      	ldr	r1, [pc, #288]	; (800075c <main+0x1d0>)
 800063c:	4836      	ldr	r0, [pc, #216]	; (8000718 <main+0x18c>)
 800063e:	f000 fe03 	bl	8001248 <UART_Parse_MSG>
			           "\r\n\n ZONE 2 WALL CLOCK START TIME(0-23): ", &Zone_2_CLK_START, 2);
  UART_Parse_MSG("",
 8000642:	2302      	movs	r3, #2
 8000644:	4a46      	ldr	r2, [pc, #280]	; (8000760 <main+0x1d4>)
 8000646:	4947      	ldr	r1, [pc, #284]	; (8000764 <main+0x1d8>)
 8000648:	4833      	ldr	r0, [pc, #204]	; (8000718 <main+0x18c>)
 800064a:	f000 fdfd 	bl	8001248 <UART_Parse_MSG>
			           "\r\n ZONE 2 WALL CLOCK STOP TIME(0-23): ", &Zone_2_CLK_STOP, 2);
  UART_Parse_MSG("",
 800064e:	2302      	movs	r3, #2
 8000650:	4a45      	ldr	r2, [pc, #276]	; (8000768 <main+0x1dc>)
 8000652:	4946      	ldr	r1, [pc, #280]	; (800076c <main+0x1e0>)
 8000654:	4830      	ldr	r0, [pc, #192]	; (8000718 <main+0x18c>)
 8000656:	f000 fdf7 	bl	8001248 <UART_Parse_MSG>
			           "\r\n\n ZONE 3 WALL CLOCK START TIME(0-23): ", &Zone_3_CLK_START, 2);
  UART_Parse_MSG("",
 800065a:	2302      	movs	r3, #2
 800065c:	4a44      	ldr	r2, [pc, #272]	; (8000770 <main+0x1e4>)
 800065e:	4945      	ldr	r1, [pc, #276]	; (8000774 <main+0x1e8>)
 8000660:	482d      	ldr	r0, [pc, #180]	; (8000718 <main+0x18c>)
 8000662:	f000 fdf1 	bl	8001248 <UART_Parse_MSG>
			           "\r\n ZONE 3 WALL CLOCK STOP TIME(0-23): ", &Zone_3_CLK_STOP, 2);
  UART_Send_MSG("\r\n\n SETUP MODE END");
 8000666:	4844      	ldr	r0, [pc, #272]	; (8000778 <main+0x1ec>)
 8000668:	f000 fe7e 	bl	8001368 <UART_Send_MSG>
  // wait for run mode to start (blue PB)
  while (RUN_MODE_START_FLAG == 0) {
 800066c:	e006      	b.n	800067c <main+0xf0>
    // Flash controller green LED
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800066e:	2120      	movs	r1, #32
 8000670:	4822      	ldr	r0, [pc, #136]	; (80006fc <main+0x170>)
 8000672:	f002 fa4e 	bl	8002b12 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8000676:	2064      	movs	r0, #100	; 0x64
 8000678:	f001 fb04 	bl	8001c84 <HAL_Delay>
  while (RUN_MODE_START_FLAG == 0) {
 800067c:	4b3f      	ldr	r3, [pc, #252]	; (800077c <main+0x1f0>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	2b00      	cmp	r3, #0
 8000684:	d0f3      	beq.n	800066e <main+0xe2>
  };
    /* ------------------ SET UP MODE END ------------------ */

    /* ------------------ RUN MODE ------------------ */
  // start up TIMER 5 for one second interrupts
  HAL_TIM_Base_Start_IT(&htim5);
 8000686:	483e      	ldr	r0, [pc, #248]	; (8000780 <main+0x1f4>)
 8000688:	f002 ffb8 	bl	80035fc <HAL_TIM_Base_Start_IT>
  // start up TIMER 3 for DC motor control and TIMER 2 for Servo motor control
  HAL_TIM_Base_Init(&htim3);
 800068c:	483d      	ldr	r0, [pc, #244]	; (8000784 <main+0x1f8>)
 800068e:	f002 ff0b 	bl	80034a8 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start(&htim2);
 8000692:	483d      	ldr	r0, [pc, #244]	; (8000788 <main+0x1fc>)
 8000694:	f002 ff58 	bl	8003548 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000698:	2100      	movs	r1, #0
 800069a:	483b      	ldr	r0, [pc, #236]	; (8000788 <main+0x1fc>)
 800069c:	f003 f86a 	bl	8003774 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Init(&htim3);
 80006a0:	4838      	ldr	r0, [pc, #224]	; (8000784 <main+0x1f8>)
 80006a2:	f002 ff01 	bl	80034a8 <HAL_TIM_Base_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80006a6:	2100      	movs	r1, #0
 80006a8:	4836      	ldr	r0, [pc, #216]	; (8000784 <main+0x1f8>)
 80006aa:	f003 f863 	bl	8003774 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80006ae:	2108      	movs	r1, #8
 80006b0:	4834      	ldr	r0, [pc, #208]	; (8000784 <main+0x1f8>)
 80006b2:	f003 f85f 	bl	8003774 <HAL_TIM_PWM_Start>

	// Turn ON controller green LED
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80006b6:	2201      	movs	r2, #1
 80006b8:	2120      	movs	r1, #32
 80006ba:	4810      	ldr	r0, [pc, #64]	; (80006fc <main+0x170>)
 80006bc:	f002 fa10 	bl	8002ae0 <HAL_GPIO_WritePin>
	UART_Send_MSG("\r\n\n RUN MODE");
 80006c0:	4832      	ldr	r0, [pc, #200]	; (800078c <main+0x200>)
 80006c2:	f000 fe51 	bl	8001368 <UART_Send_MSG>
		// Combine the two bytes into a single 16-bit integer
		distance = ((uint16_t)us100_buffer[0] << 8) | us100_buffer[1];
		sprintf( (char*)msg_buffer, "Distance in mm: %d \r\n", distance );
    HAL_UART_Transmit(&huart6, msg_buffer, strlen((char*)msg_buffer), 1000);
		*/
  	uint8_t adc_percent = ADC_Manual_Control_PWM(&hadc1, 9);
 80006c6:	2109      	movs	r1, #9
 80006c8:	4831      	ldr	r0, [pc, #196]	; (8000790 <main+0x204>)
 80006ca:	f000 ff69 	bl	80015a0 <ADC_Manual_Control_PWM>
 80006ce:	4603      	mov	r3, r0
 80006d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  	char buf[64];
  	sprintf(buf, "ADC: %u\r\n", adc_percent);
 80006d4:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	492e      	ldr	r1, [pc, #184]	; (8000794 <main+0x208>)
 80006dc:	4618      	mov	r0, r3
 80006de:	f005 f809 	bl	80056f4 <siprintf>
  	HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), 1000);
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff fd7b 	bl	80001e0 <strlen>
 80006ea:	4603      	mov	r3, r0
 80006ec:	b29a      	uxth	r2, r3
 80006ee:	1d39      	adds	r1, r7, #4
 80006f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f4:	4828      	ldr	r0, [pc, #160]	; (8000798 <main+0x20c>)
 80006f6:	f003 ff42 	bl	800457e <HAL_UART_Transmit>
  {
 80006fa:	e7e4      	b.n	80006c6 <main+0x13a>
 80006fc:	40020000 	.word	0x40020000
 8000700:	08006054 	.word	0x08006054
 8000704:	2000007d 	.word	0x2000007d
 8000708:	08006064 	.word	0x08006064
 800070c:	0800608c 	.word	0x0800608c
 8000710:	2000007e 	.word	0x2000007e
 8000714:	080060d4 	.word	0x080060d4
 8000718:	08006100 	.word	0x08006100
 800071c:	2000007f 	.word	0x2000007f
 8000720:	08006104 	.word	0x08006104
 8000724:	20000080 	.word	0x20000080
 8000728:	08006130 	.word	0x08006130
 800072c:	20000081 	.word	0x20000081
 8000730:	0800615c 	.word	0x0800615c
 8000734:	08006188 	.word	0x08006188
 8000738:	20000082 	.word	0x20000082
 800073c:	080061d4 	.word	0x080061d4
 8000740:	20000083 	.word	0x20000083
 8000744:	080061fc 	.word	0x080061fc
 8000748:	20000084 	.word	0x20000084
 800074c:	08006224 	.word	0x08006224
 8000750:	20000085 	.word	0x20000085
 8000754:	08006250 	.word	0x08006250
 8000758:	20000086 	.word	0x20000086
 800075c:	08006278 	.word	0x08006278
 8000760:	20000087 	.word	0x20000087
 8000764:	080062a4 	.word	0x080062a4
 8000768:	20000088 	.word	0x20000088
 800076c:	080062cc 	.word	0x080062cc
 8000770:	20000089 	.word	0x20000089
 8000774:	080062f8 	.word	0x080062f8
 8000778:	08006320 	.word	0x08006320
 800077c:	2000008a 	.word	0x2000008a
 8000780:	2000018c 	.word	0x2000018c
 8000784:	20000144 	.word	0x20000144
 8000788:	200000fc 	.word	0x200000fc
 800078c:	08006334 	.word	0x08006334
 8000790:	200000b4 	.word	0x200000b4
 8000794:	08006344 	.word	0x08006344
 8000798:	2000025c 	.word	0x2000025c

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b094      	sub	sp, #80	; 0x50
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 0320 	add.w	r3, r7, #32
 80007a6:	2230      	movs	r2, #48	; 0x30
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f004 ffc2 	bl	8005734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c0:	2300      	movs	r3, #0
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	4b23      	ldr	r3, [pc, #140]	; (8000854 <SystemClock_Config+0xb8>)
 80007c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c8:	4a22      	ldr	r2, [pc, #136]	; (8000854 <SystemClock_Config+0xb8>)
 80007ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ce:	6413      	str	r3, [r2, #64]	; 0x40
 80007d0:	4b20      	ldr	r3, [pc, #128]	; (8000854 <SystemClock_Config+0xb8>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007dc:	2300      	movs	r3, #0
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	4b1d      	ldr	r3, [pc, #116]	; (8000858 <SystemClock_Config+0xbc>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007e8:	4a1b      	ldr	r2, [pc, #108]	; (8000858 <SystemClock_Config+0xbc>)
 80007ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007ee:	6013      	str	r3, [r2, #0]
 80007f0:	4b19      	ldr	r3, [pc, #100]	; (8000858 <SystemClock_Config+0xbc>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007fc:	2302      	movs	r3, #2
 80007fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000800:	2301      	movs	r3, #1
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000804:	2310      	movs	r3, #16
 8000806:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000808:	2300      	movs	r3, #0
 800080a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080c:	f107 0320 	add.w	r3, r7, #32
 8000810:	4618      	mov	r0, r3
 8000812:	f002 f9b1 	bl	8002b78 <HAL_RCC_OscConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800081c:	f000 fef2 	bl	8001604 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000820:	230f      	movs	r3, #15
 8000822:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000824:	2300      	movs	r3, #0
 8000826:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f002 fc14 	bl	8003068 <HAL_RCC_ClockConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000846:	f000 fedd 	bl	8001604 <Error_Handler>
  }
}
 800084a:	bf00      	nop
 800084c:	3750      	adds	r7, #80	; 0x50
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800
 8000858:	40007000 	.word	0x40007000

0800085c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000862:	463b      	mov	r3, r7
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800086e:	4b21      	ldr	r3, [pc, #132]	; (80008f4 <MX_ADC1_Init+0x98>)
 8000870:	4a21      	ldr	r2, [pc, #132]	; (80008f8 <MX_ADC1_Init+0x9c>)
 8000872:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000874:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <MX_ADC1_Init+0x98>)
 8000876:	2200      	movs	r2, #0
 8000878:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800087a:	4b1e      	ldr	r3, [pc, #120]	; (80008f4 <MX_ADC1_Init+0x98>)
 800087c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000880:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000882:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <MX_ADC1_Init+0x98>)
 8000884:	2201      	movs	r2, #1
 8000886:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000888:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <MX_ADC1_Init+0x98>)
 800088a:	2200      	movs	r2, #0
 800088c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800088e:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <MX_ADC1_Init+0x98>)
 8000890:	2200      	movs	r2, #0
 8000892:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <MX_ADC1_Init+0x98>)
 8000898:	2200      	movs	r2, #0
 800089a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800089c:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <MX_ADC1_Init+0x98>)
 800089e:	4a17      	ldr	r2, [pc, #92]	; (80008fc <MX_ADC1_Init+0xa0>)
 80008a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008a2:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MX_ADC1_Init+0x98>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <MX_ADC1_Init+0x98>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_ADC1_Init+0x98>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_ADC1_Init+0x98>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008bc:	480d      	ldr	r0, [pc, #52]	; (80008f4 <MX_ADC1_Init+0x98>)
 80008be:	f001 fa05 	bl	8001ccc <HAL_ADC_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008c8:	f000 fe9c 	bl	8001604 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80008cc:	2309      	movs	r3, #9
 80008ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008d0:	2301      	movs	r3, #1
 80008d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80008d4:	2301      	movs	r3, #1
 80008d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d8:	463b      	mov	r3, r7
 80008da:	4619      	mov	r1, r3
 80008dc:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_ADC1_Init+0x98>)
 80008de:	f001 fbb9 	bl	8002054 <HAL_ADC_ConfigChannel>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008e8:	f000 fe8c 	bl	8001604 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	200000b4 	.word	0x200000b4
 80008f8:	40012000 	.word	0x40012000
 80008fc:	0f000001 	.word	0x0f000001

08000900 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08e      	sub	sp, #56	; 0x38
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000906:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000914:	f107 0320 	add.w	r3, r7, #32
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]
 800092c:	615a      	str	r2, [r3, #20]
 800092e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000930:	4b2d      	ldr	r3, [pc, #180]	; (80009e8 <MX_TIM2_Init+0xe8>)
 8000932:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000936:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8000938:	4b2b      	ldr	r3, [pc, #172]	; (80009e8 <MX_TIM2_Init+0xe8>)
 800093a:	220f      	movs	r2, #15
 800093c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093e:	4b2a      	ldr	r3, [pc, #168]	; (80009e8 <MX_TIM2_Init+0xe8>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8000944:	4b28      	ldr	r3, [pc, #160]	; (80009e8 <MX_TIM2_Init+0xe8>)
 8000946:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800094a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800094c:	4b26      	ldr	r3, [pc, #152]	; (80009e8 <MX_TIM2_Init+0xe8>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000952:	4b25      	ldr	r3, [pc, #148]	; (80009e8 <MX_TIM2_Init+0xe8>)
 8000954:	2280      	movs	r2, #128	; 0x80
 8000956:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000958:	4823      	ldr	r0, [pc, #140]	; (80009e8 <MX_TIM2_Init+0xe8>)
 800095a:	f002 fda5 	bl	80034a8 <HAL_TIM_Base_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000964:	f000 fe4e 	bl	8001604 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800096e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000972:	4619      	mov	r1, r3
 8000974:	481c      	ldr	r0, [pc, #112]	; (80009e8 <MX_TIM2_Init+0xe8>)
 8000976:	f003 f977 	bl	8003c68 <HAL_TIM_ConfigClockSource>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000980:	f000 fe40 	bl	8001604 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000984:	4818      	ldr	r0, [pc, #96]	; (80009e8 <MX_TIM2_Init+0xe8>)
 8000986:	f002 fe9b 	bl	80036c0 <HAL_TIM_PWM_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000990:	f000 fe38 	bl	8001604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000994:	2300      	movs	r3, #0
 8000996:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800099c:	f107 0320 	add.w	r3, r7, #32
 80009a0:	4619      	mov	r1, r3
 80009a2:	4811      	ldr	r0, [pc, #68]	; (80009e8 <MX_TIM2_Init+0xe8>)
 80009a4:	f003 fd1c 	bl	80043e0 <HAL_TIMEx_MasterConfigSynchronization>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80009ae:	f000 fe29 	bl	8001604 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009b2:	2360      	movs	r3, #96	; 0x60
 80009b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 80009b6:	f240 13f3 	movw	r3, #499	; 0x1f3
 80009ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009bc:	2300      	movs	r3, #0
 80009be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	2200      	movs	r2, #0
 80009c8:	4619      	mov	r1, r3
 80009ca:	4807      	ldr	r0, [pc, #28]	; (80009e8 <MX_TIM2_Init+0xe8>)
 80009cc:	f003 f88a 	bl	8003ae4 <HAL_TIM_PWM_ConfigChannel>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80009d6:	f000 fe15 	bl	8001604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009da:	4803      	ldr	r0, [pc, #12]	; (80009e8 <MX_TIM2_Init+0xe8>)
 80009dc:	f000 fed6 	bl	800178c <HAL_TIM_MspPostInit>

}
 80009e0:	bf00      	nop
 80009e2:	3738      	adds	r7, #56	; 0x38
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	200000fc 	.word	0x200000fc

080009ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08e      	sub	sp, #56	; 0x38
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a00:	f107 0320 	add.w	r3, r7, #32
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
 8000a18:	615a      	str	r2, [r3, #20]
 8000a1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a1c:	4b32      	ldr	r3, [pc, #200]	; (8000ae8 <MX_TIM3_Init+0xfc>)
 8000a1e:	4a33      	ldr	r2, [pc, #204]	; (8000aec <MX_TIM3_Init+0x100>)
 8000a20:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8000a22:	4b31      	ldr	r3, [pc, #196]	; (8000ae8 <MX_TIM3_Init+0xfc>)
 8000a24:	220f      	movs	r2, #15
 8000a26:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a28:	4b2f      	ldr	r3, [pc, #188]	; (8000ae8 <MX_TIM3_Init+0xfc>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 8000a2e:	4b2e      	ldr	r3, [pc, #184]	; (8000ae8 <MX_TIM3_Init+0xfc>)
 8000a30:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000a34:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a36:	4b2c      	ldr	r3, [pc, #176]	; (8000ae8 <MX_TIM3_Init+0xfc>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a3c:	4b2a      	ldr	r3, [pc, #168]	; (8000ae8 <MX_TIM3_Init+0xfc>)
 8000a3e:	2280      	movs	r2, #128	; 0x80
 8000a40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a42:	4829      	ldr	r0, [pc, #164]	; (8000ae8 <MX_TIM3_Init+0xfc>)
 8000a44:	f002 fd30 	bl	80034a8 <HAL_TIM_Base_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000a4e:	f000 fdd9 	bl	8001604 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4822      	ldr	r0, [pc, #136]	; (8000ae8 <MX_TIM3_Init+0xfc>)
 8000a60:	f003 f902 	bl	8003c68 <HAL_TIM_ConfigClockSource>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000a6a:	f000 fdcb 	bl	8001604 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a6e:	481e      	ldr	r0, [pc, #120]	; (8000ae8 <MX_TIM3_Init+0xfc>)
 8000a70:	f002 fe26 	bl	80036c0 <HAL_TIM_PWM_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000a7a:	f000 fdc3 	bl	8001604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a86:	f107 0320 	add.w	r3, r7, #32
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4816      	ldr	r0, [pc, #88]	; (8000ae8 <MX_TIM3_Init+0xfc>)
 8000a8e:	f003 fca7 	bl	80043e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000a98:	f000 fdb4 	bl	8001604 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a9c:	2360      	movs	r3, #96	; 0x60
 8000a9e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	2200      	movs	r2, #0
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <MX_TIM3_Init+0xfc>)
 8000ab4:	f003 f816 	bl	8003ae4 <HAL_TIM_PWM_ConfigChannel>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000abe:	f000 fda1 	bl	8001604 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	2208      	movs	r2, #8
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4807      	ldr	r0, [pc, #28]	; (8000ae8 <MX_TIM3_Init+0xfc>)
 8000aca:	f003 f80b 	bl	8003ae4 <HAL_TIM_PWM_ConfigChannel>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000ad4:	f000 fd96 	bl	8001604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ad8:	4803      	ldr	r0, [pc, #12]	; (8000ae8 <MX_TIM3_Init+0xfc>)
 8000ada:	f000 fe57 	bl	800178c <HAL_TIM_MspPostInit>

}
 8000ade:	bf00      	nop
 8000ae0:	3738      	adds	r7, #56	; 0x38
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000144 	.word	0x20000144
 8000aec:	40000400 	.word	0x40000400

08000af0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000af6:	f107 0308 	add.w	r3, r7, #8
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b04:	463b      	mov	r3, r7
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b0c:	4b1d      	ldr	r3, [pc, #116]	; (8000b84 <MX_TIM5_Init+0x94>)
 8000b0e:	4a1e      	ldr	r2, [pc, #120]	; (8000b88 <MX_TIM5_Init+0x98>)
 8000b10:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16000-1;
 8000b12:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <MX_TIM5_Init+0x94>)
 8000b14:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000b18:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1a:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <MX_TIM5_Init+0x94>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8000b20:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <MX_TIM5_Init+0x94>)
 8000b22:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b26:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b28:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <MX_TIM5_Init+0x94>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b2e:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <MX_TIM5_Init+0x94>)
 8000b30:	2280      	movs	r2, #128	; 0x80
 8000b32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000b34:	4813      	ldr	r0, [pc, #76]	; (8000b84 <MX_TIM5_Init+0x94>)
 8000b36:	f002 fcb7 	bl	80034a8 <HAL_TIM_Base_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000b40:	f000 fd60 	bl	8001604 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000b4a:	f107 0308 	add.w	r3, r7, #8
 8000b4e:	4619      	mov	r1, r3
 8000b50:	480c      	ldr	r0, [pc, #48]	; (8000b84 <MX_TIM5_Init+0x94>)
 8000b52:	f003 f889 	bl	8003c68 <HAL_TIM_ConfigClockSource>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000b5c:	f000 fd52 	bl	8001604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b60:	2300      	movs	r3, #0
 8000b62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b64:	2300      	movs	r3, #0
 8000b66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000b68:	463b      	mov	r3, r7
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4805      	ldr	r0, [pc, #20]	; (8000b84 <MX_TIM5_Init+0x94>)
 8000b6e:	f003 fc37 	bl	80043e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000b78:	f000 fd44 	bl	8001604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  /* USER CODE END TIM5_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	3718      	adds	r7, #24
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	2000018c 	.word	0x2000018c
 8000b88:	40000c00 	.word	0x40000c00

08000b8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b90:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000b92:	4a12      	ldr	r2, [pc, #72]	; (8000bdc <MX_USART1_UART_Init+0x50>)
 8000b94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000b98:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000baa:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bb0:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb6:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bc2:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <MX_USART1_UART_Init+0x4c>)
 8000bc4:	f003 fc8e 	bl	80044e4 <HAL_UART_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bce:	f000 fd19 	bl	8001604 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	200001d4 	.word	0x200001d4
 8000bdc:	40011000 	.word	0x40011000

08000be0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000be6:	4a12      	ldr	r2, [pc, #72]	; (8000c30 <MX_USART2_UART_Init+0x50>)
 8000be8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000bec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bf0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c04:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000c06:	220c      	movs	r2, #12
 8000c08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c16:	4805      	ldr	r0, [pc, #20]	; (8000c2c <MX_USART2_UART_Init+0x4c>)
 8000c18:	f003 fc64 	bl	80044e4 <HAL_UART_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c22:	f000 fcef 	bl	8001604 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000218 	.word	0x20000218
 8000c30:	40004400 	.word	0x40004400

08000c34 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <MX_USART6_UART_Init+0x4c>)
 8000c3a:	4a12      	ldr	r2, [pc, #72]	; (8000c84 <MX_USART6_UART_Init+0x50>)
 8000c3c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <MX_USART6_UART_Init+0x4c>)
 8000c40:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c44:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <MX_USART6_UART_Init+0x4c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <MX_USART6_UART_Init+0x4c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <MX_USART6_UART_Init+0x4c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000c58:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <MX_USART6_UART_Init+0x4c>)
 8000c5a:	220c      	movs	r2, #12
 8000c5c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5e:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <MX_USART6_UART_Init+0x4c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <MX_USART6_UART_Init+0x4c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000c6a:	4805      	ldr	r0, [pc, #20]	; (8000c80 <MX_USART6_UART_Init+0x4c>)
 8000c6c:	f003 fc3a 	bl	80044e4 <HAL_UART_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000c76:	f000 fcc5 	bl	8001604 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	2000025c 	.word	0x2000025c
 8000c84:	40011400 	.word	0x40011400

08000c88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	; 0x28
 8000c8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
 8000c9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	4b52      	ldr	r3, [pc, #328]	; (8000dec <MX_GPIO_Init+0x164>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a51      	ldr	r2, [pc, #324]	; (8000dec <MX_GPIO_Init+0x164>)
 8000ca8:	f043 0304 	orr.w	r3, r3, #4
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b4f      	ldr	r3, [pc, #316]	; (8000dec <MX_GPIO_Init+0x164>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0304 	and.w	r3, r3, #4
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	4b4b      	ldr	r3, [pc, #300]	; (8000dec <MX_GPIO_Init+0x164>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a4a      	ldr	r2, [pc, #296]	; (8000dec <MX_GPIO_Init+0x164>)
 8000cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b48      	ldr	r3, [pc, #288]	; (8000dec <MX_GPIO_Init+0x164>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	4b44      	ldr	r3, [pc, #272]	; (8000dec <MX_GPIO_Init+0x164>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a43      	ldr	r2, [pc, #268]	; (8000dec <MX_GPIO_Init+0x164>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b41      	ldr	r3, [pc, #260]	; (8000dec <MX_GPIO_Init+0x164>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	4b3d      	ldr	r3, [pc, #244]	; (8000dec <MX_GPIO_Init+0x164>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a3c      	ldr	r2, [pc, #240]	; (8000dec <MX_GPIO_Init+0x164>)
 8000cfc:	f043 0302 	orr.w	r3, r3, #2
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b3a      	ldr	r3, [pc, #232]	; (8000dec <MX_GPIO_Init+0x164>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|BLU_Pin|GRN_Pin|RED_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f44f 51c9 	mov.w	r1, #6432	; 0x1920
 8000d14:	4836      	ldr	r0, [pc, #216]	; (8000df0 <MX_GPIO_Init+0x168>)
 8000d16:	f001 fee3 	bl	8002ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIGIT_B0_Pin|DIGIT_B1_Pin|DIGIT_B2_Pin|DIGIT_B3_Pin, GPIO_PIN_RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8000d20:	4834      	ldr	r0, [pc, #208]	; (8000df4 <MX_GPIO_Init+0x16c>)
 8000d22:	f001 fedd 	bl	8002ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIGIT_A0_Pin|DIGIT_A1_Pin|DIGIT_A2_Pin|DIGIT_A3_Pin, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	f44f 7158 	mov.w	r1, #864	; 0x360
 8000d2c:	4832      	ldr	r0, [pc, #200]	; (8000df8 <MX_GPIO_Init+0x170>)
 8000d2e:	f001 fed7 	bl	8002ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLU_PB_Pin */
  GPIO_InitStruct.Pin = BLU_PB_Pin;
 8000d32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d38:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLU_PB_GPIO_Port, &GPIO_InitStruct);
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	4619      	mov	r1, r3
 8000d48:	482a      	ldr	r0, [pc, #168]	; (8000df4 <MX_GPIO_Init+0x16c>)
 8000d4a:	f001 fd45 	bl	80027d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin BLU_Pin GRN_Pin RED_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|BLU_Pin|GRN_Pin|RED_Pin;
 8000d4e:	f44f 53c9 	mov.w	r3, #6432	; 0x1920
 8000d52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d54:	2301      	movs	r3, #1
 8000d56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	4619      	mov	r1, r3
 8000d66:	4822      	ldr	r0, [pc, #136]	; (8000df0 <MX_GPIO_Init+0x168>)
 8000d68:	f001 fd36 	bl	80027d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RPM_TICK_Pin */
  GPIO_InitStruct.Pin = RPM_TICK_Pin;
 8000d6c:	2304      	movs	r3, #4
 8000d6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d70:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RPM_TICK_GPIO_Port, &GPIO_InitStruct);
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	4619      	mov	r1, r3
 8000d80:	481d      	ldr	r0, [pc, #116]	; (8000df8 <MX_GPIO_Init+0x170>)
 8000d82:	f001 fd29 	bl	80027d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIGIT_B0_Pin DIGIT_B1_Pin DIGIT_B2_Pin DIGIT_B3_Pin */
  GPIO_InitStruct.Pin = DIGIT_B0_Pin|DIGIT_B1_Pin|DIGIT_B2_Pin|DIGIT_B3_Pin;
 8000d86:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8000d8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	2300      	movs	r3, #0
 8000d96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4815      	ldr	r0, [pc, #84]	; (8000df4 <MX_GPIO_Init+0x16c>)
 8000da0:	f001 fd1a 	bl	80027d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIGIT_A0_Pin DIGIT_A1_Pin DIGIT_A2_Pin DIGIT_A3_Pin */
  GPIO_InitStruct.Pin = DIGIT_A0_Pin|DIGIT_A1_Pin|DIGIT_A2_Pin|DIGIT_A3_Pin;
 8000da4:	f44f 7358 	mov.w	r3, #864	; 0x360
 8000da8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000daa:	2301      	movs	r3, #1
 8000dac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	2300      	movs	r3, #0
 8000db4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4619      	mov	r1, r3
 8000dbc:	480e      	ldr	r0, [pc, #56]	; (8000df8 <MX_GPIO_Init+0x170>)
 8000dbe:	f001 fd0b 	bl	80027d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	2008      	movs	r0, #8
 8000dc8:	f001 fc3d 	bl	8002646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000dcc:	2008      	movs	r0, #8
 8000dce:	f001 fc56 	bl	800267e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2028      	movs	r0, #40	; 0x28
 8000dd8:	f001 fc35 	bl	8002646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ddc:	2028      	movs	r0, #40	; 0x28
 8000dde:	f001 fc4e 	bl	800267e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000de2:	bf00      	nop
 8000de4:	3728      	adds	r7, #40	; 0x28
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40020000 	.word	0x40020000
 8000df4:	40020800 	.word	0x40020800
 8000df8:	40020400 	.word	0x40020400

08000dfc <DIGITS_Display>:

/* USER CODE BEGIN 4 */
void DIGITS_Display(uint8_t DIGIT_A, uint8_t DIGIT_B)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08c      	sub	sp, #48	; 0x30
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	460a      	mov	r2, r1
 8000e06:	71fb      	strb	r3, [r7, #7]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	71bb      	strb	r3, [r7, #6]
	uint8_t DIGITA_VAL = 0x0F & DIGIT_A; //mask off higher4 bits
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	f003 030f 	and.w	r3, r3, #15
 8000e12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	int Abit0 = (DIGITA_VAL ) & 1;  	// extract Abit0 of the 4-bit value
 8000e16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	62bb      	str	r3, [r7, #40]	; 0x28
	int Abit1 = (DIGITA_VAL >> 1) & 1;  // extract Abit1 of the 4-bit value
 8000e20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e24:	085b      	lsrs	r3, r3, #1
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
	int Abit2 = (DIGITA_VAL >> 2) & 1;  // extract Abit2 of the 4-bit value
 8000e2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e32:	089b      	lsrs	r3, r3, #2
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	623b      	str	r3, [r7, #32]
	int Abit3 = (DIGITA_VAL >> 3) & 1;  // extract Abit3 of the 4-bit value
 8000e3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e40:	08db      	lsrs	r3, r3, #3
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	61fb      	str	r3, [r7, #28]

	uint8_t DIGITB_VAL = 0x0F & DIGIT_B; //mask off higher4 bits
 8000e4a:	79bb      	ldrb	r3, [r7, #6]
 8000e4c:	f003 030f 	and.w	r3, r3, #15
 8000e50:	76fb      	strb	r3, [r7, #27]
	int Bbit0 = (DIGITB_VAL ) & 1;  	// extract Bbit0 of the 4-bit value
 8000e52:	7efb      	ldrb	r3, [r7, #27]
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	617b      	str	r3, [r7, #20]
	int Bbit1 = (DIGITB_VAL >> 1) & 1;  // extract Bbit1 of the 4-bit value
 8000e5a:	7efb      	ldrb	r3, [r7, #27]
 8000e5c:	085b      	lsrs	r3, r3, #1
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	613b      	str	r3, [r7, #16]
	int Bbit2 = (DIGITB_VAL >> 2) & 1;  // extract Bbit2 of the 4-bit value
 8000e66:	7efb      	ldrb	r3, [r7, #27]
 8000e68:	089b      	lsrs	r3, r3, #2
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	f003 0301 	and.w	r3, r3, #1
 8000e70:	60fb      	str	r3, [r7, #12]
	int Bbit3 = (DIGITB_VAL >> 3) & 1;  // extract Bbit3 of the 4-bit value
 8000e72:	7efb      	ldrb	r3, [r7, #27]
 8000e74:	08db      	lsrs	r3, r3, #3
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	60bb      	str	r3, [r7, #8]

	if (Abit0 == (0))
 8000e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d105      	bne.n	8000e90 <DIGITS_Display+0x94>
	{
	 HAL_GPIO_WritePin(GPIOB, DIGIT_A0_Pin, GPIO_PIN_RESET);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2120      	movs	r1, #32
 8000e88:	483d      	ldr	r0, [pc, #244]	; (8000f80 <DIGITS_Display+0x184>)
 8000e8a:	f001 fe29 	bl	8002ae0 <HAL_GPIO_WritePin>
 8000e8e:	e004      	b.n	8000e9a <DIGITS_Display+0x9e>
	}
	else
	{
	 HAL_GPIO_WritePin(GPIOB, DIGIT_A0_Pin, GPIO_PIN_SET);
 8000e90:	2201      	movs	r2, #1
 8000e92:	2120      	movs	r1, #32
 8000e94:	483a      	ldr	r0, [pc, #232]	; (8000f80 <DIGITS_Display+0x184>)
 8000e96:	f001 fe23 	bl	8002ae0 <HAL_GPIO_WritePin>

	}
	if (Abit1 == (0))
 8000e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d105      	bne.n	8000eac <DIGITS_Display+0xb0>
	{
	 HAL_GPIO_WritePin(GPIOB, DIGIT_A1_Pin, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2140      	movs	r1, #64	; 0x40
 8000ea4:	4836      	ldr	r0, [pc, #216]	; (8000f80 <DIGITS_Display+0x184>)
 8000ea6:	f001 fe1b 	bl	8002ae0 <HAL_GPIO_WritePin>
 8000eaa:	e004      	b.n	8000eb6 <DIGITS_Display+0xba>
	}
	else
	{
	 HAL_GPIO_WritePin(GPIOB, DIGIT_A1_Pin, GPIO_PIN_SET);
 8000eac:	2201      	movs	r2, #1
 8000eae:	2140      	movs	r1, #64	; 0x40
 8000eb0:	4833      	ldr	r0, [pc, #204]	; (8000f80 <DIGITS_Display+0x184>)
 8000eb2:	f001 fe15 	bl	8002ae0 <HAL_GPIO_WritePin>

	}
	if (Abit2 == (0))
 8000eb6:	6a3b      	ldr	r3, [r7, #32]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d106      	bne.n	8000eca <DIGITS_Display+0xce>
	{
	 HAL_GPIO_WritePin(GPIOB, DIGIT_A2_Pin, GPIO_PIN_RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ec2:	482f      	ldr	r0, [pc, #188]	; (8000f80 <DIGITS_Display+0x184>)
 8000ec4:	f001 fe0c 	bl	8002ae0 <HAL_GPIO_WritePin>
 8000ec8:	e005      	b.n	8000ed6 <DIGITS_Display+0xda>
	}
	else
	{
	 HAL_GPIO_WritePin(GPIOB, DIGIT_A2_Pin, GPIO_PIN_SET);
 8000eca:	2201      	movs	r2, #1
 8000ecc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed0:	482b      	ldr	r0, [pc, #172]	; (8000f80 <DIGITS_Display+0x184>)
 8000ed2:	f001 fe05 	bl	8002ae0 <HAL_GPIO_WritePin>

	}
	if (Abit3 == (0))
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d106      	bne.n	8000eea <DIGITS_Display+0xee>
	{
	 HAL_GPIO_WritePin(GPIOB, DIGIT_A3_Pin, GPIO_PIN_RESET);
 8000edc:	2200      	movs	r2, #0
 8000ede:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ee2:	4827      	ldr	r0, [pc, #156]	; (8000f80 <DIGITS_Display+0x184>)
 8000ee4:	f001 fdfc 	bl	8002ae0 <HAL_GPIO_WritePin>
 8000ee8:	e005      	b.n	8000ef6 <DIGITS_Display+0xfa>
	}
	else
	{
	 HAL_GPIO_WritePin(GPIOB, DIGIT_A3_Pin, GPIO_PIN_SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ef0:	4823      	ldr	r0, [pc, #140]	; (8000f80 <DIGITS_Display+0x184>)
 8000ef2:	f001 fdf5 	bl	8002ae0 <HAL_GPIO_WritePin>

	}


	if (Bbit0 == (0))
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d106      	bne.n	8000f0a <DIGITS_Display+0x10e>
	{
	 HAL_GPIO_WritePin(GPIOC, DIGIT_B0_Pin, GPIO_PIN_RESET);
 8000efc:	2200      	movs	r2, #0
 8000efe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f02:	4820      	ldr	r0, [pc, #128]	; (8000f84 <DIGITS_Display+0x188>)
 8000f04:	f001 fdec 	bl	8002ae0 <HAL_GPIO_WritePin>
 8000f08:	e005      	b.n	8000f16 <DIGITS_Display+0x11a>
	}
	else
	{
	 HAL_GPIO_WritePin(GPIOC, DIGIT_B0_Pin, GPIO_PIN_SET);
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f10:	481c      	ldr	r0, [pc, #112]	; (8000f84 <DIGITS_Display+0x188>)
 8000f12:	f001 fde5 	bl	8002ae0 <HAL_GPIO_WritePin>

	}
	if (Bbit1 == (0))
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d106      	bne.n	8000f2a <DIGITS_Display+0x12e>
	{
	 HAL_GPIO_WritePin(GPIOC, DIGIT_B1_Pin, GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f22:	4818      	ldr	r0, [pc, #96]	; (8000f84 <DIGITS_Display+0x188>)
 8000f24:	f001 fddc 	bl	8002ae0 <HAL_GPIO_WritePin>
 8000f28:	e005      	b.n	8000f36 <DIGITS_Display+0x13a>
	}
	else
	{
	 HAL_GPIO_WritePin(GPIOC, DIGIT_B1_Pin, GPIO_PIN_SET);
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f30:	4814      	ldr	r0, [pc, #80]	; (8000f84 <DIGITS_Display+0x188>)
 8000f32:	f001 fdd5 	bl	8002ae0 <HAL_GPIO_WritePin>

	}
	if (Bbit2 == (0))
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d106      	bne.n	8000f4a <DIGITS_Display+0x14e>
	{
	 HAL_GPIO_WritePin(GPIOC, DIGIT_B2_Pin, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f42:	4810      	ldr	r0, [pc, #64]	; (8000f84 <DIGITS_Display+0x188>)
 8000f44:	f001 fdcc 	bl	8002ae0 <HAL_GPIO_WritePin>
 8000f48:	e005      	b.n	8000f56 <DIGITS_Display+0x15a>
	}
	else
	{
	 HAL_GPIO_WritePin(GPIOC, DIGIT_B2_Pin, GPIO_PIN_SET);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f50:	480c      	ldr	r0, [pc, #48]	; (8000f84 <DIGITS_Display+0x188>)
 8000f52:	f001 fdc5 	bl	8002ae0 <HAL_GPIO_WritePin>

	}
	if (Bbit3 == (0))
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d106      	bne.n	8000f6a <DIGITS_Display+0x16e>
	{
	 HAL_GPIO_WritePin(GPIOC, DIGIT_B3_Pin, GPIO_PIN_RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f62:	4808      	ldr	r0, [pc, #32]	; (8000f84 <DIGITS_Display+0x188>)
 8000f64:	f001 fdbc 	bl	8002ae0 <HAL_GPIO_WritePin>
	}
	else
	{
	 HAL_GPIO_WritePin(GPIOC, DIGIT_B3_Pin, GPIO_PIN_SET);
	}
}
 8000f68:	e005      	b.n	8000f76 <DIGITS_Display+0x17a>
	 HAL_GPIO_WritePin(GPIOC, DIGIT_B3_Pin, GPIO_PIN_SET);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f70:	4804      	ldr	r0, [pc, #16]	; (8000f84 <DIGITS_Display+0x188>)
 8000f72:	f001 fdb5 	bl	8002ae0 <HAL_GPIO_WritePin>
}
 8000f76:	bf00      	nop
 8000f78:	3730      	adds	r7, #48	; 0x30
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40020400 	.word	0x40020400
 8000f84:	40020800 	.word	0x40020800

08000f88 <ADC_Select_CH>:

void ADC_Select_CH(int CH)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f90:	f107 0308 	add.w	r3, r7, #8
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
	switch(CH)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b0f      	cmp	r3, #15
 8000fa2:	f200 814b 	bhi.w	800123c <ADC_Select_CH+0x2b4>
 8000fa6:	a201      	add	r2, pc, #4	; (adr r2, 8000fac <ADC_Select_CH+0x24>)
 8000fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fac:	08000fed 	.word	0x08000fed
 8000fb0:	0800100f 	.word	0x0800100f
 8000fb4:	08001031 	.word	0x08001031
 8000fb8:	08001053 	.word	0x08001053
 8000fbc:	08001075 	.word	0x08001075
 8000fc0:	08001097 	.word	0x08001097
 8000fc4:	080010b9 	.word	0x080010b9
 8000fc8:	080010db 	.word	0x080010db
 8000fcc:	080010fd 	.word	0x080010fd
 8000fd0:	0800111f 	.word	0x0800111f
 8000fd4:	0800113f 	.word	0x0800113f
 8000fd8:	0800115f 	.word	0x0800115f
 8000fdc:	0800117f 	.word	0x0800117f
 8000fe0:	0800119f 	.word	0x0800119f
 8000fe4:	080011bf 	.word	0x080011bf
 8000fe8:	080011df 	.word	0x080011df
	{
	case 0:
	sConfig.Channel = ADC_CHANNEL_0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff4:	f107 0308 	add.w	r3, r7, #8
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4892      	ldr	r0, [pc, #584]	; (8001244 <ADC_Select_CH+0x2bc>)
 8000ffc:	f001 f82a 	bl	8002054 <HAL_ADC_ConfigChannel>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	f000 80fb 	beq.w	80011fe <ADC_Select_CH+0x276>
	{
	Error_Handler();
 8001008:	f000 fafc 	bl	8001604 <Error_Handler>
	}
	break;
 800100c:	e0f7      	b.n	80011fe <ADC_Select_CH+0x276>
	case 1:
	sConfig.Channel = ADC_CHANNEL_1;
 800100e:	2301      	movs	r3, #1
 8001010:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001012:	2301      	movs	r3, #1
 8001014:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001016:	f107 0308 	add.w	r3, r7, #8
 800101a:	4619      	mov	r1, r3
 800101c:	4889      	ldr	r0, [pc, #548]	; (8001244 <ADC_Select_CH+0x2bc>)
 800101e:	f001 f819 	bl	8002054 <HAL_ADC_ConfigChannel>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	f000 80ec 	beq.w	8001202 <ADC_Select_CH+0x27a>
	{
	Error_Handler();
 800102a:	f000 faeb 	bl	8001604 <Error_Handler>
	}
	break;
 800102e:	e0e8      	b.n	8001202 <ADC_Select_CH+0x27a>
	case 2:
	sConfig.Channel = ADC_CHANNEL_2;
 8001030:	2302      	movs	r3, #2
 8001032:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001034:	2301      	movs	r3, #1
 8001036:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001038:	f107 0308 	add.w	r3, r7, #8
 800103c:	4619      	mov	r1, r3
 800103e:	4881      	ldr	r0, [pc, #516]	; (8001244 <ADC_Select_CH+0x2bc>)
 8001040:	f001 f808 	bl	8002054 <HAL_ADC_ConfigChannel>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	f000 80dd 	beq.w	8001206 <ADC_Select_CH+0x27e>
	{
	Error_Handler();
 800104c:	f000 fada 	bl	8001604 <Error_Handler>
	}
	break;
 8001050:	e0d9      	b.n	8001206 <ADC_Select_CH+0x27e>
	case 3:
	sConfig.Channel = ADC_CHANNEL_3;
 8001052:	2303      	movs	r3, #3
 8001054:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001056:	2301      	movs	r3, #1
 8001058:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800105a:	f107 0308 	add.w	r3, r7, #8
 800105e:	4619      	mov	r1, r3
 8001060:	4878      	ldr	r0, [pc, #480]	; (8001244 <ADC_Select_CH+0x2bc>)
 8001062:	f000 fff7 	bl	8002054 <HAL_ADC_ConfigChannel>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	f000 80ce 	beq.w	800120a <ADC_Select_CH+0x282>
	{
	Error_Handler();
 800106e:	f000 fac9 	bl	8001604 <Error_Handler>
	}
	break;
 8001072:	e0ca      	b.n	800120a <ADC_Select_CH+0x282>
	case 4:
	sConfig.Channel = ADC_CHANNEL_4;
 8001074:	2304      	movs	r3, #4
 8001076:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001078:	2301      	movs	r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800107c:	f107 0308 	add.w	r3, r7, #8
 8001080:	4619      	mov	r1, r3
 8001082:	4870      	ldr	r0, [pc, #448]	; (8001244 <ADC_Select_CH+0x2bc>)
 8001084:	f000 ffe6 	bl	8002054 <HAL_ADC_ConfigChannel>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	f000 80bf 	beq.w	800120e <ADC_Select_CH+0x286>
	{
	Error_Handler();
 8001090:	f000 fab8 	bl	8001604 <Error_Handler>
	}
	break;
 8001094:	e0bb      	b.n	800120e <ADC_Select_CH+0x286>
	case 5:
	sConfig.Channel = ADC_CHANNEL_5;
 8001096:	2305      	movs	r3, #5
 8001098:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 800109a:	2301      	movs	r3, #1
 800109c:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800109e:	f107 0308 	add.w	r3, r7, #8
 80010a2:	4619      	mov	r1, r3
 80010a4:	4867      	ldr	r0, [pc, #412]	; (8001244 <ADC_Select_CH+0x2bc>)
 80010a6:	f000 ffd5 	bl	8002054 <HAL_ADC_ConfigChannel>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	f000 80b0 	beq.w	8001212 <ADC_Select_CH+0x28a>
	{
	Error_Handler();
 80010b2:	f000 faa7 	bl	8001604 <Error_Handler>
	}
	break;
 80010b6:	e0ac      	b.n	8001212 <ADC_Select_CH+0x28a>
	case 6:
	sConfig.Channel = ADC_CHANNEL_6;
 80010b8:	2306      	movs	r3, #6
 80010ba:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80010bc:	2301      	movs	r3, #1
 80010be:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c0:	f107 0308 	add.w	r3, r7, #8
 80010c4:	4619      	mov	r1, r3
 80010c6:	485f      	ldr	r0, [pc, #380]	; (8001244 <ADC_Select_CH+0x2bc>)
 80010c8:	f000 ffc4 	bl	8002054 <HAL_ADC_ConfigChannel>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f000 80a1 	beq.w	8001216 <ADC_Select_CH+0x28e>
	{
	Error_Handler();
 80010d4:	f000 fa96 	bl	8001604 <Error_Handler>
	}
	break;
 80010d8:	e09d      	b.n	8001216 <ADC_Select_CH+0x28e>
	case 7:
	sConfig.Channel = ADC_CHANNEL_7;
 80010da:	2307      	movs	r3, #7
 80010dc:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80010de:	2301      	movs	r3, #1
 80010e0:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e2:	f107 0308 	add.w	r3, r7, #8
 80010e6:	4619      	mov	r1, r3
 80010e8:	4856      	ldr	r0, [pc, #344]	; (8001244 <ADC_Select_CH+0x2bc>)
 80010ea:	f000 ffb3 	bl	8002054 <HAL_ADC_ConfigChannel>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	f000 8092 	beq.w	800121a <ADC_Select_CH+0x292>
	{
	Error_Handler();
 80010f6:	f000 fa85 	bl	8001604 <Error_Handler>
	}
	break;
 80010fa:	e08e      	b.n	800121a <ADC_Select_CH+0x292>
	case 8:
	sConfig.Channel = ADC_CHANNEL_8;
 80010fc:	2308      	movs	r3, #8
 80010fe:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001100:	2301      	movs	r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001104:	f107 0308 	add.w	r3, r7, #8
 8001108:	4619      	mov	r1, r3
 800110a:	484e      	ldr	r0, [pc, #312]	; (8001244 <ADC_Select_CH+0x2bc>)
 800110c:	f000 ffa2 	bl	8002054 <HAL_ADC_ConfigChannel>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	f000 8083 	beq.w	800121e <ADC_Select_CH+0x296>
	{
	Error_Handler();
 8001118:	f000 fa74 	bl	8001604 <Error_Handler>
	}
	break;
 800111c:	e07f      	b.n	800121e <ADC_Select_CH+0x296>
	case 9:
	sConfig.Channel = ADC_CHANNEL_9;
 800111e:	2309      	movs	r3, #9
 8001120:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001122:	2301      	movs	r3, #1
 8001124:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001126:	f107 0308 	add.w	r3, r7, #8
 800112a:	4619      	mov	r1, r3
 800112c:	4845      	ldr	r0, [pc, #276]	; (8001244 <ADC_Select_CH+0x2bc>)
 800112e:	f000 ff91 	bl	8002054 <HAL_ADC_ConfigChannel>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d074      	beq.n	8001222 <ADC_Select_CH+0x29a>
	{
	Error_Handler();
 8001138:	f000 fa64 	bl	8001604 <Error_Handler>
	}
	break;
 800113c:	e071      	b.n	8001222 <ADC_Select_CH+0x29a>
	case 10:
	sConfig.Channel = ADC_CHANNEL_10;
 800113e:	230a      	movs	r3, #10
 8001140:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001142:	2301      	movs	r3, #1
 8001144:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001146:	f107 0308 	add.w	r3, r7, #8
 800114a:	4619      	mov	r1, r3
 800114c:	483d      	ldr	r0, [pc, #244]	; (8001244 <ADC_Select_CH+0x2bc>)
 800114e:	f000 ff81 	bl	8002054 <HAL_ADC_ConfigChannel>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d066      	beq.n	8001226 <ADC_Select_CH+0x29e>
	{
	Error_Handler();
 8001158:	f000 fa54 	bl	8001604 <Error_Handler>
	}
	break;
 800115c:	e063      	b.n	8001226 <ADC_Select_CH+0x29e>
	case 11:
	sConfig.Channel = ADC_CHANNEL_11;
 800115e:	230b      	movs	r3, #11
 8001160:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001162:	2301      	movs	r3, #1
 8001164:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001166:	f107 0308 	add.w	r3, r7, #8
 800116a:	4619      	mov	r1, r3
 800116c:	4835      	ldr	r0, [pc, #212]	; (8001244 <ADC_Select_CH+0x2bc>)
 800116e:	f000 ff71 	bl	8002054 <HAL_ADC_ConfigChannel>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d058      	beq.n	800122a <ADC_Select_CH+0x2a2>
	{
	Error_Handler();
 8001178:	f000 fa44 	bl	8001604 <Error_Handler>
	}
	break;
 800117c:	e055      	b.n	800122a <ADC_Select_CH+0x2a2>
	case 12:
	sConfig.Channel = ADC_CHANNEL_12;
 800117e:	230c      	movs	r3, #12
 8001180:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001182:	2301      	movs	r3, #1
 8001184:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001186:	f107 0308 	add.w	r3, r7, #8
 800118a:	4619      	mov	r1, r3
 800118c:	482d      	ldr	r0, [pc, #180]	; (8001244 <ADC_Select_CH+0x2bc>)
 800118e:	f000 ff61 	bl	8002054 <HAL_ADC_ConfigChannel>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d04a      	beq.n	800122e <ADC_Select_CH+0x2a6>
	{
	Error_Handler();
 8001198:	f000 fa34 	bl	8001604 <Error_Handler>
	}
	break;
 800119c:	e047      	b.n	800122e <ADC_Select_CH+0x2a6>
	case 13:
	sConfig.Channel = ADC_CHANNEL_13;
 800119e:	230d      	movs	r3, #13
 80011a0:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80011a2:	2301      	movs	r3, #1
 80011a4:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011a6:	f107 0308 	add.w	r3, r7, #8
 80011aa:	4619      	mov	r1, r3
 80011ac:	4825      	ldr	r0, [pc, #148]	; (8001244 <ADC_Select_CH+0x2bc>)
 80011ae:	f000 ff51 	bl	8002054 <HAL_ADC_ConfigChannel>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d03c      	beq.n	8001232 <ADC_Select_CH+0x2aa>
	{
	Error_Handler();
 80011b8:	f000 fa24 	bl	8001604 <Error_Handler>
	}
	break;
 80011bc:	e039      	b.n	8001232 <ADC_Select_CH+0x2aa>
	case 14:
	sConfig.Channel = ADC_CHANNEL_14;
 80011be:	230e      	movs	r3, #14
 80011c0:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80011c2:	2301      	movs	r3, #1
 80011c4:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	4619      	mov	r1, r3
 80011cc:	481d      	ldr	r0, [pc, #116]	; (8001244 <ADC_Select_CH+0x2bc>)
 80011ce:	f000 ff41 	bl	8002054 <HAL_ADC_ConfigChannel>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d02e      	beq.n	8001236 <ADC_Select_CH+0x2ae>
	{
	Error_Handler();
 80011d8:	f000 fa14 	bl	8001604 <Error_Handler>
	}
	break;
 80011dc:	e02b      	b.n	8001236 <ADC_Select_CH+0x2ae>
	case 15:
	sConfig.Channel = ADC_CHANNEL_15;
 80011de:	230f      	movs	r3, #15
 80011e0:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80011e2:	2301      	movs	r3, #1
 80011e4:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011e6:	f107 0308 	add.w	r3, r7, #8
 80011ea:	4619      	mov	r1, r3
 80011ec:	4815      	ldr	r0, [pc, #84]	; (8001244 <ADC_Select_CH+0x2bc>)
 80011ee:	f000 ff31 	bl	8002054 <HAL_ADC_ConfigChannel>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d020      	beq.n	800123a <ADC_Select_CH+0x2b2>
	{
	Error_Handler();
 80011f8:	f000 fa04 	bl	8001604 <Error_Handler>
	}
	break;
 80011fc:	e01d      	b.n	800123a <ADC_Select_CH+0x2b2>
	break;
 80011fe:	bf00      	nop
 8001200:	e01c      	b.n	800123c <ADC_Select_CH+0x2b4>
	break;
 8001202:	bf00      	nop
 8001204:	e01a      	b.n	800123c <ADC_Select_CH+0x2b4>
	break;
 8001206:	bf00      	nop
 8001208:	e018      	b.n	800123c <ADC_Select_CH+0x2b4>
	break;
 800120a:	bf00      	nop
 800120c:	e016      	b.n	800123c <ADC_Select_CH+0x2b4>
	break;
 800120e:	bf00      	nop
 8001210:	e014      	b.n	800123c <ADC_Select_CH+0x2b4>
	break;
 8001212:	bf00      	nop
 8001214:	e012      	b.n	800123c <ADC_Select_CH+0x2b4>
	break;
 8001216:	bf00      	nop
 8001218:	e010      	b.n	800123c <ADC_Select_CH+0x2b4>
	break;
 800121a:	bf00      	nop
 800121c:	e00e      	b.n	800123c <ADC_Select_CH+0x2b4>
	break;
 800121e:	bf00      	nop
 8001220:	e00c      	b.n	800123c <ADC_Select_CH+0x2b4>
	break;
 8001222:	bf00      	nop
 8001224:	e00a      	b.n	800123c <ADC_Select_CH+0x2b4>
	break;
 8001226:	bf00      	nop
 8001228:	e008      	b.n	800123c <ADC_Select_CH+0x2b4>
	break;
 800122a:	bf00      	nop
 800122c:	e006      	b.n	800123c <ADC_Select_CH+0x2b4>
	break;
 800122e:	bf00      	nop
 8001230:	e004      	b.n	800123c <ADC_Select_CH+0x2b4>
	break;
 8001232:	bf00      	nop
 8001234:	e002      	b.n	800123c <ADC_Select_CH+0x2b4>
	break;
 8001236:	bf00      	nop
 8001238:	e000      	b.n	800123c <ADC_Select_CH+0x2b4>
	break;
 800123a:	bf00      	nop
	}
}
 800123c:	bf00      	nop
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200000b4 	.word	0x200000b4

08001248 <UART_Parse_MSG>:

void UART_Parse_MSG(char *option_msg, char *msg, volatile uint8_t *Zone, unsigned int input_char_num)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b0b6      	sub	sp, #216	; 0xd8
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
 8001254:	603b      	str	r3, [r7, #0]
	user_input_flag = 0;
 8001256:	4b40      	ldr	r3, [pc, #256]	; (8001358 <UART_Parse_MSG+0x110>)
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]
  uint8_t txd_msg_buffer[64] = {0};
 800125c:	2300      	movs	r3, #0
 800125e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001262:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001266:	223c      	movs	r2, #60	; 0x3c
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f004 fa62 	bl	8005734 <memset>
  uint8_t option_buffer[128] = {0};
 8001270:	2300      	movs	r3, #0
 8001272:	61bb      	str	r3, [r7, #24]
 8001274:	f107 031c 	add.w	r3, r7, #28
 8001278:	227c      	movs	r2, #124	; 0x7c
 800127a:	2100      	movs	r1, #0
 800127c:	4618      	mov	r0, r3
 800127e:	f004 fa59 	bl	8005734 <memset>
  uint8_t temp_zone[4] = {0};
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]

  memset(temp_zone, 0, sizeof(temp_zone));
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	2204      	movs	r2, #4
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f004 fa50 	bl	8005734 <memset>

  sprintf((char*)txd_msg_buffer, "%s", msg);
 8001294:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001298:	68ba      	ldr	r2, [r7, #8]
 800129a:	4930      	ldr	r1, [pc, #192]	; (800135c <UART_Parse_MSG+0x114>)
 800129c:	4618      	mov	r0, r3
 800129e:	f004 fa29 	bl	80056f4 <siprintf>
  sprintf((char*)option_buffer, "%s", option_msg);
 80012a2:	f107 0318 	add.w	r3, r7, #24
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	492c      	ldr	r1, [pc, #176]	; (800135c <UART_Parse_MSG+0x114>)
 80012aa:	4618      	mov	r0, r3
 80012ac:	f004 fa22 	bl	80056f4 <siprintf>
  // Send the prompt to the user
  HAL_UART_Transmit(&huart6, option_buffer, strlen((char*)option_buffer), 1000);
 80012b0:	f107 0318 	add.w	r3, r7, #24
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7fe ff93 	bl	80001e0 <strlen>
 80012ba:	4603      	mov	r3, r0
 80012bc:	b29a      	uxth	r2, r3
 80012be:	f107 0118 	add.w	r1, r7, #24
 80012c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c6:	4826      	ldr	r0, [pc, #152]	; (8001360 <UART_Parse_MSG+0x118>)
 80012c8:	f003 f959 	bl	800457e <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 80012cc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7fe ff85 	bl	80001e0 <strlen>
 80012d6:	4603      	mov	r3, r0
 80012d8:	b29a      	uxth	r2, r3
 80012da:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80012de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e2:	481f      	ldr	r0, [pc, #124]	; (8001360 <UART_Parse_MSG+0x118>)
 80012e4:	f003 f94b 	bl	800457e <HAL_UART_Transmit>
  // Initialize user input interrupt to write input to PWM_Zone
  HAL_UART_Receive_IT(&huart6, temp_zone, input_char_num);
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	4619      	mov	r1, r3
 80012f2:	481b      	ldr	r0, [pc, #108]	; (8001360 <UART_Parse_MSG+0x118>)
 80012f4:	f003 f9d5 	bl	80046a2 <HAL_UART_Receive_IT>
  // Wait for the reception to complete
  while(user_input_flag == 0) {};
 80012f8:	bf00      	nop
 80012fa:	4b17      	ldr	r3, [pc, #92]	; (8001358 <UART_Parse_MSG+0x110>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d0fb      	beq.n	80012fa <UART_Parse_MSG+0xb2>
  temp_zone[input_char_num] = '\0';
 8001302:	f107 0214 	add.w	r2, r7, #20
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	4413      	add	r3, r2
 800130a:	2200      	movs	r2, #0
 800130c:	701a      	strb	r2, [r3, #0]
  // Convert received data
  *Zone = atoi((const char *)temp_zone);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4618      	mov	r0, r3
 8001314:	f004 f95e 	bl	80055d4 <atoi>
 8001318:	4603      	mov	r3, r0
 800131a:	b2da      	uxtb	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	701a      	strb	r2, [r3, #0]
  // Echo the received byte back to UART to confirm reception
  sprintf((char*)txd_msg_buffer, "%i", *Zone);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	b2db      	uxtb	r3, r3
 8001326:	461a      	mov	r2, r3
 8001328:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800132c:	490d      	ldr	r1, [pc, #52]	; (8001364 <UART_Parse_MSG+0x11c>)
 800132e:	4618      	mov	r0, r3
 8001330:	f004 f9e0 	bl	80056f4 <siprintf>
  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 8001334:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001338:	4618      	mov	r0, r3
 800133a:	f7fe ff51 	bl	80001e0 <strlen>
 800133e:	4603      	mov	r3, r0
 8001340:	b29a      	uxth	r2, r3
 8001342:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8001346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134a:	4805      	ldr	r0, [pc, #20]	; (8001360 <UART_Parse_MSG+0x118>)
 800134c:	f003 f917 	bl	800457e <HAL_UART_Transmit>
}
 8001350:	bf00      	nop
 8001352:	37d8      	adds	r7, #216	; 0xd8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	2000007c 	.word	0x2000007c
 800135c:	08006350 	.word	0x08006350
 8001360:	2000025c 	.word	0x2000025c
 8001364:	08006354 	.word	0x08006354

08001368 <UART_Send_MSG>:

void UART_Send_MSG(char* msg)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b092      	sub	sp, #72	; 0x48
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	uint8_t msg_buffer[64] = {0};
 8001370:	2300      	movs	r3, #0
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	223c      	movs	r2, #60	; 0x3c
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f004 f9d9 	bl	8005734 <memset>
	sprintf((char*)msg_buffer, "%s", msg);
 8001382:	f107 0308 	add.w	r3, r7, #8
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	490a      	ldr	r1, [pc, #40]	; (80013b4 <UART_Send_MSG+0x4c>)
 800138a:	4618      	mov	r0, r3
 800138c:	f004 f9b2 	bl	80056f4 <siprintf>
	HAL_UART_Transmit(&huart6, msg_buffer, strlen((char*)msg_buffer), 1000);
 8001390:	f107 0308 	add.w	r3, r7, #8
 8001394:	4618      	mov	r0, r3
 8001396:	f7fe ff23 	bl	80001e0 <strlen>
 800139a:	4603      	mov	r3, r0
 800139c:	b29a      	uxth	r2, r3
 800139e:	f107 0108 	add.w	r1, r7, #8
 80013a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a6:	4804      	ldr	r0, [pc, #16]	; (80013b8 <UART_Send_MSG+0x50>)
 80013a8:	f003 f8e9 	bl	800457e <HAL_UART_Transmit>
}
 80013ac:	bf00      	nop
 80013ae:	3748      	adds	r7, #72	; 0x48
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	08006350 	.word	0x08006350
 80013b8:	2000025c 	.word	0x2000025c

080013bc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART6) {
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a09      	ldr	r2, [pc, #36]	; (80013f0 <HAL_UART_RxCpltCallback+0x34>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d102      	bne.n	80013d4 <HAL_UART_RxCpltCallback+0x18>
		user_input_flag = 1;
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <HAL_UART_RxCpltCallback+0x38>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	701a      	strb	r2, [r3, #0]
	}

	if (huart->Instance == USART1)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a07      	ldr	r2, [pc, #28]	; (80013f8 <HAL_UART_RxCpltCallback+0x3c>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d102      	bne.n	80013e4 <HAL_UART_RxCpltCallback+0x28>
	{
		us100_Rx_flag = 01; //this flag is set to show that an receiver interrupt has occurred
 80013de:	4b07      	ldr	r3, [pc, #28]	; (80013fc <HAL_UART_RxCpltCallback+0x40>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	701a      	strb	r2, [r3, #0]
	}
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	40011400 	.word	0x40011400
 80013f4:	2000007c 	.word	0x2000007c
 80013f8:	40011000 	.word	0x40011000
 80013fc:	200000b1 	.word	0x200000b1

08001400 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001400:	b4b0      	push	{r4, r5, r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BLU_PB_Pin) {
 800140a:	88fb      	ldrh	r3, [r7, #6]
 800140c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001410:	d102      	bne.n	8001418 <HAL_GPIO_EXTI_Callback+0x18>
		RUN_MODE_START_FLAG = 1;
 8001412:	4b0a      	ldr	r3, [pc, #40]	; (800143c <HAL_GPIO_EXTI_Callback+0x3c>)
 8001414:	2201      	movs	r2, #1
 8001416:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == RPM_TICK_Pin) {
 8001418:	88fb      	ldrh	r3, [r7, #6]
 800141a:	2b04      	cmp	r3, #4
 800141c:	d108      	bne.n	8001430 <HAL_GPIO_EXTI_Callback+0x30>
		rpm_tick_count++;  // Ensure this is incrementing
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <HAL_GPIO_EXTI_Callback+0x40>)
 8001420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001424:	1c54      	adds	r4, r2, #1
 8001426:	f143 0500 	adc.w	r5, r3, #0
 800142a:	4b05      	ldr	r3, [pc, #20]	; (8001440 <HAL_GPIO_EXTI_Callback+0x40>)
 800142c:	e9c3 4500 	strd	r4, r5, [r3]

	}
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	bcb0      	pop	{r4, r5, r7}
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	2000008a 	.word	0x2000008a
 8001440:	20000090 	.word	0x20000090

08001444 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001444:	b5b0      	push	{r4, r5, r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5) {
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a1d      	ldr	r2, [pc, #116]	; (80014c8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d110      	bne.n	8001478 <HAL_TIM_PeriodElapsedCallback+0x34>
		// Update wall clock second every real second
		simulate_seconds += 600;  // Simulating 24 hour minutes per 2.4 min
 8001456:	4b1d      	ldr	r3, [pc, #116]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145c:	f512 7416 	adds.w	r4, r2, #600	; 0x258
 8001460:	f143 0500 	adc.w	r5, r3, #0
 8001464:	4b19      	ldr	r3, [pc, #100]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001466:	e9c3 4500 	strd	r4, r5, [r3]
		Update_Wall_CLK_Display(simulate_seconds);
 800146a:	4b18      	ldr	r3, [pc, #96]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0x88>)
 800146c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001470:	4610      	mov	r0, r2
 8001472:	4619      	mov	r1, r3
 8001474:	f000 f834 	bl	80014e0 <Update_Wall_CLK_Display>
	}

	// MOTRO RPM calculation
	uint32_t ticks = rpm_tick_count - last_rpm_tick_count;
 8001478:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800147a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147e:	4611      	mov	r1, r2
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001486:	4613      	mov	r3, r2
 8001488:	1acb      	subs	r3, r1, r3
 800148a:	60fb      	str	r3, [r7, #12]
	if (ticks > 0) {
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d00c      	beq.n	80014ac <HAL_TIM_PeriodElapsedCallback+0x68>
			DC_Motor_RPM = (ticks * 60) / 20;  // Calculate RPM based on ticks
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	4613      	mov	r3, r2
 8001496:	011b      	lsls	r3, r3, #4
 8001498:	1a9b      	subs	r3, r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	461a      	mov	r2, r3
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80014a0:	fba3 2302 	umull	r2, r3, r3, r2
 80014a4:	091b      	lsrs	r3, r3, #4
 80014a6:	4a0d      	ldr	r2, [pc, #52]	; (80014dc <HAL_TIM_PeriodElapsedCallback+0x98>)
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	e002      	b.n	80014b2 <HAL_TIM_PeriodElapsedCallback+0x6e>
	} else {
			DC_Motor_RPM = 0;  // Set RPM to zero if no ticks are detected
 80014ac:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <HAL_TIM_PeriodElapsedCallback+0x98>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
	}
	last_rpm_tick_count = rpm_tick_count;  // Update last count
 80014b2:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80014b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b8:	4906      	ldr	r1, [pc, #24]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80014ba:	e9c1 2300 	strd	r2, r3, [r1]

}
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bdb0      	pop	{r4, r5, r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40000c00 	.word	0x40000c00
 80014cc:	200000a8 	.word	0x200000a8
 80014d0:	20000090 	.word	0x20000090
 80014d4:	20000098 	.word	0x20000098
 80014d8:	cccccccd 	.word	0xcccccccd
 80014dc:	200000a0 	.word	0x200000a0

080014e0 <Update_Wall_CLK_Display>:
		TIM2->CCR1 = 1900;
	}
}

void Update_Wall_CLK_Display(volatile uint64_t simulated_seconds)
{
 80014e0:	b5b0      	push	{r4, r5, r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	e9c7 0100 	strd	r0, r1, [r7]
		if (simulate_seconds >= 3600) {
 80014ea:	4b28      	ldr	r3, [pc, #160]	; (800158c <Update_Wall_CLK_Display+0xac>)
 80014ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f0:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
 80014f4:	f173 0300 	sbcs.w	r3, r3, #0
 80014f8:	d318      	bcc.n	800152c <Update_Wall_CLK_Display+0x4c>
			simulate_seconds -= 3600;
 80014fa:	4b24      	ldr	r3, [pc, #144]	; (800158c <Update_Wall_CLK_Display+0xac>)
 80014fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001500:	f5b2 6461 	subs.w	r4, r2, #3600	; 0xe10
 8001504:	f143 35ff 	adc.w	r5, r3, #4294967295
 8001508:	4b20      	ldr	r3, [pc, #128]	; (800158c <Update_Wall_CLK_Display+0xac>)
 800150a:	e9c3 4500 	strd	r4, r5, [r3]
			Current_Wall_CLK_Hour++;
 800150e:	4b20      	ldr	r3, [pc, #128]	; (8001590 <Update_Wall_CLK_Display+0xb0>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	3301      	adds	r3, #1
 8001516:	b2da      	uxtb	r2, r3
 8001518:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <Update_Wall_CLK_Display+0xb0>)
 800151a:	701a      	strb	r2, [r3, #0]
			if (Current_Wall_CLK_Hour >= 24) {
 800151c:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <Update_Wall_CLK_Display+0xb0>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b17      	cmp	r3, #23
 8001524:	d902      	bls.n	800152c <Update_Wall_CLK_Display+0x4c>
					Current_Wall_CLK_Hour = 0;
 8001526:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <Update_Wall_CLK_Display+0xb0>)
 8001528:	2200      	movs	r2, #0
 800152a:	701a      	strb	r2, [r3, #0]
			}
		}
		uint8_t scaled_hour = (WALL_CLK_START + Current_Wall_CLK_Hour) % 24;
 800152c:	4b19      	ldr	r3, [pc, #100]	; (8001594 <Update_Wall_CLK_Display+0xb4>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	461a      	mov	r2, r3
 8001534:	4b16      	ldr	r3, [pc, #88]	; (8001590 <Update_Wall_CLK_Display+0xb0>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	b2db      	uxtb	r3, r3
 800153a:	441a      	add	r2, r3
 800153c:	4b16      	ldr	r3, [pc, #88]	; (8001598 <Update_Wall_CLK_Display+0xb8>)
 800153e:	fb83 1302 	smull	r1, r3, r3, r2
 8001542:	1099      	asrs	r1, r3, #2
 8001544:	17d3      	asrs	r3, r2, #31
 8001546:	1ac9      	subs	r1, r1, r3
 8001548:	460b      	mov	r3, r1
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	440b      	add	r3, r1
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	1ad1      	subs	r1, r2, r3
 8001552:	460b      	mov	r3, r1
 8001554:	73fb      	strb	r3, [r7, #15]

    uint8_t digit_a = scaled_hour / 10; // Tens digit of the hour
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	4a10      	ldr	r2, [pc, #64]	; (800159c <Update_Wall_CLK_Display+0xbc>)
 800155a:	fba2 2303 	umull	r2, r3, r2, r3
 800155e:	08db      	lsrs	r3, r3, #3
 8001560:	73bb      	strb	r3, [r7, #14]
    uint8_t digit_b = scaled_hour % 10; // Units digit of the hour
 8001562:	7bfa      	ldrb	r2, [r7, #15]
 8001564:	4b0d      	ldr	r3, [pc, #52]	; (800159c <Update_Wall_CLK_Display+0xbc>)
 8001566:	fba3 1302 	umull	r1, r3, r3, r2
 800156a:	08d9      	lsrs	r1, r3, #3
 800156c:	460b      	mov	r3, r1
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	440b      	add	r3, r1
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	737b      	strb	r3, [r7, #13]

    DIGITS_Display(digit_a, digit_b); // Display the scaled hour
 8001578:	7b7a      	ldrb	r2, [r7, #13]
 800157a:	7bbb      	ldrb	r3, [r7, #14]
 800157c:	4611      	mov	r1, r2
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff fc3c 	bl	8000dfc <DIGITS_Display>
}
 8001584:	bf00      	nop
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bdb0      	pop	{r4, r5, r7, pc}
 800158c:	200000a8 	.word	0x200000a8
 8001590:	200000b0 	.word	0x200000b0
 8001594:	20000081 	.word	0x20000081
 8001598:	2aaaaaab 	.word	0x2aaaaaab
 800159c:	cccccccd 	.word	0xcccccccd

080015a0 <ADC_Manual_Control_PWM>:

uint8_t ADC_Manual_Control_PWM(ADC_HandleTypeDef *hadc, uint8_t adc_channel) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	70fb      	strb	r3, [r7, #3]
  uint8_t adc_value = 0; // 0 - 255
 80015ac:	2300      	movs	r3, #0
 80015ae:	73fb      	strb	r3, [r7, #15]
	ADC_Select_CH(adc_channel);
 80015b0:	78fb      	ldrb	r3, [r7, #3]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fce8 	bl	8000f88 <ADC_Select_CH>
	HAL_ADC_Start(&hadc1);
 80015b8:	4810      	ldr	r0, [pc, #64]	; (80015fc <ADC_Manual_Control_PWM+0x5c>)
 80015ba:	f000 fbcb 	bl	8001d54 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 80015be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015c2:	480e      	ldr	r0, [pc, #56]	; (80015fc <ADC_Manual_Control_PWM+0x5c>)
 80015c4:	f000 fcad 	bl	8001f22 <HAL_ADC_PollForConversion>
	adc_value = HAL_ADC_GetValue(&hadc1);
 80015c8:	480c      	ldr	r0, [pc, #48]	; (80015fc <ADC_Manual_Control_PWM+0x5c>)
 80015ca:	f000 fd35 	bl	8002038 <HAL_ADC_GetValue>
 80015ce:	4603      	mov	r3, r0
 80015d0:	73fb      	strb	r3, [r7, #15]
	HAL_ADC_Stop(&hadc1);
 80015d2:	480a      	ldr	r0, [pc, #40]	; (80015fc <ADC_Manual_Control_PWM+0x5c>)
 80015d4:	f000 fc72 	bl	8001ebc <HAL_ADC_Stop>

	// Calculate percentage (0 to 100%)
	uint8_t percentage = (uint8_t)((adc_value * 100) / 255);
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
 80015da:	2264      	movs	r2, #100	; 0x64
 80015dc:	fb02 f303 	mul.w	r3, r2, r3
 80015e0:	4a07      	ldr	r2, [pc, #28]	; (8001600 <ADC_Manual_Control_PWM+0x60>)
 80015e2:	fb82 1203 	smull	r1, r2, r2, r3
 80015e6:	441a      	add	r2, r3
 80015e8:	11d2      	asrs	r2, r2, #7
 80015ea:	17db      	asrs	r3, r3, #31
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	73bb      	strb	r3, [r7, #14]

  return percentage;
 80015f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	200000b4 	.word	0x200000b4
 8001600:	80808081 	.word	0x80808081

08001604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001608:	b672      	cpsid	i
}
 800160a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800160c:	e7fe      	b.n	800160c <Error_Handler+0x8>
	...

08001610 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <HAL_MspInit+0x4c>)
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	4a0f      	ldr	r2, [pc, #60]	; (800165c <HAL_MspInit+0x4c>)
 8001620:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001624:	6453      	str	r3, [r2, #68]	; 0x44
 8001626:	4b0d      	ldr	r3, [pc, #52]	; (800165c <HAL_MspInit+0x4c>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	603b      	str	r3, [r7, #0]
 8001636:	4b09      	ldr	r3, [pc, #36]	; (800165c <HAL_MspInit+0x4c>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	4a08      	ldr	r2, [pc, #32]	; (800165c <HAL_MspInit+0x4c>)
 800163c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001640:	6413      	str	r3, [r2, #64]	; 0x40
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <HAL_MspInit+0x4c>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164a:	603b      	str	r3, [r7, #0]
 800164c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800164e:	2007      	movs	r0, #7
 8001650:	f000 ffee 	bl	8002630 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40023800 	.word	0x40023800

08001660 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08a      	sub	sp, #40	; 0x28
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a17      	ldr	r2, [pc, #92]	; (80016dc <HAL_ADC_MspInit+0x7c>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d127      	bne.n	80016d2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <HAL_ADC_MspInit+0x80>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	4a15      	ldr	r2, [pc, #84]	; (80016e0 <HAL_ADC_MspInit+0x80>)
 800168c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001690:	6453      	str	r3, [r2, #68]	; 0x44
 8001692:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <HAL_ADC_MspInit+0x80>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <HAL_ADC_MspInit+0x80>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a0e      	ldr	r2, [pc, #56]	; (80016e0 <HAL_ADC_MspInit+0x80>)
 80016a8:	f043 0302 	orr.w	r3, r3, #2
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <HAL_ADC_MspInit+0x80>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016ba:	2302      	movs	r3, #2
 80016bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016be:	2303      	movs	r3, #3
 80016c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c6:	f107 0314 	add.w	r3, r7, #20
 80016ca:	4619      	mov	r1, r3
 80016cc:	4805      	ldr	r0, [pc, #20]	; (80016e4 <HAL_ADC_MspInit+0x84>)
 80016ce:	f001 f883 	bl	80027d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016d2:	bf00      	nop
 80016d4:	3728      	adds	r7, #40	; 0x28
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40012000 	.word	0x40012000
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40020400 	.word	0x40020400

080016e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016f8:	d10e      	bne.n	8001718 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
 80016fe:	4b20      	ldr	r3, [pc, #128]	; (8001780 <HAL_TIM_Base_MspInit+0x98>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	4a1f      	ldr	r2, [pc, #124]	; (8001780 <HAL_TIM_Base_MspInit+0x98>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	6413      	str	r3, [r2, #64]	; 0x40
 800170a:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <HAL_TIM_Base_MspInit+0x98>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	617b      	str	r3, [r7, #20]
 8001714:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001716:	e02e      	b.n	8001776 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a19      	ldr	r2, [pc, #100]	; (8001784 <HAL_TIM_Base_MspInit+0x9c>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d10e      	bne.n	8001740 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b16      	ldr	r3, [pc, #88]	; (8001780 <HAL_TIM_Base_MspInit+0x98>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	4a15      	ldr	r2, [pc, #84]	; (8001780 <HAL_TIM_Base_MspInit+0x98>)
 800172c:	f043 0302 	orr.w	r3, r3, #2
 8001730:	6413      	str	r3, [r2, #64]	; 0x40
 8001732:	4b13      	ldr	r3, [pc, #76]	; (8001780 <HAL_TIM_Base_MspInit+0x98>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	693b      	ldr	r3, [r7, #16]
}
 800173e:	e01a      	b.n	8001776 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM5)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a10      	ldr	r2, [pc, #64]	; (8001788 <HAL_TIM_Base_MspInit+0xa0>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d115      	bne.n	8001776 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <HAL_TIM_Base_MspInit+0x98>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	4a0b      	ldr	r2, [pc, #44]	; (8001780 <HAL_TIM_Base_MspInit+0x98>)
 8001754:	f043 0308 	orr.w	r3, r3, #8
 8001758:	6413      	str	r3, [r2, #64]	; 0x40
 800175a:	4b09      	ldr	r3, [pc, #36]	; (8001780 <HAL_TIM_Base_MspInit+0x98>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	f003 0308 	and.w	r3, r3, #8
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	2100      	movs	r1, #0
 800176a:	2032      	movs	r0, #50	; 0x32
 800176c:	f000 ff6b 	bl	8002646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001770:	2032      	movs	r0, #50	; 0x32
 8001772:	f000 ff84 	bl	800267e <HAL_NVIC_EnableIRQ>
}
 8001776:	bf00      	nop
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800
 8001784:	40000400 	.word	0x40000400
 8001788:	40000c00 	.word	0x40000c00

0800178c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08a      	sub	sp, #40	; 0x28
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017ac:	d11e      	bne.n	80017ec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	4b31      	ldr	r3, [pc, #196]	; (8001878 <HAL_TIM_MspPostInit+0xec>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	4a30      	ldr	r2, [pc, #192]	; (8001878 <HAL_TIM_MspPostInit+0xec>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6313      	str	r3, [r2, #48]	; 0x30
 80017be:	4b2e      	ldr	r3, [pc, #184]	; (8001878 <HAL_TIM_MspPostInit+0xec>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017ca:	2301      	movs	r3, #1
 80017cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	2302      	movs	r3, #2
 80017d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d6:	2300      	movs	r3, #0
 80017d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017da:	2301      	movs	r3, #1
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017de:	f107 0314 	add.w	r3, r7, #20
 80017e2:	4619      	mov	r1, r3
 80017e4:	4825      	ldr	r0, [pc, #148]	; (800187c <HAL_TIM_MspPostInit+0xf0>)
 80017e6:	f000 fff7 	bl	80027d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80017ea:	e040      	b.n	800186e <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM3)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a23      	ldr	r2, [pc, #140]	; (8001880 <HAL_TIM_MspPostInit+0xf4>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d13b      	bne.n	800186e <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <HAL_TIM_MspPostInit+0xec>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a1e      	ldr	r2, [pc, #120]	; (8001878 <HAL_TIM_MspPostInit+0xec>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <HAL_TIM_MspPostInit+0xec>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	4b18      	ldr	r3, [pc, #96]	; (8001878 <HAL_TIM_MspPostInit+0xec>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a17      	ldr	r2, [pc, #92]	; (8001878 <HAL_TIM_MspPostInit+0xec>)
 800181c:	f043 0302 	orr.w	r3, r3, #2
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b15      	ldr	r3, [pc, #84]	; (8001878 <HAL_TIM_MspPostInit+0xec>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800182e:	2340      	movs	r3, #64	; 0x40
 8001830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	2302      	movs	r3, #2
 8001834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183a:	2300      	movs	r3, #0
 800183c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800183e:	2302      	movs	r3, #2
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001842:	f107 0314 	add.w	r3, r7, #20
 8001846:	4619      	mov	r1, r3
 8001848:	480c      	ldr	r0, [pc, #48]	; (800187c <HAL_TIM_MspPostInit+0xf0>)
 800184a:	f000 ffc5 	bl	80027d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800184e:	2301      	movs	r3, #1
 8001850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001852:	2302      	movs	r3, #2
 8001854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185a:	2300      	movs	r3, #0
 800185c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800185e:	2302      	movs	r3, #2
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	4619      	mov	r1, r3
 8001868:	4806      	ldr	r0, [pc, #24]	; (8001884 <HAL_TIM_MspPostInit+0xf8>)
 800186a:	f000 ffb5 	bl	80027d8 <HAL_GPIO_Init>
}
 800186e:	bf00      	nop
 8001870:	3728      	adds	r7, #40	; 0x28
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800
 800187c:	40020000 	.word	0x40020000
 8001880:	40000400 	.word	0x40000400
 8001884:	40020400 	.word	0x40020400

08001888 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08e      	sub	sp, #56	; 0x38
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a53      	ldr	r2, [pc, #332]	; (80019f4 <HAL_UART_MspInit+0x16c>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d135      	bne.n	8001916 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	623b      	str	r3, [r7, #32]
 80018ae:	4b52      	ldr	r3, [pc, #328]	; (80019f8 <HAL_UART_MspInit+0x170>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b2:	4a51      	ldr	r2, [pc, #324]	; (80019f8 <HAL_UART_MspInit+0x170>)
 80018b4:	f043 0310 	orr.w	r3, r3, #16
 80018b8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ba:	4b4f      	ldr	r3, [pc, #316]	; (80019f8 <HAL_UART_MspInit+0x170>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	f003 0310 	and.w	r3, r3, #16
 80018c2:	623b      	str	r3, [r7, #32]
 80018c4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
 80018ca:	4b4b      	ldr	r3, [pc, #300]	; (80019f8 <HAL_UART_MspInit+0x170>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a4a      	ldr	r2, [pc, #296]	; (80019f8 <HAL_UART_MspInit+0x170>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b48      	ldr	r3, [pc, #288]	; (80019f8 <HAL_UART_MspInit+0x170>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	61fb      	str	r3, [r7, #28]
 80018e0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80018e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e8:	2302      	movs	r3, #2
 80018ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f0:	2303      	movs	r3, #3
 80018f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018f4:	2307      	movs	r3, #7
 80018f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018fc:	4619      	mov	r1, r3
 80018fe:	483f      	ldr	r0, [pc, #252]	; (80019fc <HAL_UART_MspInit+0x174>)
 8001900:	f000 ff6a 	bl	80027d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001904:	2200      	movs	r2, #0
 8001906:	2100      	movs	r1, #0
 8001908:	2025      	movs	r0, #37	; 0x25
 800190a:	f000 fe9c 	bl	8002646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800190e:	2025      	movs	r0, #37	; 0x25
 8001910:	f000 feb5 	bl	800267e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001914:	e06a      	b.n	80019ec <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART2)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a39      	ldr	r2, [pc, #228]	; (8001a00 <HAL_UART_MspInit+0x178>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d12c      	bne.n	800197a <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001920:	2300      	movs	r3, #0
 8001922:	61bb      	str	r3, [r7, #24]
 8001924:	4b34      	ldr	r3, [pc, #208]	; (80019f8 <HAL_UART_MspInit+0x170>)
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	4a33      	ldr	r2, [pc, #204]	; (80019f8 <HAL_UART_MspInit+0x170>)
 800192a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800192e:	6413      	str	r3, [r2, #64]	; 0x40
 8001930:	4b31      	ldr	r3, [pc, #196]	; (80019f8 <HAL_UART_MspInit+0x170>)
 8001932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001938:	61bb      	str	r3, [r7, #24]
 800193a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	4b2d      	ldr	r3, [pc, #180]	; (80019f8 <HAL_UART_MspInit+0x170>)
 8001942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001944:	4a2c      	ldr	r2, [pc, #176]	; (80019f8 <HAL_UART_MspInit+0x170>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	6313      	str	r3, [r2, #48]	; 0x30
 800194c:	4b2a      	ldr	r3, [pc, #168]	; (80019f8 <HAL_UART_MspInit+0x170>)
 800194e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001958:	230c      	movs	r3, #12
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195c:	2302      	movs	r3, #2
 800195e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001964:	2300      	movs	r3, #0
 8001966:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001968:	2307      	movs	r3, #7
 800196a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001970:	4619      	mov	r1, r3
 8001972:	4822      	ldr	r0, [pc, #136]	; (80019fc <HAL_UART_MspInit+0x174>)
 8001974:	f000 ff30 	bl	80027d8 <HAL_GPIO_Init>
}
 8001978:	e038      	b.n	80019ec <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART6)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a21      	ldr	r2, [pc, #132]	; (8001a04 <HAL_UART_MspInit+0x17c>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d133      	bne.n	80019ec <HAL_UART_MspInit+0x164>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001984:	2300      	movs	r3, #0
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	4b1b      	ldr	r3, [pc, #108]	; (80019f8 <HAL_UART_MspInit+0x170>)
 800198a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198c:	4a1a      	ldr	r2, [pc, #104]	; (80019f8 <HAL_UART_MspInit+0x170>)
 800198e:	f043 0320 	orr.w	r3, r3, #32
 8001992:	6453      	str	r3, [r2, #68]	; 0x44
 8001994:	4b18      	ldr	r3, [pc, #96]	; (80019f8 <HAL_UART_MspInit+0x170>)
 8001996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001998:	f003 0320 	and.w	r3, r3, #32
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <HAL_UART_MspInit+0x170>)
 80019a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a8:	4a13      	ldr	r2, [pc, #76]	; (80019f8 <HAL_UART_MspInit+0x170>)
 80019aa:	f043 0304 	orr.w	r3, r3, #4
 80019ae:	6313      	str	r3, [r2, #48]	; 0x30
 80019b0:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <HAL_UART_MspInit+0x170>)
 80019b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019bc:	23c0      	movs	r3, #192	; 0xc0
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c0:	2302      	movs	r3, #2
 80019c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c8:	2303      	movs	r3, #3
 80019ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80019cc:	2308      	movs	r3, #8
 80019ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d4:	4619      	mov	r1, r3
 80019d6:	480c      	ldr	r0, [pc, #48]	; (8001a08 <HAL_UART_MspInit+0x180>)
 80019d8:	f000 fefe 	bl	80027d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80019dc:	2200      	movs	r2, #0
 80019de:	2100      	movs	r1, #0
 80019e0:	2047      	movs	r0, #71	; 0x47
 80019e2:	f000 fe30 	bl	8002646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80019e6:	2047      	movs	r0, #71	; 0x47
 80019e8:	f000 fe49 	bl	800267e <HAL_NVIC_EnableIRQ>
}
 80019ec:	bf00      	nop
 80019ee:	3738      	adds	r7, #56	; 0x38
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40011000 	.word	0x40011000
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40020000 	.word	0x40020000
 8001a00:	40004400 	.word	0x40004400
 8001a04:	40011400 	.word	0x40011400
 8001a08:	40020800 	.word	0x40020800

08001a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a10:	e7fe      	b.n	8001a10 <NMI_Handler+0x4>

08001a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a16:	e7fe      	b.n	8001a16 <HardFault_Handler+0x4>

08001a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a1c:	e7fe      	b.n	8001a1c <MemManage_Handler+0x4>

08001a1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a22:	e7fe      	b.n	8001a22 <BusFault_Handler+0x4>

08001a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a28:	e7fe      	b.n	8001a28 <UsageFault_Handler+0x4>

08001a2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a58:	f000 f8f4 	bl	8001c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RPM_TICK_Pin);
 8001a64:	2004      	movs	r0, #4
 8001a66:	f001 f86f 	bl	8002b48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a74:	4802      	ldr	r0, [pc, #8]	; (8001a80 <USART1_IRQHandler+0x10>)
 8001a76:	f002 fe45 	bl	8004704 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	200001d4 	.word	0x200001d4

08001a84 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLU_PB_Pin);
 8001a88:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a8c:	f001 f85c 	bl	8002b48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a90:	bf00      	nop
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001a98:	4802      	ldr	r0, [pc, #8]	; (8001aa4 <TIM5_IRQHandler+0x10>)
 8001a9a:	f001 ff1b 	bl	80038d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	2000018c 	.word	0x2000018c

08001aa8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001aac:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <USART6_IRQHandler+0x10>)
 8001aae:	f002 fe29 	bl	8004704 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	2000025c 	.word	0x2000025c

08001abc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ac4:	4a14      	ldr	r2, [pc, #80]	; (8001b18 <_sbrk+0x5c>)
 8001ac6:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <_sbrk+0x60>)
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ad0:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <_sbrk+0x64>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d102      	bne.n	8001ade <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ad8:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <_sbrk+0x64>)
 8001ada:	4a12      	ldr	r2, [pc, #72]	; (8001b24 <_sbrk+0x68>)
 8001adc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ade:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <_sbrk+0x64>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d207      	bcs.n	8001afc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aec:	f003 fe2a 	bl	8005744 <__errno>
 8001af0:	4603      	mov	r3, r0
 8001af2:	220c      	movs	r2, #12
 8001af4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001af6:	f04f 33ff 	mov.w	r3, #4294967295
 8001afa:	e009      	b.n	8001b10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001afc:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <_sbrk+0x64>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b02:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <_sbrk+0x64>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	4a05      	ldr	r2, [pc, #20]	; (8001b20 <_sbrk+0x64>)
 8001b0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20018000 	.word	0x20018000
 8001b1c:	00000400 	.word	0x00000400
 8001b20:	200002a0 	.word	0x200002a0
 8001b24:	200003f0 	.word	0x200003f0

08001b28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <SystemInit+0x20>)
 8001b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b32:	4a05      	ldr	r2, [pc, #20]	; (8001b48 <SystemInit+0x20>)
 8001b34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b50:	480d      	ldr	r0, [pc, #52]	; (8001b88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b52:	490e      	ldr	r1, [pc, #56]	; (8001b8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b54:	4a0e      	ldr	r2, [pc, #56]	; (8001b90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b58:	e002      	b.n	8001b60 <LoopCopyDataInit>

08001b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b5e:	3304      	adds	r3, #4

08001b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b64:	d3f9      	bcc.n	8001b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b66:	4a0b      	ldr	r2, [pc, #44]	; (8001b94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b68:	4c0b      	ldr	r4, [pc, #44]	; (8001b98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b6c:	e001      	b.n	8001b72 <LoopFillZerobss>

08001b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b70:	3204      	adds	r2, #4

08001b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b74:	d3fb      	bcc.n	8001b6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b76:	f7ff ffd7 	bl	8001b28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b7a:	f003 fde9 	bl	8005750 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b7e:	f7fe fd05 	bl	800058c <main>
  bx  lr    
 8001b82:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b84:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b8c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001b90:	080064b4 	.word	0x080064b4
  ldr r2, =_sbss
 8001b94:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001b98:	200003f0 	.word	0x200003f0

08001b9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b9c:	e7fe      	b.n	8001b9c <ADC_IRQHandler>
	...

08001ba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ba4:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <HAL_Init+0x40>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a0d      	ldr	r2, [pc, #52]	; (8001be0 <HAL_Init+0x40>)
 8001baa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <HAL_Init+0x40>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0a      	ldr	r2, [pc, #40]	; (8001be0 <HAL_Init+0x40>)
 8001bb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bbc:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <HAL_Init+0x40>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a07      	ldr	r2, [pc, #28]	; (8001be0 <HAL_Init+0x40>)
 8001bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc8:	2003      	movs	r0, #3
 8001bca:	f000 fd31 	bl	8002630 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bce:	2000      	movs	r0, #0
 8001bd0:	f000 f808 	bl	8001be4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bd4:	f7ff fd1c 	bl	8001610 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40023c00 	.word	0x40023c00

08001be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bec:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <HAL_InitTick+0x54>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <HAL_InitTick+0x58>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 fd49 	bl	800269a <HAL_SYSTICK_Config>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e00e      	b.n	8001c30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b0f      	cmp	r3, #15
 8001c16:	d80a      	bhi.n	8001c2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c20:	f000 fd11 	bl	8002646 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c24:	4a06      	ldr	r2, [pc, #24]	; (8001c40 <HAL_InitTick+0x5c>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e000      	b.n	8001c30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20000000 	.word	0x20000000
 8001c3c:	20000008 	.word	0x20000008
 8001c40:	20000004 	.word	0x20000004

08001c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c48:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <HAL_IncTick+0x20>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <HAL_IncTick+0x24>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4413      	add	r3, r2
 8001c54:	4a04      	ldr	r2, [pc, #16]	; (8001c68 <HAL_IncTick+0x24>)
 8001c56:	6013      	str	r3, [r2, #0]
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	20000008 	.word	0x20000008
 8001c68:	200002a4 	.word	0x200002a4

08001c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c70:	4b03      	ldr	r3, [pc, #12]	; (8001c80 <HAL_GetTick+0x14>)
 8001c72:	681b      	ldr	r3, [r3, #0]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	200002a4 	.word	0x200002a4

08001c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c8c:	f7ff ffee 	bl	8001c6c <HAL_GetTick>
 8001c90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c9c:	d005      	beq.n	8001caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <HAL_Delay+0x44>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001caa:	bf00      	nop
 8001cac:	f7ff ffde 	bl	8001c6c <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d8f7      	bhi.n	8001cac <HAL_Delay+0x28>
  {
  }
}
 8001cbc:	bf00      	nop
 8001cbe:	bf00      	nop
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000008 	.word	0x20000008

08001ccc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e033      	b.n	8001d4a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d109      	bne.n	8001cfe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff fcb8 	bl	8001660 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f003 0310 	and.w	r3, r3, #16
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d118      	bne.n	8001d3c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d12:	f023 0302 	bic.w	r3, r3, #2
 8001d16:	f043 0202 	orr.w	r2, r3, #2
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 faba 	bl	8002298 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f023 0303 	bic.w	r3, r3, #3
 8001d32:	f043 0201 	orr.w	r2, r3, #1
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	641a      	str	r2, [r3, #64]	; 0x40
 8001d3a:	e001      	b.n	8001d40 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d101      	bne.n	8001d6e <HAL_ADC_Start+0x1a>
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	e097      	b.n	8001e9e <HAL_ADC_Start+0x14a>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d018      	beq.n	8001db6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0201 	orr.w	r2, r2, #1
 8001d92:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d94:	4b45      	ldr	r3, [pc, #276]	; (8001eac <HAL_ADC_Start+0x158>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a45      	ldr	r2, [pc, #276]	; (8001eb0 <HAL_ADC_Start+0x15c>)
 8001d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9e:	0c9a      	lsrs	r2, r3, #18
 8001da0:	4613      	mov	r3, r2
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	4413      	add	r3, r2
 8001da6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001da8:	e002      	b.n	8001db0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	3b01      	subs	r3, #1
 8001dae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f9      	bne.n	8001daa <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d15f      	bne.n	8001e84 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001dcc:	f023 0301 	bic.w	r3, r3, #1
 8001dd0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d007      	beq.n	8001df6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e02:	d106      	bne.n	8001e12 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e08:	f023 0206 	bic.w	r2, r3, #6
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	645a      	str	r2, [r3, #68]	; 0x44
 8001e10:	e002      	b.n	8001e18 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e20:	4b24      	ldr	r3, [pc, #144]	; (8001eb4 <HAL_ADC_Start+0x160>)
 8001e22:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001e2c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f003 031f 	and.w	r3, r3, #31
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10f      	bne.n	8001e5a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d129      	bne.n	8001e9c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	e020      	b.n	8001e9c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a16      	ldr	r2, [pc, #88]	; (8001eb8 <HAL_ADC_Start+0x164>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d11b      	bne.n	8001e9c <HAL_ADC_Start+0x148>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d114      	bne.n	8001e9c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e80:	609a      	str	r2, [r3, #8]
 8001e82:	e00b      	b.n	8001e9c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	f043 0210 	orr.w	r2, r3, #16
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e94:	f043 0201 	orr.w	r2, r3, #1
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	20000000 	.word	0x20000000
 8001eb0:	431bde83 	.word	0x431bde83
 8001eb4:	40012300 	.word	0x40012300
 8001eb8:	40012000 	.word	0x40012000

08001ebc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d101      	bne.n	8001ed2 <HAL_ADC_Stop+0x16>
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e021      	b.n	8001f16 <HAL_ADC_Stop+0x5a>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0201 	bic.w	r2, r2, #1
 8001ee8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d109      	bne.n	8001f0c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f00:	f023 0301 	bic.w	r3, r3, #1
 8001f04:	f043 0201 	orr.w	r2, r3, #1
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b084      	sub	sp, #16
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
 8001f2a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f3e:	d113      	bne.n	8001f68 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f4e:	d10b      	bne.n	8001f68 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f54:	f043 0220 	orr.w	r2, r3, #32
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e063      	b.n	8002030 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001f68:	f7ff fe80 	bl	8001c6c <HAL_GetTick>
 8001f6c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f6e:	e021      	b.n	8001fb4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f76:	d01d      	beq.n	8001fb4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d007      	beq.n	8001f8e <HAL_ADC_PollForConversion+0x6c>
 8001f7e:	f7ff fe75 	bl	8001c6c <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d212      	bcs.n	8001fb4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d00b      	beq.n	8001fb4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa0:	f043 0204 	orr.w	r2, r3, #4
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e03d      	b.n	8002030 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d1d6      	bne.n	8001f70 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f06f 0212 	mvn.w	r2, #18
 8001fca:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d123      	bne.n	800202e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d11f      	bne.n	800202e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d006      	beq.n	800200a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002006:	2b00      	cmp	r3, #0
 8002008:	d111      	bne.n	800202e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d105      	bne.n	800202e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f043 0201 	orr.w	r2, r3, #1
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002046:	4618      	mov	r0, r3
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800205e:	2300      	movs	r3, #0
 8002060:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002068:	2b01      	cmp	r3, #1
 800206a:	d101      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x1c>
 800206c:	2302      	movs	r3, #2
 800206e:	e105      	b.n	800227c <HAL_ADC_ConfigChannel+0x228>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b09      	cmp	r3, #9
 800207e:	d925      	bls.n	80020cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68d9      	ldr	r1, [r3, #12]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	b29b      	uxth	r3, r3
 800208c:	461a      	mov	r2, r3
 800208e:	4613      	mov	r3, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	4413      	add	r3, r2
 8002094:	3b1e      	subs	r3, #30
 8002096:	2207      	movs	r2, #7
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43da      	mvns	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	400a      	ands	r2, r1
 80020a4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68d9      	ldr	r1, [r3, #12]
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	4618      	mov	r0, r3
 80020b8:	4603      	mov	r3, r0
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	4403      	add	r3, r0
 80020be:	3b1e      	subs	r3, #30
 80020c0:	409a      	lsls	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	430a      	orrs	r2, r1
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	e022      	b.n	8002112 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6919      	ldr	r1, [r3, #16]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	461a      	mov	r2, r3
 80020da:	4613      	mov	r3, r2
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	4413      	add	r3, r2
 80020e0:	2207      	movs	r2, #7
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	43da      	mvns	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	400a      	ands	r2, r1
 80020ee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6919      	ldr	r1, [r3, #16]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	b29b      	uxth	r3, r3
 8002100:	4618      	mov	r0, r3
 8002102:	4603      	mov	r3, r0
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	4403      	add	r3, r0
 8002108:	409a      	lsls	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b06      	cmp	r3, #6
 8002118:	d824      	bhi.n	8002164 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	3b05      	subs	r3, #5
 800212c:	221f      	movs	r2, #31
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43da      	mvns	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	400a      	ands	r2, r1
 800213a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	b29b      	uxth	r3, r3
 8002148:	4618      	mov	r0, r3
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	3b05      	subs	r3, #5
 8002156:	fa00 f203 	lsl.w	r2, r0, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	635a      	str	r2, [r3, #52]	; 0x34
 8002162:	e04c      	b.n	80021fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b0c      	cmp	r3, #12
 800216a:	d824      	bhi.n	80021b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	4613      	mov	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	3b23      	subs	r3, #35	; 0x23
 800217e:	221f      	movs	r2, #31
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43da      	mvns	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	400a      	ands	r2, r1
 800218c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	b29b      	uxth	r3, r3
 800219a:	4618      	mov	r0, r3
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	4613      	mov	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	3b23      	subs	r3, #35	; 0x23
 80021a8:	fa00 f203 	lsl.w	r2, r0, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	631a      	str	r2, [r3, #48]	; 0x30
 80021b4:	e023      	b.n	80021fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	3b41      	subs	r3, #65	; 0x41
 80021c8:	221f      	movs	r2, #31
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43da      	mvns	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	400a      	ands	r2, r1
 80021d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	4618      	mov	r0, r3
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	3b41      	subs	r3, #65	; 0x41
 80021f2:	fa00 f203 	lsl.w	r2, r0, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021fe:	4b22      	ldr	r3, [pc, #136]	; (8002288 <HAL_ADC_ConfigChannel+0x234>)
 8002200:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a21      	ldr	r2, [pc, #132]	; (800228c <HAL_ADC_ConfigChannel+0x238>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d109      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x1cc>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b12      	cmp	r3, #18
 8002212:	d105      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a19      	ldr	r2, [pc, #100]	; (800228c <HAL_ADC_ConfigChannel+0x238>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d123      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x21e>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2b10      	cmp	r3, #16
 8002230:	d003      	beq.n	800223a <HAL_ADC_ConfigChannel+0x1e6>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2b11      	cmp	r3, #17
 8002238:	d11b      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2b10      	cmp	r3, #16
 800224c:	d111      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800224e:	4b10      	ldr	r3, [pc, #64]	; (8002290 <HAL_ADC_ConfigChannel+0x23c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a10      	ldr	r2, [pc, #64]	; (8002294 <HAL_ADC_ConfigChannel+0x240>)
 8002254:	fba2 2303 	umull	r2, r3, r2, r3
 8002258:	0c9a      	lsrs	r2, r3, #18
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002264:	e002      	b.n	800226c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	3b01      	subs	r3, #1
 800226a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f9      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	40012300 	.word	0x40012300
 800228c:	40012000 	.word	0x40012000
 8002290:	20000000 	.word	0x20000000
 8002294:	431bde83 	.word	0x431bde83

08002298 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022a0:	4b79      	ldr	r3, [pc, #484]	; (8002488 <ADC_Init+0x1f0>)
 80022a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	431a      	orrs	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6859      	ldr	r1, [r3, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	021a      	lsls	r2, r3, #8
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80022f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6859      	ldr	r1, [r3, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002312:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6899      	ldr	r1, [r3, #8]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68da      	ldr	r2, [r3, #12]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232a:	4a58      	ldr	r2, [pc, #352]	; (800248c <ADC_Init+0x1f4>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d022      	beq.n	8002376 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800233e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6899      	ldr	r1, [r3, #8]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002360:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6899      	ldr	r1, [r3, #8]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	e00f      	b.n	8002396 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002384:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002394:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 0202 	bic.w	r2, r2, #2
 80023a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6899      	ldr	r1, [r3, #8]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	7e1b      	ldrb	r3, [r3, #24]
 80023b0:	005a      	lsls	r2, r3, #1
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d01b      	beq.n	80023fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80023e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6859      	ldr	r1, [r3, #4]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ee:	3b01      	subs	r3, #1
 80023f0:	035a      	lsls	r2, r3, #13
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	e007      	b.n	800240c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800240a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800241a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	3b01      	subs	r3, #1
 8002428:	051a      	lsls	r2, r3, #20
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002440:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6899      	ldr	r1, [r3, #8]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800244e:	025a      	lsls	r2, r3, #9
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689a      	ldr	r2, [r3, #8]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002466:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6899      	ldr	r1, [r3, #8]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	029a      	lsls	r2, r3, #10
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	609a      	str	r2, [r3, #8]
}
 800247c:	bf00      	nop
 800247e:	3714      	adds	r7, #20
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	40012300 	.word	0x40012300
 800248c:	0f000001 	.word	0x0f000001

08002490 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024a0:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <__NVIC_SetPriorityGrouping+0x44>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024ac:	4013      	ands	r3, r2
 80024ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024c2:	4a04      	ldr	r2, [pc, #16]	; (80024d4 <__NVIC_SetPriorityGrouping+0x44>)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	60d3      	str	r3, [r2, #12]
}
 80024c8:	bf00      	nop
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	e000ed00 	.word	0xe000ed00

080024d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024dc:	4b04      	ldr	r3, [pc, #16]	; (80024f0 <__NVIC_GetPriorityGrouping+0x18>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	0a1b      	lsrs	r3, r3, #8
 80024e2:	f003 0307 	and.w	r3, r3, #7
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	e000ed00 	.word	0xe000ed00

080024f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002502:	2b00      	cmp	r3, #0
 8002504:	db0b      	blt.n	800251e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002506:	79fb      	ldrb	r3, [r7, #7]
 8002508:	f003 021f 	and.w	r2, r3, #31
 800250c:	4907      	ldr	r1, [pc, #28]	; (800252c <__NVIC_EnableIRQ+0x38>)
 800250e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002512:	095b      	lsrs	r3, r3, #5
 8002514:	2001      	movs	r0, #1
 8002516:	fa00 f202 	lsl.w	r2, r0, r2
 800251a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	e000e100 	.word	0xe000e100

08002530 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	6039      	str	r1, [r7, #0]
 800253a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800253c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002540:	2b00      	cmp	r3, #0
 8002542:	db0a      	blt.n	800255a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	b2da      	uxtb	r2, r3
 8002548:	490c      	ldr	r1, [pc, #48]	; (800257c <__NVIC_SetPriority+0x4c>)
 800254a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254e:	0112      	lsls	r2, r2, #4
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	440b      	add	r3, r1
 8002554:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002558:	e00a      	b.n	8002570 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	b2da      	uxtb	r2, r3
 800255e:	4908      	ldr	r1, [pc, #32]	; (8002580 <__NVIC_SetPriority+0x50>)
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	3b04      	subs	r3, #4
 8002568:	0112      	lsls	r2, r2, #4
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	440b      	add	r3, r1
 800256e:	761a      	strb	r2, [r3, #24]
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	e000e100 	.word	0xe000e100
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002584:	b480      	push	{r7}
 8002586:	b089      	sub	sp, #36	; 0x24
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	f1c3 0307 	rsb	r3, r3, #7
 800259e:	2b04      	cmp	r3, #4
 80025a0:	bf28      	it	cs
 80025a2:	2304      	movcs	r3, #4
 80025a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3304      	adds	r3, #4
 80025aa:	2b06      	cmp	r3, #6
 80025ac:	d902      	bls.n	80025b4 <NVIC_EncodePriority+0x30>
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	3b03      	subs	r3, #3
 80025b2:	e000      	b.n	80025b6 <NVIC_EncodePriority+0x32>
 80025b4:	2300      	movs	r3, #0
 80025b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b8:	f04f 32ff 	mov.w	r2, #4294967295
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43da      	mvns	r2, r3
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	401a      	ands	r2, r3
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025cc:	f04f 31ff 	mov.w	r1, #4294967295
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	fa01 f303 	lsl.w	r3, r1, r3
 80025d6:	43d9      	mvns	r1, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025dc:	4313      	orrs	r3, r2
         );
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3724      	adds	r7, #36	; 0x24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
	...

080025ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025fc:	d301      	bcc.n	8002602 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025fe:	2301      	movs	r3, #1
 8002600:	e00f      	b.n	8002622 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002602:	4a0a      	ldr	r2, [pc, #40]	; (800262c <SysTick_Config+0x40>)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3b01      	subs	r3, #1
 8002608:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800260a:	210f      	movs	r1, #15
 800260c:	f04f 30ff 	mov.w	r0, #4294967295
 8002610:	f7ff ff8e 	bl	8002530 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002614:	4b05      	ldr	r3, [pc, #20]	; (800262c <SysTick_Config+0x40>)
 8002616:	2200      	movs	r2, #0
 8002618:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800261a:	4b04      	ldr	r3, [pc, #16]	; (800262c <SysTick_Config+0x40>)
 800261c:	2207      	movs	r2, #7
 800261e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	e000e010 	.word	0xe000e010

08002630 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f7ff ff29 	bl	8002490 <__NVIC_SetPriorityGrouping>
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002646:	b580      	push	{r7, lr}
 8002648:	b086      	sub	sp, #24
 800264a:	af00      	add	r7, sp, #0
 800264c:	4603      	mov	r3, r0
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	607a      	str	r2, [r7, #4]
 8002652:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002658:	f7ff ff3e 	bl	80024d8 <__NVIC_GetPriorityGrouping>
 800265c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	68b9      	ldr	r1, [r7, #8]
 8002662:	6978      	ldr	r0, [r7, #20]
 8002664:	f7ff ff8e 	bl	8002584 <NVIC_EncodePriority>
 8002668:	4602      	mov	r2, r0
 800266a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800266e:	4611      	mov	r1, r2
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff ff5d 	bl	8002530 <__NVIC_SetPriority>
}
 8002676:	bf00      	nop
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b082      	sub	sp, #8
 8002682:	af00      	add	r7, sp, #0
 8002684:	4603      	mov	r3, r0
 8002686:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff ff31 	bl	80024f4 <__NVIC_EnableIRQ>
}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff ffa2 	bl	80025ec <SysTick_Config>
 80026a8:	4603      	mov	r3, r0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b084      	sub	sp, #16
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026be:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026c0:	f7ff fad4 	bl	8001c6c <HAL_GetTick>
 80026c4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d008      	beq.n	80026e4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2280      	movs	r2, #128	; 0x80
 80026d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e052      	b.n	800278a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0216 	bic.w	r2, r2, #22
 80026f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	695a      	ldr	r2, [r3, #20]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002702:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	2b00      	cmp	r3, #0
 800270a:	d103      	bne.n	8002714 <HAL_DMA_Abort+0x62>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002710:	2b00      	cmp	r3, #0
 8002712:	d007      	beq.n	8002724 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0208 	bic.w	r2, r2, #8
 8002722:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 0201 	bic.w	r2, r2, #1
 8002732:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002734:	e013      	b.n	800275e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002736:	f7ff fa99 	bl	8001c6c <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b05      	cmp	r3, #5
 8002742:	d90c      	bls.n	800275e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2220      	movs	r2, #32
 8002748:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2203      	movs	r2, #3
 800274e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e015      	b.n	800278a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1e4      	bne.n	8002736 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002770:	223f      	movs	r2, #63	; 0x3f
 8002772:	409a      	lsls	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d004      	beq.n	80027b0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2280      	movs	r2, #128	; 0x80
 80027aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e00c      	b.n	80027ca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2205      	movs	r2, #5
 80027b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 0201 	bic.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
	...

080027d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027d8:	b480      	push	{r7}
 80027da:	b089      	sub	sp, #36	; 0x24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027e2:	2300      	movs	r3, #0
 80027e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ee:	2300      	movs	r3, #0
 80027f0:	61fb      	str	r3, [r7, #28]
 80027f2:	e159      	b.n	8002aa8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027f4:	2201      	movs	r2, #1
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	4013      	ands	r3, r2
 8002806:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	429a      	cmp	r2, r3
 800280e:	f040 8148 	bne.w	8002aa2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	2b01      	cmp	r3, #1
 800281c:	d005      	beq.n	800282a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002826:	2b02      	cmp	r3, #2
 8002828:	d130      	bne.n	800288c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	2203      	movs	r2, #3
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43db      	mvns	r3, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4013      	ands	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	68da      	ldr	r2, [r3, #12]
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4313      	orrs	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002860:	2201      	movs	r2, #1
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	43db      	mvns	r3, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4013      	ands	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	091b      	lsrs	r3, r3, #4
 8002876:	f003 0201 	and.w	r2, r3, #1
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4313      	orrs	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 0303 	and.w	r3, r3, #3
 8002894:	2b03      	cmp	r3, #3
 8002896:	d017      	beq.n	80028c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	2203      	movs	r2, #3
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4313      	orrs	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 0303 	and.w	r3, r3, #3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d123      	bne.n	800291c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	08da      	lsrs	r2, r3, #3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3208      	adds	r2, #8
 80028dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	220f      	movs	r2, #15
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43db      	mvns	r3, r3
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4013      	ands	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	691a      	ldr	r2, [r3, #16]
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4313      	orrs	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	08da      	lsrs	r2, r3, #3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3208      	adds	r2, #8
 8002916:	69b9      	ldr	r1, [r7, #24]
 8002918:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	2203      	movs	r2, #3
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	43db      	mvns	r3, r3
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4013      	ands	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f003 0203 	and.w	r2, r3, #3
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 80a2 	beq.w	8002aa2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	60fb      	str	r3, [r7, #12]
 8002962:	4b57      	ldr	r3, [pc, #348]	; (8002ac0 <HAL_GPIO_Init+0x2e8>)
 8002964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002966:	4a56      	ldr	r2, [pc, #344]	; (8002ac0 <HAL_GPIO_Init+0x2e8>)
 8002968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800296c:	6453      	str	r3, [r2, #68]	; 0x44
 800296e:	4b54      	ldr	r3, [pc, #336]	; (8002ac0 <HAL_GPIO_Init+0x2e8>)
 8002970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800297a:	4a52      	ldr	r2, [pc, #328]	; (8002ac4 <HAL_GPIO_Init+0x2ec>)
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	089b      	lsrs	r3, r3, #2
 8002980:	3302      	adds	r3, #2
 8002982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002986:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	220f      	movs	r2, #15
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	43db      	mvns	r3, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4013      	ands	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a49      	ldr	r2, [pc, #292]	; (8002ac8 <HAL_GPIO_Init+0x2f0>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d019      	beq.n	80029da <HAL_GPIO_Init+0x202>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a48      	ldr	r2, [pc, #288]	; (8002acc <HAL_GPIO_Init+0x2f4>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d013      	beq.n	80029d6 <HAL_GPIO_Init+0x1fe>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a47      	ldr	r2, [pc, #284]	; (8002ad0 <HAL_GPIO_Init+0x2f8>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d00d      	beq.n	80029d2 <HAL_GPIO_Init+0x1fa>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a46      	ldr	r2, [pc, #280]	; (8002ad4 <HAL_GPIO_Init+0x2fc>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d007      	beq.n	80029ce <HAL_GPIO_Init+0x1f6>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a45      	ldr	r2, [pc, #276]	; (8002ad8 <HAL_GPIO_Init+0x300>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d101      	bne.n	80029ca <HAL_GPIO_Init+0x1f2>
 80029c6:	2304      	movs	r3, #4
 80029c8:	e008      	b.n	80029dc <HAL_GPIO_Init+0x204>
 80029ca:	2307      	movs	r3, #7
 80029cc:	e006      	b.n	80029dc <HAL_GPIO_Init+0x204>
 80029ce:	2303      	movs	r3, #3
 80029d0:	e004      	b.n	80029dc <HAL_GPIO_Init+0x204>
 80029d2:	2302      	movs	r3, #2
 80029d4:	e002      	b.n	80029dc <HAL_GPIO_Init+0x204>
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <HAL_GPIO_Init+0x204>
 80029da:	2300      	movs	r3, #0
 80029dc:	69fa      	ldr	r2, [r7, #28]
 80029de:	f002 0203 	and.w	r2, r2, #3
 80029e2:	0092      	lsls	r2, r2, #2
 80029e4:	4093      	lsls	r3, r2
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029ec:	4935      	ldr	r1, [pc, #212]	; (8002ac4 <HAL_GPIO_Init+0x2ec>)
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	089b      	lsrs	r3, r3, #2
 80029f2:	3302      	adds	r3, #2
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029fa:	4b38      	ldr	r3, [pc, #224]	; (8002adc <HAL_GPIO_Init+0x304>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	43db      	mvns	r3, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4013      	ands	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a1e:	4a2f      	ldr	r2, [pc, #188]	; (8002adc <HAL_GPIO_Init+0x304>)
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a24:	4b2d      	ldr	r3, [pc, #180]	; (8002adc <HAL_GPIO_Init+0x304>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4013      	ands	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a48:	4a24      	ldr	r2, [pc, #144]	; (8002adc <HAL_GPIO_Init+0x304>)
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a4e:	4b23      	ldr	r3, [pc, #140]	; (8002adc <HAL_GPIO_Init+0x304>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	43db      	mvns	r3, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a72:	4a1a      	ldr	r2, [pc, #104]	; (8002adc <HAL_GPIO_Init+0x304>)
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a78:	4b18      	ldr	r3, [pc, #96]	; (8002adc <HAL_GPIO_Init+0x304>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a9c:	4a0f      	ldr	r2, [pc, #60]	; (8002adc <HAL_GPIO_Init+0x304>)
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	61fb      	str	r3, [r7, #28]
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	2b0f      	cmp	r3, #15
 8002aac:	f67f aea2 	bls.w	80027f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ab0:	bf00      	nop
 8002ab2:	bf00      	nop
 8002ab4:	3724      	adds	r7, #36	; 0x24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	40013800 	.word	0x40013800
 8002ac8:	40020000 	.word	0x40020000
 8002acc:	40020400 	.word	0x40020400
 8002ad0:	40020800 	.word	0x40020800
 8002ad4:	40020c00 	.word	0x40020c00
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	40013c00 	.word	0x40013c00

08002ae0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	807b      	strh	r3, [r7, #2]
 8002aec:	4613      	mov	r3, r2
 8002aee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002af0:	787b      	ldrb	r3, [r7, #1]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002af6:	887a      	ldrh	r2, [r7, #2]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002afc:	e003      	b.n	8002b06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002afe:	887b      	ldrh	r3, [r7, #2]
 8002b00:	041a      	lsls	r2, r3, #16
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	619a      	str	r2, [r3, #24]
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b085      	sub	sp, #20
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b24:	887a      	ldrh	r2, [r7, #2]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	041a      	lsls	r2, r3, #16
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	43d9      	mvns	r1, r3
 8002b30:	887b      	ldrh	r3, [r7, #2]
 8002b32:	400b      	ands	r3, r1
 8002b34:	431a      	orrs	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	619a      	str	r2, [r3, #24]
}
 8002b3a:	bf00      	nop
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
	...

08002b48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b52:	4b08      	ldr	r3, [pc, #32]	; (8002b74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b54:	695a      	ldr	r2, [r3, #20]
 8002b56:	88fb      	ldrh	r3, [r7, #6]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d006      	beq.n	8002b6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b5e:	4a05      	ldr	r2, [pc, #20]	; (8002b74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b60:	88fb      	ldrh	r3, [r7, #6]
 8002b62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b64:	88fb      	ldrh	r3, [r7, #6]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe fc4a 	bl	8001400 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b6c:	bf00      	nop
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40013c00 	.word	0x40013c00

08002b78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e267      	b.n	800305a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d075      	beq.n	8002c82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b96:	4b88      	ldr	r3, [pc, #544]	; (8002db8 <HAL_RCC_OscConfig+0x240>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 030c 	and.w	r3, r3, #12
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	d00c      	beq.n	8002bbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ba2:	4b85      	ldr	r3, [pc, #532]	; (8002db8 <HAL_RCC_OscConfig+0x240>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002baa:	2b08      	cmp	r3, #8
 8002bac:	d112      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bae:	4b82      	ldr	r3, [pc, #520]	; (8002db8 <HAL_RCC_OscConfig+0x240>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bba:	d10b      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bbc:	4b7e      	ldr	r3, [pc, #504]	; (8002db8 <HAL_RCC_OscConfig+0x240>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d05b      	beq.n	8002c80 <HAL_RCC_OscConfig+0x108>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d157      	bne.n	8002c80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e242      	b.n	800305a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bdc:	d106      	bne.n	8002bec <HAL_RCC_OscConfig+0x74>
 8002bde:	4b76      	ldr	r3, [pc, #472]	; (8002db8 <HAL_RCC_OscConfig+0x240>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a75      	ldr	r2, [pc, #468]	; (8002db8 <HAL_RCC_OscConfig+0x240>)
 8002be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	e01d      	b.n	8002c28 <HAL_RCC_OscConfig+0xb0>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bf4:	d10c      	bne.n	8002c10 <HAL_RCC_OscConfig+0x98>
 8002bf6:	4b70      	ldr	r3, [pc, #448]	; (8002db8 <HAL_RCC_OscConfig+0x240>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a6f      	ldr	r2, [pc, #444]	; (8002db8 <HAL_RCC_OscConfig+0x240>)
 8002bfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	4b6d      	ldr	r3, [pc, #436]	; (8002db8 <HAL_RCC_OscConfig+0x240>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a6c      	ldr	r2, [pc, #432]	; (8002db8 <HAL_RCC_OscConfig+0x240>)
 8002c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	e00b      	b.n	8002c28 <HAL_RCC_OscConfig+0xb0>
 8002c10:	4b69      	ldr	r3, [pc, #420]	; (8002db8 <HAL_RCC_OscConfig+0x240>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a68      	ldr	r2, [pc, #416]	; (8002db8 <HAL_RCC_OscConfig+0x240>)
 8002c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c1a:	6013      	str	r3, [r2, #0]
 8002c1c:	4b66      	ldr	r3, [pc, #408]	; (8002db8 <HAL_RCC_OscConfig+0x240>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a65      	ldr	r2, [pc, #404]	; (8002db8 <HAL_RCC_OscConfig+0x240>)
 8002c22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d013      	beq.n	8002c58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c30:	f7ff f81c 	bl	8001c6c <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c38:	f7ff f818 	bl	8001c6c <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b64      	cmp	r3, #100	; 0x64
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e207      	b.n	800305a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c4a:	4b5b      	ldr	r3, [pc, #364]	; (8002db8 <HAL_RCC_OscConfig+0x240>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0xc0>
 8002c56:	e014      	b.n	8002c82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c58:	f7ff f808 	bl	8001c6c <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c60:	f7ff f804 	bl	8001c6c <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b64      	cmp	r3, #100	; 0x64
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e1f3      	b.n	800305a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c72:	4b51      	ldr	r3, [pc, #324]	; (8002db8 <HAL_RCC_OscConfig+0x240>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f0      	bne.n	8002c60 <HAL_RCC_OscConfig+0xe8>
 8002c7e:	e000      	b.n	8002c82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d063      	beq.n	8002d56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c8e:	4b4a      	ldr	r3, [pc, #296]	; (8002db8 <HAL_RCC_OscConfig+0x240>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 030c 	and.w	r3, r3, #12
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00b      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c9a:	4b47      	ldr	r3, [pc, #284]	; (8002db8 <HAL_RCC_OscConfig+0x240>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d11c      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ca6:	4b44      	ldr	r3, [pc, #272]	; (8002db8 <HAL_RCC_OscConfig+0x240>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d116      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cb2:	4b41      	ldr	r3, [pc, #260]	; (8002db8 <HAL_RCC_OscConfig+0x240>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d005      	beq.n	8002cca <HAL_RCC_OscConfig+0x152>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d001      	beq.n	8002cca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e1c7      	b.n	800305a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cca:	4b3b      	ldr	r3, [pc, #236]	; (8002db8 <HAL_RCC_OscConfig+0x240>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	4937      	ldr	r1, [pc, #220]	; (8002db8 <HAL_RCC_OscConfig+0x240>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cde:	e03a      	b.n	8002d56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d020      	beq.n	8002d2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ce8:	4b34      	ldr	r3, [pc, #208]	; (8002dbc <HAL_RCC_OscConfig+0x244>)
 8002cea:	2201      	movs	r2, #1
 8002cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cee:	f7fe ffbd 	bl	8001c6c <HAL_GetTick>
 8002cf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf4:	e008      	b.n	8002d08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cf6:	f7fe ffb9 	bl	8001c6c <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e1a8      	b.n	800305a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d08:	4b2b      	ldr	r3, [pc, #172]	; (8002db8 <HAL_RCC_OscConfig+0x240>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d0f0      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d14:	4b28      	ldr	r3, [pc, #160]	; (8002db8 <HAL_RCC_OscConfig+0x240>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	4925      	ldr	r1, [pc, #148]	; (8002db8 <HAL_RCC_OscConfig+0x240>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	600b      	str	r3, [r1, #0]
 8002d28:	e015      	b.n	8002d56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d2a:	4b24      	ldr	r3, [pc, #144]	; (8002dbc <HAL_RCC_OscConfig+0x244>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d30:	f7fe ff9c 	bl	8001c6c <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d38:	f7fe ff98 	bl	8001c6c <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e187      	b.n	800305a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d4a:	4b1b      	ldr	r3, [pc, #108]	; (8002db8 <HAL_RCC_OscConfig+0x240>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f0      	bne.n	8002d38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d036      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d016      	beq.n	8002d98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d6a:	4b15      	ldr	r3, [pc, #84]	; (8002dc0 <HAL_RCC_OscConfig+0x248>)
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d70:	f7fe ff7c 	bl	8001c6c <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d78:	f7fe ff78 	bl	8001c6c <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e167      	b.n	800305a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d8a:	4b0b      	ldr	r3, [pc, #44]	; (8002db8 <HAL_RCC_OscConfig+0x240>)
 8002d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0f0      	beq.n	8002d78 <HAL_RCC_OscConfig+0x200>
 8002d96:	e01b      	b.n	8002dd0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d98:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <HAL_RCC_OscConfig+0x248>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d9e:	f7fe ff65 	bl	8001c6c <HAL_GetTick>
 8002da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da4:	e00e      	b.n	8002dc4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002da6:	f7fe ff61 	bl	8001c6c <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d907      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e150      	b.n	800305a <HAL_RCC_OscConfig+0x4e2>
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	42470000 	.word	0x42470000
 8002dc0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dc4:	4b88      	ldr	r3, [pc, #544]	; (8002fe8 <HAL_RCC_OscConfig+0x470>)
 8002dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1ea      	bne.n	8002da6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 8097 	beq.w	8002f0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dde:	2300      	movs	r3, #0
 8002de0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002de2:	4b81      	ldr	r3, [pc, #516]	; (8002fe8 <HAL_RCC_OscConfig+0x470>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10f      	bne.n	8002e0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	60bb      	str	r3, [r7, #8]
 8002df2:	4b7d      	ldr	r3, [pc, #500]	; (8002fe8 <HAL_RCC_OscConfig+0x470>)
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	4a7c      	ldr	r2, [pc, #496]	; (8002fe8 <HAL_RCC_OscConfig+0x470>)
 8002df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dfe:	4b7a      	ldr	r3, [pc, #488]	; (8002fe8 <HAL_RCC_OscConfig+0x470>)
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e06:	60bb      	str	r3, [r7, #8]
 8002e08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0e:	4b77      	ldr	r3, [pc, #476]	; (8002fec <HAL_RCC_OscConfig+0x474>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d118      	bne.n	8002e4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e1a:	4b74      	ldr	r3, [pc, #464]	; (8002fec <HAL_RCC_OscConfig+0x474>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a73      	ldr	r2, [pc, #460]	; (8002fec <HAL_RCC_OscConfig+0x474>)
 8002e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e26:	f7fe ff21 	bl	8001c6c <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e2e:	f7fe ff1d 	bl	8001c6c <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e10c      	b.n	800305a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e40:	4b6a      	ldr	r3, [pc, #424]	; (8002fec <HAL_RCC_OscConfig+0x474>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0f0      	beq.n	8002e2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d106      	bne.n	8002e62 <HAL_RCC_OscConfig+0x2ea>
 8002e54:	4b64      	ldr	r3, [pc, #400]	; (8002fe8 <HAL_RCC_OscConfig+0x470>)
 8002e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e58:	4a63      	ldr	r2, [pc, #396]	; (8002fe8 <HAL_RCC_OscConfig+0x470>)
 8002e5a:	f043 0301 	orr.w	r3, r3, #1
 8002e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e60:	e01c      	b.n	8002e9c <HAL_RCC_OscConfig+0x324>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2b05      	cmp	r3, #5
 8002e68:	d10c      	bne.n	8002e84 <HAL_RCC_OscConfig+0x30c>
 8002e6a:	4b5f      	ldr	r3, [pc, #380]	; (8002fe8 <HAL_RCC_OscConfig+0x470>)
 8002e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6e:	4a5e      	ldr	r2, [pc, #376]	; (8002fe8 <HAL_RCC_OscConfig+0x470>)
 8002e70:	f043 0304 	orr.w	r3, r3, #4
 8002e74:	6713      	str	r3, [r2, #112]	; 0x70
 8002e76:	4b5c      	ldr	r3, [pc, #368]	; (8002fe8 <HAL_RCC_OscConfig+0x470>)
 8002e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7a:	4a5b      	ldr	r2, [pc, #364]	; (8002fe8 <HAL_RCC_OscConfig+0x470>)
 8002e7c:	f043 0301 	orr.w	r3, r3, #1
 8002e80:	6713      	str	r3, [r2, #112]	; 0x70
 8002e82:	e00b      	b.n	8002e9c <HAL_RCC_OscConfig+0x324>
 8002e84:	4b58      	ldr	r3, [pc, #352]	; (8002fe8 <HAL_RCC_OscConfig+0x470>)
 8002e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e88:	4a57      	ldr	r2, [pc, #348]	; (8002fe8 <HAL_RCC_OscConfig+0x470>)
 8002e8a:	f023 0301 	bic.w	r3, r3, #1
 8002e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e90:	4b55      	ldr	r3, [pc, #340]	; (8002fe8 <HAL_RCC_OscConfig+0x470>)
 8002e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e94:	4a54      	ldr	r2, [pc, #336]	; (8002fe8 <HAL_RCC_OscConfig+0x470>)
 8002e96:	f023 0304 	bic.w	r3, r3, #4
 8002e9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d015      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea4:	f7fe fee2 	bl	8001c6c <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eaa:	e00a      	b.n	8002ec2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eac:	f7fe fede 	bl	8001c6c <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e0cb      	b.n	800305a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec2:	4b49      	ldr	r3, [pc, #292]	; (8002fe8 <HAL_RCC_OscConfig+0x470>)
 8002ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0ee      	beq.n	8002eac <HAL_RCC_OscConfig+0x334>
 8002ece:	e014      	b.n	8002efa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed0:	f7fe fecc 	bl	8001c6c <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ed6:	e00a      	b.n	8002eee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ed8:	f7fe fec8 	bl	8001c6c <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e0b5      	b.n	800305a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eee:	4b3e      	ldr	r3, [pc, #248]	; (8002fe8 <HAL_RCC_OscConfig+0x470>)
 8002ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1ee      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002efa:	7dfb      	ldrb	r3, [r7, #23]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d105      	bne.n	8002f0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f00:	4b39      	ldr	r3, [pc, #228]	; (8002fe8 <HAL_RCC_OscConfig+0x470>)
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	4a38      	ldr	r2, [pc, #224]	; (8002fe8 <HAL_RCC_OscConfig+0x470>)
 8002f06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 80a1 	beq.w	8003058 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f16:	4b34      	ldr	r3, [pc, #208]	; (8002fe8 <HAL_RCC_OscConfig+0x470>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 030c 	and.w	r3, r3, #12
 8002f1e:	2b08      	cmp	r3, #8
 8002f20:	d05c      	beq.n	8002fdc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d141      	bne.n	8002fae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f2a:	4b31      	ldr	r3, [pc, #196]	; (8002ff0 <HAL_RCC_OscConfig+0x478>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f30:	f7fe fe9c 	bl	8001c6c <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f38:	f7fe fe98 	bl	8001c6c <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e087      	b.n	800305a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f4a:	4b27      	ldr	r3, [pc, #156]	; (8002fe8 <HAL_RCC_OscConfig+0x470>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f0      	bne.n	8002f38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	69da      	ldr	r2, [r3, #28]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f64:	019b      	lsls	r3, r3, #6
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6c:	085b      	lsrs	r3, r3, #1
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	041b      	lsls	r3, r3, #16
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f78:	061b      	lsls	r3, r3, #24
 8002f7a:	491b      	ldr	r1, [pc, #108]	; (8002fe8 <HAL_RCC_OscConfig+0x470>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f80:	4b1b      	ldr	r3, [pc, #108]	; (8002ff0 <HAL_RCC_OscConfig+0x478>)
 8002f82:	2201      	movs	r2, #1
 8002f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f86:	f7fe fe71 	bl	8001c6c <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f8e:	f7fe fe6d 	bl	8001c6c <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e05c      	b.n	800305a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fa0:	4b11      	ldr	r3, [pc, #68]	; (8002fe8 <HAL_RCC_OscConfig+0x470>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0f0      	beq.n	8002f8e <HAL_RCC_OscConfig+0x416>
 8002fac:	e054      	b.n	8003058 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fae:	4b10      	ldr	r3, [pc, #64]	; (8002ff0 <HAL_RCC_OscConfig+0x478>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb4:	f7fe fe5a 	bl	8001c6c <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fbc:	f7fe fe56 	bl	8001c6c <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e045      	b.n	800305a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fce:	4b06      	ldr	r3, [pc, #24]	; (8002fe8 <HAL_RCC_OscConfig+0x470>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1f0      	bne.n	8002fbc <HAL_RCC_OscConfig+0x444>
 8002fda:	e03d      	b.n	8003058 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d107      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e038      	b.n	800305a <HAL_RCC_OscConfig+0x4e2>
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	40007000 	.word	0x40007000
 8002ff0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ff4:	4b1b      	ldr	r3, [pc, #108]	; (8003064 <HAL_RCC_OscConfig+0x4ec>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d028      	beq.n	8003054 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800300c:	429a      	cmp	r2, r3
 800300e:	d121      	bne.n	8003054 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800301a:	429a      	cmp	r2, r3
 800301c:	d11a      	bne.n	8003054 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003024:	4013      	ands	r3, r2
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800302a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800302c:	4293      	cmp	r3, r2
 800302e:	d111      	bne.n	8003054 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303a:	085b      	lsrs	r3, r3, #1
 800303c:	3b01      	subs	r3, #1
 800303e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003040:	429a      	cmp	r2, r3
 8003042:	d107      	bne.n	8003054 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003050:	429a      	cmp	r2, r3
 8003052:	d001      	beq.n	8003058 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e000      	b.n	800305a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3718      	adds	r7, #24
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40023800 	.word	0x40023800

08003068 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d101      	bne.n	800307c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e0cc      	b.n	8003216 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800307c:	4b68      	ldr	r3, [pc, #416]	; (8003220 <HAL_RCC_ClockConfig+0x1b8>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	429a      	cmp	r2, r3
 8003088:	d90c      	bls.n	80030a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308a:	4b65      	ldr	r3, [pc, #404]	; (8003220 <HAL_RCC_ClockConfig+0x1b8>)
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003092:	4b63      	ldr	r3, [pc, #396]	; (8003220 <HAL_RCC_ClockConfig+0x1b8>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	429a      	cmp	r2, r3
 800309e:	d001      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e0b8      	b.n	8003216 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d020      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d005      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030bc:	4b59      	ldr	r3, [pc, #356]	; (8003224 <HAL_RCC_ClockConfig+0x1bc>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	4a58      	ldr	r2, [pc, #352]	; (8003224 <HAL_RCC_ClockConfig+0x1bc>)
 80030c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0308 	and.w	r3, r3, #8
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d005      	beq.n	80030e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030d4:	4b53      	ldr	r3, [pc, #332]	; (8003224 <HAL_RCC_ClockConfig+0x1bc>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	4a52      	ldr	r2, [pc, #328]	; (8003224 <HAL_RCC_ClockConfig+0x1bc>)
 80030da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030e0:	4b50      	ldr	r3, [pc, #320]	; (8003224 <HAL_RCC_ClockConfig+0x1bc>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	494d      	ldr	r1, [pc, #308]	; (8003224 <HAL_RCC_ClockConfig+0x1bc>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d044      	beq.n	8003188 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d107      	bne.n	8003116 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003106:	4b47      	ldr	r3, [pc, #284]	; (8003224 <HAL_RCC_ClockConfig+0x1bc>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d119      	bne.n	8003146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e07f      	b.n	8003216 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2b02      	cmp	r3, #2
 800311c:	d003      	beq.n	8003126 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003122:	2b03      	cmp	r3, #3
 8003124:	d107      	bne.n	8003136 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003126:	4b3f      	ldr	r3, [pc, #252]	; (8003224 <HAL_RCC_ClockConfig+0x1bc>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d109      	bne.n	8003146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e06f      	b.n	8003216 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003136:	4b3b      	ldr	r3, [pc, #236]	; (8003224 <HAL_RCC_ClockConfig+0x1bc>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e067      	b.n	8003216 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003146:	4b37      	ldr	r3, [pc, #220]	; (8003224 <HAL_RCC_ClockConfig+0x1bc>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f023 0203 	bic.w	r2, r3, #3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	4934      	ldr	r1, [pc, #208]	; (8003224 <HAL_RCC_ClockConfig+0x1bc>)
 8003154:	4313      	orrs	r3, r2
 8003156:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003158:	f7fe fd88 	bl	8001c6c <HAL_GetTick>
 800315c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800315e:	e00a      	b.n	8003176 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003160:	f7fe fd84 	bl	8001c6c <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	f241 3288 	movw	r2, #5000	; 0x1388
 800316e:	4293      	cmp	r3, r2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e04f      	b.n	8003216 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003176:	4b2b      	ldr	r3, [pc, #172]	; (8003224 <HAL_RCC_ClockConfig+0x1bc>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 020c 	and.w	r2, r3, #12
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	429a      	cmp	r2, r3
 8003186:	d1eb      	bne.n	8003160 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003188:	4b25      	ldr	r3, [pc, #148]	; (8003220 <HAL_RCC_ClockConfig+0x1b8>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	429a      	cmp	r2, r3
 8003194:	d20c      	bcs.n	80031b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003196:	4b22      	ldr	r3, [pc, #136]	; (8003220 <HAL_RCC_ClockConfig+0x1b8>)
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	b2d2      	uxtb	r2, r2
 800319c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800319e:	4b20      	ldr	r3, [pc, #128]	; (8003220 <HAL_RCC_ClockConfig+0x1b8>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d001      	beq.n	80031b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e032      	b.n	8003216 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0304 	and.w	r3, r3, #4
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d008      	beq.n	80031ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031bc:	4b19      	ldr	r3, [pc, #100]	; (8003224 <HAL_RCC_ClockConfig+0x1bc>)
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	4916      	ldr	r1, [pc, #88]	; (8003224 <HAL_RCC_ClockConfig+0x1bc>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0308 	and.w	r3, r3, #8
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d009      	beq.n	80031ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031da:	4b12      	ldr	r3, [pc, #72]	; (8003224 <HAL_RCC_ClockConfig+0x1bc>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	490e      	ldr	r1, [pc, #56]	; (8003224 <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031ee:	f000 f821 	bl	8003234 <HAL_RCC_GetSysClockFreq>
 80031f2:	4602      	mov	r2, r0
 80031f4:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	091b      	lsrs	r3, r3, #4
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	490a      	ldr	r1, [pc, #40]	; (8003228 <HAL_RCC_ClockConfig+0x1c0>)
 8003200:	5ccb      	ldrb	r3, [r1, r3]
 8003202:	fa22 f303 	lsr.w	r3, r2, r3
 8003206:	4a09      	ldr	r2, [pc, #36]	; (800322c <HAL_RCC_ClockConfig+0x1c4>)
 8003208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800320a:	4b09      	ldr	r3, [pc, #36]	; (8003230 <HAL_RCC_ClockConfig+0x1c8>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f7fe fce8 	bl	8001be4 <HAL_InitTick>

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	40023c00 	.word	0x40023c00
 8003224:	40023800 	.word	0x40023800
 8003228:	08006358 	.word	0x08006358
 800322c:	20000000 	.word	0x20000000
 8003230:	20000004 	.word	0x20000004

08003234 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003238:	b094      	sub	sp, #80	; 0x50
 800323a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800323c:	2300      	movs	r3, #0
 800323e:	647b      	str	r3, [r7, #68]	; 0x44
 8003240:	2300      	movs	r3, #0
 8003242:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003244:	2300      	movs	r3, #0
 8003246:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003248:	2300      	movs	r3, #0
 800324a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800324c:	4b79      	ldr	r3, [pc, #484]	; (8003434 <HAL_RCC_GetSysClockFreq+0x200>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 030c 	and.w	r3, r3, #12
 8003254:	2b08      	cmp	r3, #8
 8003256:	d00d      	beq.n	8003274 <HAL_RCC_GetSysClockFreq+0x40>
 8003258:	2b08      	cmp	r3, #8
 800325a:	f200 80e1 	bhi.w	8003420 <HAL_RCC_GetSysClockFreq+0x1ec>
 800325e:	2b00      	cmp	r3, #0
 8003260:	d002      	beq.n	8003268 <HAL_RCC_GetSysClockFreq+0x34>
 8003262:	2b04      	cmp	r3, #4
 8003264:	d003      	beq.n	800326e <HAL_RCC_GetSysClockFreq+0x3a>
 8003266:	e0db      	b.n	8003420 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003268:	4b73      	ldr	r3, [pc, #460]	; (8003438 <HAL_RCC_GetSysClockFreq+0x204>)
 800326a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800326c:	e0db      	b.n	8003426 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800326e:	4b73      	ldr	r3, [pc, #460]	; (800343c <HAL_RCC_GetSysClockFreq+0x208>)
 8003270:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003272:	e0d8      	b.n	8003426 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003274:	4b6f      	ldr	r3, [pc, #444]	; (8003434 <HAL_RCC_GetSysClockFreq+0x200>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800327c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800327e:	4b6d      	ldr	r3, [pc, #436]	; (8003434 <HAL_RCC_GetSysClockFreq+0x200>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d063      	beq.n	8003352 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800328a:	4b6a      	ldr	r3, [pc, #424]	; (8003434 <HAL_RCC_GetSysClockFreq+0x200>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	099b      	lsrs	r3, r3, #6
 8003290:	2200      	movs	r2, #0
 8003292:	63bb      	str	r3, [r7, #56]	; 0x38
 8003294:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800329c:	633b      	str	r3, [r7, #48]	; 0x30
 800329e:	2300      	movs	r3, #0
 80032a0:	637b      	str	r3, [r7, #52]	; 0x34
 80032a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80032a6:	4622      	mov	r2, r4
 80032a8:	462b      	mov	r3, r5
 80032aa:	f04f 0000 	mov.w	r0, #0
 80032ae:	f04f 0100 	mov.w	r1, #0
 80032b2:	0159      	lsls	r1, r3, #5
 80032b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032b8:	0150      	lsls	r0, r2, #5
 80032ba:	4602      	mov	r2, r0
 80032bc:	460b      	mov	r3, r1
 80032be:	4621      	mov	r1, r4
 80032c0:	1a51      	subs	r1, r2, r1
 80032c2:	6139      	str	r1, [r7, #16]
 80032c4:	4629      	mov	r1, r5
 80032c6:	eb63 0301 	sbc.w	r3, r3, r1
 80032ca:	617b      	str	r3, [r7, #20]
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	f04f 0300 	mov.w	r3, #0
 80032d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032d8:	4659      	mov	r1, fp
 80032da:	018b      	lsls	r3, r1, #6
 80032dc:	4651      	mov	r1, sl
 80032de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032e2:	4651      	mov	r1, sl
 80032e4:	018a      	lsls	r2, r1, #6
 80032e6:	4651      	mov	r1, sl
 80032e8:	ebb2 0801 	subs.w	r8, r2, r1
 80032ec:	4659      	mov	r1, fp
 80032ee:	eb63 0901 	sbc.w	r9, r3, r1
 80032f2:	f04f 0200 	mov.w	r2, #0
 80032f6:	f04f 0300 	mov.w	r3, #0
 80032fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003302:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003306:	4690      	mov	r8, r2
 8003308:	4699      	mov	r9, r3
 800330a:	4623      	mov	r3, r4
 800330c:	eb18 0303 	adds.w	r3, r8, r3
 8003310:	60bb      	str	r3, [r7, #8]
 8003312:	462b      	mov	r3, r5
 8003314:	eb49 0303 	adc.w	r3, r9, r3
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	f04f 0200 	mov.w	r2, #0
 800331e:	f04f 0300 	mov.w	r3, #0
 8003322:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003326:	4629      	mov	r1, r5
 8003328:	024b      	lsls	r3, r1, #9
 800332a:	4621      	mov	r1, r4
 800332c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003330:	4621      	mov	r1, r4
 8003332:	024a      	lsls	r2, r1, #9
 8003334:	4610      	mov	r0, r2
 8003336:	4619      	mov	r1, r3
 8003338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800333a:	2200      	movs	r2, #0
 800333c:	62bb      	str	r3, [r7, #40]	; 0x28
 800333e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003340:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003344:	f7fc ffa4 	bl	8000290 <__aeabi_uldivmod>
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	4613      	mov	r3, r2
 800334e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003350:	e058      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003352:	4b38      	ldr	r3, [pc, #224]	; (8003434 <HAL_RCC_GetSysClockFreq+0x200>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	099b      	lsrs	r3, r3, #6
 8003358:	2200      	movs	r2, #0
 800335a:	4618      	mov	r0, r3
 800335c:	4611      	mov	r1, r2
 800335e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003362:	623b      	str	r3, [r7, #32]
 8003364:	2300      	movs	r3, #0
 8003366:	627b      	str	r3, [r7, #36]	; 0x24
 8003368:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800336c:	4642      	mov	r2, r8
 800336e:	464b      	mov	r3, r9
 8003370:	f04f 0000 	mov.w	r0, #0
 8003374:	f04f 0100 	mov.w	r1, #0
 8003378:	0159      	lsls	r1, r3, #5
 800337a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800337e:	0150      	lsls	r0, r2, #5
 8003380:	4602      	mov	r2, r0
 8003382:	460b      	mov	r3, r1
 8003384:	4641      	mov	r1, r8
 8003386:	ebb2 0a01 	subs.w	sl, r2, r1
 800338a:	4649      	mov	r1, r9
 800338c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003390:	f04f 0200 	mov.w	r2, #0
 8003394:	f04f 0300 	mov.w	r3, #0
 8003398:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800339c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033a4:	ebb2 040a 	subs.w	r4, r2, sl
 80033a8:	eb63 050b 	sbc.w	r5, r3, fp
 80033ac:	f04f 0200 	mov.w	r2, #0
 80033b0:	f04f 0300 	mov.w	r3, #0
 80033b4:	00eb      	lsls	r3, r5, #3
 80033b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033ba:	00e2      	lsls	r2, r4, #3
 80033bc:	4614      	mov	r4, r2
 80033be:	461d      	mov	r5, r3
 80033c0:	4643      	mov	r3, r8
 80033c2:	18e3      	adds	r3, r4, r3
 80033c4:	603b      	str	r3, [r7, #0]
 80033c6:	464b      	mov	r3, r9
 80033c8:	eb45 0303 	adc.w	r3, r5, r3
 80033cc:	607b      	str	r3, [r7, #4]
 80033ce:	f04f 0200 	mov.w	r2, #0
 80033d2:	f04f 0300 	mov.w	r3, #0
 80033d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033da:	4629      	mov	r1, r5
 80033dc:	028b      	lsls	r3, r1, #10
 80033de:	4621      	mov	r1, r4
 80033e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033e4:	4621      	mov	r1, r4
 80033e6:	028a      	lsls	r2, r1, #10
 80033e8:	4610      	mov	r0, r2
 80033ea:	4619      	mov	r1, r3
 80033ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033ee:	2200      	movs	r2, #0
 80033f0:	61bb      	str	r3, [r7, #24]
 80033f2:	61fa      	str	r2, [r7, #28]
 80033f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033f8:	f7fc ff4a 	bl	8000290 <__aeabi_uldivmod>
 80033fc:	4602      	mov	r2, r0
 80033fe:	460b      	mov	r3, r1
 8003400:	4613      	mov	r3, r2
 8003402:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003404:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <HAL_RCC_GetSysClockFreq+0x200>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	0c1b      	lsrs	r3, r3, #16
 800340a:	f003 0303 	and.w	r3, r3, #3
 800340e:	3301      	adds	r3, #1
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003414:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003416:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003418:	fbb2 f3f3 	udiv	r3, r2, r3
 800341c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800341e:	e002      	b.n	8003426 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003420:	4b05      	ldr	r3, [pc, #20]	; (8003438 <HAL_RCC_GetSysClockFreq+0x204>)
 8003422:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003424:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003428:	4618      	mov	r0, r3
 800342a:	3750      	adds	r7, #80	; 0x50
 800342c:	46bd      	mov	sp, r7
 800342e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003432:	bf00      	nop
 8003434:	40023800 	.word	0x40023800
 8003438:	00f42400 	.word	0x00f42400
 800343c:	007a1200 	.word	0x007a1200

08003440 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003444:	4b03      	ldr	r3, [pc, #12]	; (8003454 <HAL_RCC_GetHCLKFreq+0x14>)
 8003446:	681b      	ldr	r3, [r3, #0]
}
 8003448:	4618      	mov	r0, r3
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	20000000 	.word	0x20000000

08003458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800345c:	f7ff fff0 	bl	8003440 <HAL_RCC_GetHCLKFreq>
 8003460:	4602      	mov	r2, r0
 8003462:	4b05      	ldr	r3, [pc, #20]	; (8003478 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	0a9b      	lsrs	r3, r3, #10
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	4903      	ldr	r1, [pc, #12]	; (800347c <HAL_RCC_GetPCLK1Freq+0x24>)
 800346e:	5ccb      	ldrb	r3, [r1, r3]
 8003470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003474:	4618      	mov	r0, r3
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40023800 	.word	0x40023800
 800347c:	08006368 	.word	0x08006368

08003480 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003484:	f7ff ffdc 	bl	8003440 <HAL_RCC_GetHCLKFreq>
 8003488:	4602      	mov	r2, r0
 800348a:	4b05      	ldr	r3, [pc, #20]	; (80034a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	0b5b      	lsrs	r3, r3, #13
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	4903      	ldr	r1, [pc, #12]	; (80034a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003496:	5ccb      	ldrb	r3, [r1, r3]
 8003498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800349c:	4618      	mov	r0, r3
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40023800 	.word	0x40023800
 80034a4:	08006368 	.word	0x08006368

080034a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e041      	b.n	800353e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d106      	bne.n	80034d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fe f90a 	bl	80016e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2202      	movs	r2, #2
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3304      	adds	r3, #4
 80034e4:	4619      	mov	r1, r3
 80034e6:	4610      	mov	r0, r2
 80034e8:	f000 fcae 	bl	8003e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
	...

08003548 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b01      	cmp	r3, #1
 800355a:	d001      	beq.n	8003560 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e03c      	b.n	80035da <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2202      	movs	r2, #2
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a1e      	ldr	r2, [pc, #120]	; (80035e8 <HAL_TIM_Base_Start+0xa0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d018      	beq.n	80035a4 <HAL_TIM_Base_Start+0x5c>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800357a:	d013      	beq.n	80035a4 <HAL_TIM_Base_Start+0x5c>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a1a      	ldr	r2, [pc, #104]	; (80035ec <HAL_TIM_Base_Start+0xa4>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d00e      	beq.n	80035a4 <HAL_TIM_Base_Start+0x5c>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a19      	ldr	r2, [pc, #100]	; (80035f0 <HAL_TIM_Base_Start+0xa8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d009      	beq.n	80035a4 <HAL_TIM_Base_Start+0x5c>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a17      	ldr	r2, [pc, #92]	; (80035f4 <HAL_TIM_Base_Start+0xac>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d004      	beq.n	80035a4 <HAL_TIM_Base_Start+0x5c>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a16      	ldr	r2, [pc, #88]	; (80035f8 <HAL_TIM_Base_Start+0xb0>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d111      	bne.n	80035c8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2b06      	cmp	r3, #6
 80035b4:	d010      	beq.n	80035d8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f042 0201 	orr.w	r2, r2, #1
 80035c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035c6:	e007      	b.n	80035d8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f042 0201 	orr.w	r2, r2, #1
 80035d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	40010000 	.word	0x40010000
 80035ec:	40000400 	.word	0x40000400
 80035f0:	40000800 	.word	0x40000800
 80035f4:	40000c00 	.word	0x40000c00
 80035f8:	40014000 	.word	0x40014000

080035fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b01      	cmp	r3, #1
 800360e:	d001      	beq.n	8003614 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e044      	b.n	800369e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f042 0201 	orr.w	r2, r2, #1
 800362a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a1e      	ldr	r2, [pc, #120]	; (80036ac <HAL_TIM_Base_Start_IT+0xb0>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d018      	beq.n	8003668 <HAL_TIM_Base_Start_IT+0x6c>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800363e:	d013      	beq.n	8003668 <HAL_TIM_Base_Start_IT+0x6c>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a1a      	ldr	r2, [pc, #104]	; (80036b0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d00e      	beq.n	8003668 <HAL_TIM_Base_Start_IT+0x6c>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a19      	ldr	r2, [pc, #100]	; (80036b4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d009      	beq.n	8003668 <HAL_TIM_Base_Start_IT+0x6c>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a17      	ldr	r2, [pc, #92]	; (80036b8 <HAL_TIM_Base_Start_IT+0xbc>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d004      	beq.n	8003668 <HAL_TIM_Base_Start_IT+0x6c>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a16      	ldr	r2, [pc, #88]	; (80036bc <HAL_TIM_Base_Start_IT+0xc0>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d111      	bne.n	800368c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2b06      	cmp	r3, #6
 8003678:	d010      	beq.n	800369c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f042 0201 	orr.w	r2, r2, #1
 8003688:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800368a:	e007      	b.n	800369c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0201 	orr.w	r2, r2, #1
 800369a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3714      	adds	r7, #20
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	40010000 	.word	0x40010000
 80036b0:	40000400 	.word	0x40000400
 80036b4:	40000800 	.word	0x40000800
 80036b8:	40000c00 	.word	0x40000c00
 80036bc:	40014000 	.word	0x40014000

080036c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e041      	b.n	8003756 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d106      	bne.n	80036ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f839 	bl	800375e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	3304      	adds	r3, #4
 80036fc:	4619      	mov	r1, r3
 80036fe:	4610      	mov	r0, r2
 8003700:	f000 fba2 	bl	8003e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800375e:	b480      	push	{r7}
 8003760:	b083      	sub	sp, #12
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003766:	bf00      	nop
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
	...

08003774 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d109      	bne.n	8003798 <HAL_TIM_PWM_Start+0x24>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b01      	cmp	r3, #1
 800378e:	bf14      	ite	ne
 8003790:	2301      	movne	r3, #1
 8003792:	2300      	moveq	r3, #0
 8003794:	b2db      	uxtb	r3, r3
 8003796:	e022      	b.n	80037de <HAL_TIM_PWM_Start+0x6a>
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	2b04      	cmp	r3, #4
 800379c:	d109      	bne.n	80037b2 <HAL_TIM_PWM_Start+0x3e>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	bf14      	ite	ne
 80037aa:	2301      	movne	r3, #1
 80037ac:	2300      	moveq	r3, #0
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	e015      	b.n	80037de <HAL_TIM_PWM_Start+0x6a>
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	d109      	bne.n	80037cc <HAL_TIM_PWM_Start+0x58>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	bf14      	ite	ne
 80037c4:	2301      	movne	r3, #1
 80037c6:	2300      	moveq	r3, #0
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	e008      	b.n	80037de <HAL_TIM_PWM_Start+0x6a>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	bf14      	ite	ne
 80037d8:	2301      	movne	r3, #1
 80037da:	2300      	moveq	r3, #0
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e068      	b.n	80038b8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d104      	bne.n	80037f6 <HAL_TIM_PWM_Start+0x82>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037f4:	e013      	b.n	800381e <HAL_TIM_PWM_Start+0xaa>
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	2b04      	cmp	r3, #4
 80037fa:	d104      	bne.n	8003806 <HAL_TIM_PWM_Start+0x92>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003804:	e00b      	b.n	800381e <HAL_TIM_PWM_Start+0xaa>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	2b08      	cmp	r3, #8
 800380a:	d104      	bne.n	8003816 <HAL_TIM_PWM_Start+0xa2>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2202      	movs	r2, #2
 8003810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003814:	e003      	b.n	800381e <HAL_TIM_PWM_Start+0xaa>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2202      	movs	r2, #2
 800381a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2201      	movs	r2, #1
 8003824:	6839      	ldr	r1, [r7, #0]
 8003826:	4618      	mov	r0, r3
 8003828:	f000 fdb4 	bl	8004394 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a23      	ldr	r2, [pc, #140]	; (80038c0 <HAL_TIM_PWM_Start+0x14c>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d107      	bne.n	8003846 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003844:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a1d      	ldr	r2, [pc, #116]	; (80038c0 <HAL_TIM_PWM_Start+0x14c>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d018      	beq.n	8003882 <HAL_TIM_PWM_Start+0x10e>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003858:	d013      	beq.n	8003882 <HAL_TIM_PWM_Start+0x10e>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a19      	ldr	r2, [pc, #100]	; (80038c4 <HAL_TIM_PWM_Start+0x150>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d00e      	beq.n	8003882 <HAL_TIM_PWM_Start+0x10e>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a17      	ldr	r2, [pc, #92]	; (80038c8 <HAL_TIM_PWM_Start+0x154>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d009      	beq.n	8003882 <HAL_TIM_PWM_Start+0x10e>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a16      	ldr	r2, [pc, #88]	; (80038cc <HAL_TIM_PWM_Start+0x158>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d004      	beq.n	8003882 <HAL_TIM_PWM_Start+0x10e>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a14      	ldr	r2, [pc, #80]	; (80038d0 <HAL_TIM_PWM_Start+0x15c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d111      	bne.n	80038a6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f003 0307 	and.w	r3, r3, #7
 800388c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2b06      	cmp	r3, #6
 8003892:	d010      	beq.n	80038b6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0201 	orr.w	r2, r2, #1
 80038a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038a4:	e007      	b.n	80038b6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f042 0201 	orr.w	r2, r2, #1
 80038b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3710      	adds	r7, #16
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40010000 	.word	0x40010000
 80038c4:	40000400 	.word	0x40000400
 80038c8:	40000800 	.word	0x40000800
 80038cc:	40000c00 	.word	0x40000c00
 80038d0:	40014000 	.word	0x40014000

080038d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d122      	bne.n	8003930 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d11b      	bne.n	8003930 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f06f 0202 	mvn.w	r2, #2
 8003900:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	f003 0303 	and.w	r3, r3, #3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 fa77 	bl	8003e0a <HAL_TIM_IC_CaptureCallback>
 800391c:	e005      	b.n	800392a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 fa69 	bl	8003df6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 fa7a 	bl	8003e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	f003 0304 	and.w	r3, r3, #4
 800393a:	2b04      	cmp	r3, #4
 800393c:	d122      	bne.n	8003984 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b04      	cmp	r3, #4
 800394a:	d11b      	bne.n	8003984 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f06f 0204 	mvn.w	r2, #4
 8003954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2202      	movs	r2, #2
 800395a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 fa4d 	bl	8003e0a <HAL_TIM_IC_CaptureCallback>
 8003970:	e005      	b.n	800397e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 fa3f 	bl	8003df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 fa50 	bl	8003e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	f003 0308 	and.w	r3, r3, #8
 800398e:	2b08      	cmp	r3, #8
 8003990:	d122      	bne.n	80039d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f003 0308 	and.w	r3, r3, #8
 800399c:	2b08      	cmp	r3, #8
 800399e:	d11b      	bne.n	80039d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f06f 0208 	mvn.w	r2, #8
 80039a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2204      	movs	r2, #4
 80039ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	f003 0303 	and.w	r3, r3, #3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 fa23 	bl	8003e0a <HAL_TIM_IC_CaptureCallback>
 80039c4:	e005      	b.n	80039d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 fa15 	bl	8003df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 fa26 	bl	8003e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	f003 0310 	and.w	r3, r3, #16
 80039e2:	2b10      	cmp	r3, #16
 80039e4:	d122      	bne.n	8003a2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	f003 0310 	and.w	r3, r3, #16
 80039f0:	2b10      	cmp	r3, #16
 80039f2:	d11b      	bne.n	8003a2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f06f 0210 	mvn.w	r2, #16
 80039fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2208      	movs	r2, #8
 8003a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f9f9 	bl	8003e0a <HAL_TIM_IC_CaptureCallback>
 8003a18:	e005      	b.n	8003a26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f9eb 	bl	8003df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 f9fc 	bl	8003e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d10e      	bne.n	8003a58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d107      	bne.n	8003a58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f06f 0201 	mvn.w	r2, #1
 8003a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7fd fcf6 	bl	8001444 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a62:	2b80      	cmp	r3, #128	; 0x80
 8003a64:	d10e      	bne.n	8003a84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a70:	2b80      	cmp	r3, #128	; 0x80
 8003a72:	d107      	bne.n	8003a84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 fd26 	bl	80044d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8e:	2b40      	cmp	r3, #64	; 0x40
 8003a90:	d10e      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9c:	2b40      	cmp	r3, #64	; 0x40
 8003a9e:	d107      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f9c1 	bl	8003e32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	f003 0320 	and.w	r3, r3, #32
 8003aba:	2b20      	cmp	r3, #32
 8003abc:	d10e      	bne.n	8003adc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f003 0320 	and.w	r3, r3, #32
 8003ac8:	2b20      	cmp	r3, #32
 8003aca:	d107      	bne.n	8003adc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f06f 0220 	mvn.w	r2, #32
 8003ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 fcf0 	bl	80044bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003adc:	bf00      	nop
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003af0:	2300      	movs	r3, #0
 8003af2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d101      	bne.n	8003b02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003afe:	2302      	movs	r3, #2
 8003b00:	e0ae      	b.n	8003c60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b0c      	cmp	r3, #12
 8003b0e:	f200 809f 	bhi.w	8003c50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003b12:	a201      	add	r2, pc, #4	; (adr r2, 8003b18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b18:	08003b4d 	.word	0x08003b4d
 8003b1c:	08003c51 	.word	0x08003c51
 8003b20:	08003c51 	.word	0x08003c51
 8003b24:	08003c51 	.word	0x08003c51
 8003b28:	08003b8d 	.word	0x08003b8d
 8003b2c:	08003c51 	.word	0x08003c51
 8003b30:	08003c51 	.word	0x08003c51
 8003b34:	08003c51 	.word	0x08003c51
 8003b38:	08003bcf 	.word	0x08003bcf
 8003b3c:	08003c51 	.word	0x08003c51
 8003b40:	08003c51 	.word	0x08003c51
 8003b44:	08003c51 	.word	0x08003c51
 8003b48:	08003c0f 	.word	0x08003c0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68b9      	ldr	r1, [r7, #8]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 f9f8 	bl	8003f48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	699a      	ldr	r2, [r3, #24]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f042 0208 	orr.w	r2, r2, #8
 8003b66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	699a      	ldr	r2, [r3, #24]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 0204 	bic.w	r2, r2, #4
 8003b76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6999      	ldr	r1, [r3, #24]
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	691a      	ldr	r2, [r3, #16]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	619a      	str	r2, [r3, #24]
      break;
 8003b8a:	e064      	b.n	8003c56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68b9      	ldr	r1, [r7, #8]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 fa3e 	bl	8004014 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	699a      	ldr	r2, [r3, #24]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ba6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	699a      	ldr	r2, [r3, #24]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6999      	ldr	r1, [r3, #24]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	021a      	lsls	r2, r3, #8
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	619a      	str	r2, [r3, #24]
      break;
 8003bcc:	e043      	b.n	8003c56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68b9      	ldr	r1, [r7, #8]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f000 fa89 	bl	80040ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	69da      	ldr	r2, [r3, #28]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f042 0208 	orr.w	r2, r2, #8
 8003be8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	69da      	ldr	r2, [r3, #28]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 0204 	bic.w	r2, r2, #4
 8003bf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	69d9      	ldr	r1, [r3, #28]
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	691a      	ldr	r2, [r3, #16]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	61da      	str	r2, [r3, #28]
      break;
 8003c0c:	e023      	b.n	8003c56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68b9      	ldr	r1, [r7, #8]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 fad3 	bl	80041c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	69da      	ldr	r2, [r3, #28]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	69da      	ldr	r2, [r3, #28]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	69d9      	ldr	r1, [r3, #28]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	021a      	lsls	r2, r3, #8
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	61da      	str	r2, [r3, #28]
      break;
 8003c4e:	e002      	b.n	8003c56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	75fb      	strb	r3, [r7, #23]
      break;
 8003c54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c72:	2300      	movs	r3, #0
 8003c74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d101      	bne.n	8003c84 <HAL_TIM_ConfigClockSource+0x1c>
 8003c80:	2302      	movs	r3, #2
 8003c82:	e0b4      	b.n	8003dee <HAL_TIM_ConfigClockSource+0x186>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ca2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003caa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cbc:	d03e      	beq.n	8003d3c <HAL_TIM_ConfigClockSource+0xd4>
 8003cbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cc2:	f200 8087 	bhi.w	8003dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cca:	f000 8086 	beq.w	8003dda <HAL_TIM_ConfigClockSource+0x172>
 8003cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cd2:	d87f      	bhi.n	8003dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cd4:	2b70      	cmp	r3, #112	; 0x70
 8003cd6:	d01a      	beq.n	8003d0e <HAL_TIM_ConfigClockSource+0xa6>
 8003cd8:	2b70      	cmp	r3, #112	; 0x70
 8003cda:	d87b      	bhi.n	8003dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cdc:	2b60      	cmp	r3, #96	; 0x60
 8003cde:	d050      	beq.n	8003d82 <HAL_TIM_ConfigClockSource+0x11a>
 8003ce0:	2b60      	cmp	r3, #96	; 0x60
 8003ce2:	d877      	bhi.n	8003dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ce4:	2b50      	cmp	r3, #80	; 0x50
 8003ce6:	d03c      	beq.n	8003d62 <HAL_TIM_ConfigClockSource+0xfa>
 8003ce8:	2b50      	cmp	r3, #80	; 0x50
 8003cea:	d873      	bhi.n	8003dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cec:	2b40      	cmp	r3, #64	; 0x40
 8003cee:	d058      	beq.n	8003da2 <HAL_TIM_ConfigClockSource+0x13a>
 8003cf0:	2b40      	cmp	r3, #64	; 0x40
 8003cf2:	d86f      	bhi.n	8003dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cf4:	2b30      	cmp	r3, #48	; 0x30
 8003cf6:	d064      	beq.n	8003dc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003cf8:	2b30      	cmp	r3, #48	; 0x30
 8003cfa:	d86b      	bhi.n	8003dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cfc:	2b20      	cmp	r3, #32
 8003cfe:	d060      	beq.n	8003dc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d00:	2b20      	cmp	r3, #32
 8003d02:	d867      	bhi.n	8003dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d05c      	beq.n	8003dc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d08:	2b10      	cmp	r3, #16
 8003d0a:	d05a      	beq.n	8003dc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d0c:	e062      	b.n	8003dd4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6818      	ldr	r0, [r3, #0]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	6899      	ldr	r1, [r3, #8]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	f000 fb19 	bl	8004354 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	609a      	str	r2, [r3, #8]
      break;
 8003d3a:	e04f      	b.n	8003ddc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6818      	ldr	r0, [r3, #0]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	6899      	ldr	r1, [r3, #8]
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f000 fb02 	bl	8004354 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689a      	ldr	r2, [r3, #8]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d5e:	609a      	str	r2, [r3, #8]
      break;
 8003d60:	e03c      	b.n	8003ddc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6818      	ldr	r0, [r3, #0]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	6859      	ldr	r1, [r3, #4]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	f000 fa76 	bl	8004260 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2150      	movs	r1, #80	; 0x50
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 facf 	bl	800431e <TIM_ITRx_SetConfig>
      break;
 8003d80:	e02c      	b.n	8003ddc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6818      	ldr	r0, [r3, #0]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	6859      	ldr	r1, [r3, #4]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	f000 fa95 	bl	80042be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2160      	movs	r1, #96	; 0x60
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 fabf 	bl	800431e <TIM_ITRx_SetConfig>
      break;
 8003da0:	e01c      	b.n	8003ddc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	6859      	ldr	r1, [r3, #4]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	461a      	mov	r2, r3
 8003db0:	f000 fa56 	bl	8004260 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2140      	movs	r1, #64	; 0x40
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 faaf 	bl	800431e <TIM_ITRx_SetConfig>
      break;
 8003dc0:	e00c      	b.n	8003ddc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4619      	mov	r1, r3
 8003dcc:	4610      	mov	r0, r2
 8003dce:	f000 faa6 	bl	800431e <TIM_ITRx_SetConfig>
      break;
 8003dd2:	e003      	b.n	8003ddc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8003dd8:	e000      	b.n	8003ddc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003dda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b083      	sub	sp, #12
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b083      	sub	sp, #12
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
	...

08003e48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a34      	ldr	r2, [pc, #208]	; (8003f2c <TIM_Base_SetConfig+0xe4>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d00f      	beq.n	8003e80 <TIM_Base_SetConfig+0x38>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e66:	d00b      	beq.n	8003e80 <TIM_Base_SetConfig+0x38>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a31      	ldr	r2, [pc, #196]	; (8003f30 <TIM_Base_SetConfig+0xe8>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d007      	beq.n	8003e80 <TIM_Base_SetConfig+0x38>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a30      	ldr	r2, [pc, #192]	; (8003f34 <TIM_Base_SetConfig+0xec>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d003      	beq.n	8003e80 <TIM_Base_SetConfig+0x38>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a2f      	ldr	r2, [pc, #188]	; (8003f38 <TIM_Base_SetConfig+0xf0>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d108      	bne.n	8003e92 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a25      	ldr	r2, [pc, #148]	; (8003f2c <TIM_Base_SetConfig+0xe4>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d01b      	beq.n	8003ed2 <TIM_Base_SetConfig+0x8a>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea0:	d017      	beq.n	8003ed2 <TIM_Base_SetConfig+0x8a>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a22      	ldr	r2, [pc, #136]	; (8003f30 <TIM_Base_SetConfig+0xe8>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d013      	beq.n	8003ed2 <TIM_Base_SetConfig+0x8a>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a21      	ldr	r2, [pc, #132]	; (8003f34 <TIM_Base_SetConfig+0xec>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d00f      	beq.n	8003ed2 <TIM_Base_SetConfig+0x8a>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a20      	ldr	r2, [pc, #128]	; (8003f38 <TIM_Base_SetConfig+0xf0>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d00b      	beq.n	8003ed2 <TIM_Base_SetConfig+0x8a>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a1f      	ldr	r2, [pc, #124]	; (8003f3c <TIM_Base_SetConfig+0xf4>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d007      	beq.n	8003ed2 <TIM_Base_SetConfig+0x8a>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a1e      	ldr	r2, [pc, #120]	; (8003f40 <TIM_Base_SetConfig+0xf8>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d003      	beq.n	8003ed2 <TIM_Base_SetConfig+0x8a>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a1d      	ldr	r2, [pc, #116]	; (8003f44 <TIM_Base_SetConfig+0xfc>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d108      	bne.n	8003ee4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ed8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	689a      	ldr	r2, [r3, #8]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a08      	ldr	r2, [pc, #32]	; (8003f2c <TIM_Base_SetConfig+0xe4>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d103      	bne.n	8003f18 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	691a      	ldr	r2, [r3, #16]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	615a      	str	r2, [r3, #20]
}
 8003f1e:	bf00      	nop
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	40010000 	.word	0x40010000
 8003f30:	40000400 	.word	0x40000400
 8003f34:	40000800 	.word	0x40000800
 8003f38:	40000c00 	.word	0x40000c00
 8003f3c:	40014000 	.word	0x40014000
 8003f40:	40014400 	.word	0x40014400
 8003f44:	40014800 	.word	0x40014800

08003f48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b087      	sub	sp, #28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	f023 0201 	bic.w	r2, r3, #1
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f023 0303 	bic.w	r3, r3, #3
 8003f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f023 0302 	bic.w	r3, r3, #2
 8003f90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a1c      	ldr	r2, [pc, #112]	; (8004010 <TIM_OC1_SetConfig+0xc8>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d10c      	bne.n	8003fbe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f023 0308 	bic.w	r3, r3, #8
 8003faa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f023 0304 	bic.w	r3, r3, #4
 8003fbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a13      	ldr	r2, [pc, #76]	; (8004010 <TIM_OC1_SetConfig+0xc8>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d111      	bne.n	8003fea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	621a      	str	r2, [r3, #32]
}
 8004004:	bf00      	nop
 8004006:	371c      	adds	r7, #28
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr
 8004010:	40010000 	.word	0x40010000

08004014 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004014:	b480      	push	{r7}
 8004016:	b087      	sub	sp, #28
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	f023 0210 	bic.w	r2, r3, #16
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800404a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	021b      	lsls	r3, r3, #8
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	4313      	orrs	r3, r2
 8004056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f023 0320 	bic.w	r3, r3, #32
 800405e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	011b      	lsls	r3, r3, #4
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	4313      	orrs	r3, r2
 800406a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a1e      	ldr	r2, [pc, #120]	; (80040e8 <TIM_OC2_SetConfig+0xd4>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d10d      	bne.n	8004090 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800407a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	4313      	orrs	r3, r2
 8004086:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800408e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a15      	ldr	r2, [pc, #84]	; (80040e8 <TIM_OC2_SetConfig+0xd4>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d113      	bne.n	80040c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800409e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	4313      	orrs	r3, r2
 80040be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	621a      	str	r2, [r3, #32]
}
 80040da:	bf00      	nop
 80040dc:	371c      	adds	r7, #28
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	40010000 	.word	0x40010000

080040ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800411a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 0303 	bic.w	r3, r3, #3
 8004122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004134:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	021b      	lsls	r3, r3, #8
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	4313      	orrs	r3, r2
 8004140:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a1d      	ldr	r2, [pc, #116]	; (80041bc <TIM_OC3_SetConfig+0xd0>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d10d      	bne.n	8004166 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004150:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	021b      	lsls	r3, r3, #8
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	4313      	orrs	r3, r2
 800415c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004164:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a14      	ldr	r2, [pc, #80]	; (80041bc <TIM_OC3_SetConfig+0xd0>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d113      	bne.n	8004196 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004174:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800417c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	011b      	lsls	r3, r3, #4
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	4313      	orrs	r3, r2
 8004188:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	4313      	orrs	r3, r2
 8004194:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	621a      	str	r2, [r3, #32]
}
 80041b0:	bf00      	nop
 80041b2:	371c      	adds	r7, #28
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	40010000 	.word	0x40010000

080041c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	69db      	ldr	r3, [r3, #28]
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	021b      	lsls	r3, r3, #8
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	4313      	orrs	r3, r2
 8004202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800420a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	031b      	lsls	r3, r3, #12
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	4313      	orrs	r3, r2
 8004216:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a10      	ldr	r2, [pc, #64]	; (800425c <TIM_OC4_SetConfig+0x9c>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d109      	bne.n	8004234 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004226:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	019b      	lsls	r3, r3, #6
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	4313      	orrs	r3, r2
 8004232:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	621a      	str	r2, [r3, #32]
}
 800424e:	bf00      	nop
 8004250:	371c      	adds	r7, #28
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	40010000 	.word	0x40010000

08004260 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004260:	b480      	push	{r7}
 8004262:	b087      	sub	sp, #28
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	f023 0201 	bic.w	r2, r3, #1
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800428a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	011b      	lsls	r3, r3, #4
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	4313      	orrs	r3, r2
 8004294:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f023 030a 	bic.w	r3, r3, #10
 800429c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	621a      	str	r2, [r3, #32]
}
 80042b2:	bf00      	nop
 80042b4:	371c      	adds	r7, #28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042be:	b480      	push	{r7}
 80042c0:	b087      	sub	sp, #28
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	60f8      	str	r0, [r7, #12]
 80042c6:	60b9      	str	r1, [r7, #8]
 80042c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	f023 0210 	bic.w	r2, r3, #16
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	031b      	lsls	r3, r3, #12
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	011b      	lsls	r3, r3, #4
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	4313      	orrs	r3, r2
 8004304:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	621a      	str	r2, [r3, #32]
}
 8004312:	bf00      	nop
 8004314:	371c      	adds	r7, #28
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800431e:	b480      	push	{r7}
 8004320:	b085      	sub	sp, #20
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
 8004326:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004334:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	4313      	orrs	r3, r2
 800433c:	f043 0307 	orr.w	r3, r3, #7
 8004340:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	609a      	str	r2, [r3, #8]
}
 8004348:	bf00      	nop
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004354:	b480      	push	{r7}
 8004356:	b087      	sub	sp, #28
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
 8004360:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800436e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	021a      	lsls	r2, r3, #8
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	431a      	orrs	r2, r3
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	4313      	orrs	r3, r2
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	4313      	orrs	r3, r2
 8004380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	609a      	str	r2, [r3, #8]
}
 8004388:	bf00      	nop
 800438a:	371c      	adds	r7, #28
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004394:	b480      	push	{r7}
 8004396:	b087      	sub	sp, #28
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	f003 031f 	and.w	r3, r3, #31
 80043a6:	2201      	movs	r2, #1
 80043a8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6a1a      	ldr	r2, [r3, #32]
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	43db      	mvns	r3, r3
 80043b6:	401a      	ands	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6a1a      	ldr	r2, [r3, #32]
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	f003 031f 	and.w	r3, r3, #31
 80043c6:	6879      	ldr	r1, [r7, #4]
 80043c8:	fa01 f303 	lsl.w	r3, r1, r3
 80043cc:	431a      	orrs	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	621a      	str	r2, [r3, #32]
}
 80043d2:	bf00      	nop
 80043d4:	371c      	adds	r7, #28
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
	...

080043e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d101      	bne.n	80043f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043f4:	2302      	movs	r3, #2
 80043f6:	e050      	b.n	800449a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800441e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	4313      	orrs	r3, r2
 8004428:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a1c      	ldr	r2, [pc, #112]	; (80044a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d018      	beq.n	800446e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004444:	d013      	beq.n	800446e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a18      	ldr	r2, [pc, #96]	; (80044ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d00e      	beq.n	800446e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a16      	ldr	r2, [pc, #88]	; (80044b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d009      	beq.n	800446e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a15      	ldr	r2, [pc, #84]	; (80044b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d004      	beq.n	800446e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a13      	ldr	r2, [pc, #76]	; (80044b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d10c      	bne.n	8004488 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004474:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	4313      	orrs	r3, r2
 800447e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3714      	adds	r7, #20
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	40010000 	.word	0x40010000
 80044ac:	40000400 	.word	0x40000400
 80044b0:	40000800 	.word	0x40000800
 80044b4:	40000c00 	.word	0x40000c00
 80044b8:	40014000 	.word	0x40014000

080044bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e03f      	b.n	8004576 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d106      	bne.n	8004510 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7fd f9bc 	bl	8001888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2224      	movs	r2, #36	; 0x24
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004526:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 fddf 	bl	80050ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	691a      	ldr	r2, [r3, #16]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800453c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	695a      	ldr	r2, [r3, #20]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800454c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68da      	ldr	r2, [r3, #12]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800455c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2220      	movs	r2, #32
 8004568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2220      	movs	r2, #32
 8004570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3708      	adds	r7, #8
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b08a      	sub	sp, #40	; 0x28
 8004582:	af02      	add	r7, sp, #8
 8004584:	60f8      	str	r0, [r7, #12]
 8004586:	60b9      	str	r1, [r7, #8]
 8004588:	603b      	str	r3, [r7, #0]
 800458a:	4613      	mov	r3, r2
 800458c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800458e:	2300      	movs	r3, #0
 8004590:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b20      	cmp	r3, #32
 800459c:	d17c      	bne.n	8004698 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d002      	beq.n	80045aa <HAL_UART_Transmit+0x2c>
 80045a4:	88fb      	ldrh	r3, [r7, #6]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e075      	b.n	800469a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d101      	bne.n	80045bc <HAL_UART_Transmit+0x3e>
 80045b8:	2302      	movs	r3, #2
 80045ba:	e06e      	b.n	800469a <HAL_UART_Transmit+0x11c>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2221      	movs	r2, #33	; 0x21
 80045ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045d2:	f7fd fb4b 	bl	8001c6c <HAL_GetTick>
 80045d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	88fa      	ldrh	r2, [r7, #6]
 80045dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	88fa      	ldrh	r2, [r7, #6]
 80045e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ec:	d108      	bne.n	8004600 <HAL_UART_Transmit+0x82>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d104      	bne.n	8004600 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80045f6:	2300      	movs	r3, #0
 80045f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	61bb      	str	r3, [r7, #24]
 80045fe:	e003      	b.n	8004608 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004604:	2300      	movs	r3, #0
 8004606:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004610:	e02a      	b.n	8004668 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	9300      	str	r3, [sp, #0]
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	2200      	movs	r2, #0
 800461a:	2180      	movs	r1, #128	; 0x80
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 fb1f 	bl	8004c60 <UART_WaitOnFlagUntilTimeout>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e036      	b.n	800469a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10b      	bne.n	800464a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	881b      	ldrh	r3, [r3, #0]
 8004636:	461a      	mov	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004640:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	3302      	adds	r3, #2
 8004646:	61bb      	str	r3, [r7, #24]
 8004648:	e007      	b.n	800465a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	781a      	ldrb	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	3301      	adds	r3, #1
 8004658:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800465e:	b29b      	uxth	r3, r3
 8004660:	3b01      	subs	r3, #1
 8004662:	b29a      	uxth	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800466c:	b29b      	uxth	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1cf      	bne.n	8004612 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2200      	movs	r2, #0
 800467a:	2140      	movs	r1, #64	; 0x40
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 faef 	bl	8004c60 <UART_WaitOnFlagUntilTimeout>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d001      	beq.n	800468c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e006      	b.n	800469a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2220      	movs	r2, #32
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004694:	2300      	movs	r3, #0
 8004696:	e000      	b.n	800469a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004698:	2302      	movs	r3, #2
  }
}
 800469a:	4618      	mov	r0, r3
 800469c:	3720      	adds	r7, #32
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b084      	sub	sp, #16
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	60f8      	str	r0, [r7, #12]
 80046aa:	60b9      	str	r1, [r7, #8]
 80046ac:	4613      	mov	r3, r2
 80046ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b20      	cmp	r3, #32
 80046ba:	d11d      	bne.n	80046f8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d002      	beq.n	80046c8 <HAL_UART_Receive_IT+0x26>
 80046c2:	88fb      	ldrh	r3, [r7, #6]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e016      	b.n	80046fa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d101      	bne.n	80046da <HAL_UART_Receive_IT+0x38>
 80046d6:	2302      	movs	r3, #2
 80046d8:	e00f      	b.n	80046fa <HAL_UART_Receive_IT+0x58>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80046e8:	88fb      	ldrh	r3, [r7, #6]
 80046ea:	461a      	mov	r2, r3
 80046ec:	68b9      	ldr	r1, [r7, #8]
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f000 fb24 	bl	8004d3c <UART_Start_Receive_IT>
 80046f4:	4603      	mov	r3, r0
 80046f6:	e000      	b.n	80046fa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80046f8:	2302      	movs	r3, #2
  }
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3710      	adds	r7, #16
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
	...

08004704 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b0ba      	sub	sp, #232	; 0xe8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800472a:	2300      	movs	r3, #0
 800472c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004730:	2300      	movs	r3, #0
 8004732:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004742:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10f      	bne.n	800476a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800474a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800474e:	f003 0320 	and.w	r3, r3, #32
 8004752:	2b00      	cmp	r3, #0
 8004754:	d009      	beq.n	800476a <HAL_UART_IRQHandler+0x66>
 8004756:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800475a:	f003 0320 	and.w	r3, r3, #32
 800475e:	2b00      	cmp	r3, #0
 8004760:	d003      	beq.n	800476a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 fc07 	bl	8004f76 <UART_Receive_IT>
      return;
 8004768:	e256      	b.n	8004c18 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800476a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 80de 	beq.w	8004930 <HAL_UART_IRQHandler+0x22c>
 8004774:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	2b00      	cmp	r3, #0
 800477e:	d106      	bne.n	800478e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004784:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 80d1 	beq.w	8004930 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800478e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00b      	beq.n	80047b2 <HAL_UART_IRQHandler+0xae>
 800479a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800479e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d005      	beq.n	80047b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047aa:	f043 0201 	orr.w	r2, r3, #1
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047b6:	f003 0304 	and.w	r3, r3, #4
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00b      	beq.n	80047d6 <HAL_UART_IRQHandler+0xd2>
 80047be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d005      	beq.n	80047d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	f043 0202 	orr.w	r2, r3, #2
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00b      	beq.n	80047fa <HAL_UART_IRQHandler+0xf6>
 80047e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d005      	beq.n	80047fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f2:	f043 0204 	orr.w	r2, r3, #4
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80047fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047fe:	f003 0308 	and.w	r3, r3, #8
 8004802:	2b00      	cmp	r3, #0
 8004804:	d011      	beq.n	800482a <HAL_UART_IRQHandler+0x126>
 8004806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800480a:	f003 0320 	and.w	r3, r3, #32
 800480e:	2b00      	cmp	r3, #0
 8004810:	d105      	bne.n	800481e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004812:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	d005      	beq.n	800482a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	f043 0208 	orr.w	r2, r3, #8
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 81ed 	beq.w	8004c0e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004838:	f003 0320 	and.w	r3, r3, #32
 800483c:	2b00      	cmp	r3, #0
 800483e:	d008      	beq.n	8004852 <HAL_UART_IRQHandler+0x14e>
 8004840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004844:	f003 0320 	and.w	r3, r3, #32
 8004848:	2b00      	cmp	r3, #0
 800484a:	d002      	beq.n	8004852 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 fb92 	bl	8004f76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485c:	2b40      	cmp	r3, #64	; 0x40
 800485e:	bf0c      	ite	eq
 8004860:	2301      	moveq	r3, #1
 8004862:	2300      	movne	r3, #0
 8004864:	b2db      	uxtb	r3, r3
 8004866:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	f003 0308 	and.w	r3, r3, #8
 8004872:	2b00      	cmp	r3, #0
 8004874:	d103      	bne.n	800487e <HAL_UART_IRQHandler+0x17a>
 8004876:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800487a:	2b00      	cmp	r3, #0
 800487c:	d04f      	beq.n	800491e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 fa9a 	bl	8004db8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800488e:	2b40      	cmp	r3, #64	; 0x40
 8004890:	d141      	bne.n	8004916 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	3314      	adds	r3, #20
 8004898:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80048a0:	e853 3f00 	ldrex	r3, [r3]
 80048a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80048a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	3314      	adds	r3, #20
 80048ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80048be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80048c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80048ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80048ce:	e841 2300 	strex	r3, r2, [r1]
 80048d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80048d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1d9      	bne.n	8004892 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d013      	beq.n	800490e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ea:	4a7d      	ldr	r2, [pc, #500]	; (8004ae0 <HAL_UART_IRQHandler+0x3dc>)
 80048ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7fd ff4d 	bl	8002792 <HAL_DMA_Abort_IT>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d016      	beq.n	800492c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004908:	4610      	mov	r0, r2
 800490a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800490c:	e00e      	b.n	800492c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f990 	bl	8004c34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004914:	e00a      	b.n	800492c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f98c 	bl	8004c34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800491c:	e006      	b.n	800492c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f988 	bl	8004c34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800492a:	e170      	b.n	8004c0e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800492c:	bf00      	nop
    return;
 800492e:	e16e      	b.n	8004c0e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004934:	2b01      	cmp	r3, #1
 8004936:	f040 814a 	bne.w	8004bce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800493a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800493e:	f003 0310 	and.w	r3, r3, #16
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 8143 	beq.w	8004bce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800494c:	f003 0310 	and.w	r3, r3, #16
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 813c 	beq.w	8004bce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004956:	2300      	movs	r3, #0
 8004958:	60bb      	str	r3, [r7, #8]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	60bb      	str	r3, [r7, #8]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	60bb      	str	r3, [r7, #8]
 800496a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004976:	2b40      	cmp	r3, #64	; 0x40
 8004978:	f040 80b4 	bne.w	8004ae4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004988:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 8140 	beq.w	8004c12 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004996:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800499a:	429a      	cmp	r2, r3
 800499c:	f080 8139 	bcs.w	8004c12 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049b2:	f000 8088 	beq.w	8004ac6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	330c      	adds	r3, #12
 80049bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049c4:	e853 3f00 	ldrex	r3, [r3]
 80049c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80049cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	330c      	adds	r3, #12
 80049de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80049e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80049e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80049ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80049f2:	e841 2300 	strex	r3, r2, [r1]
 80049f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80049fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1d9      	bne.n	80049b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	3314      	adds	r3, #20
 8004a08:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a0c:	e853 3f00 	ldrex	r3, [r3]
 8004a10:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a14:	f023 0301 	bic.w	r3, r3, #1
 8004a18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	3314      	adds	r3, #20
 8004a22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a26:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a2a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a32:	e841 2300 	strex	r3, r2, [r1]
 8004a36:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1e1      	bne.n	8004a02 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	3314      	adds	r3, #20
 8004a44:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a48:	e853 3f00 	ldrex	r3, [r3]
 8004a4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3314      	adds	r3, #20
 8004a5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004a62:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a64:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a66:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a6a:	e841 2300 	strex	r3, r2, [r1]
 8004a6e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1e3      	bne.n	8004a3e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2220      	movs	r2, #32
 8004a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	330c      	adds	r3, #12
 8004a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a8e:	e853 3f00 	ldrex	r3, [r3]
 8004a92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a96:	f023 0310 	bic.w	r3, r3, #16
 8004a9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	330c      	adds	r3, #12
 8004aa4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004aa8:	65ba      	str	r2, [r7, #88]	; 0x58
 8004aaa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004aae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ab0:	e841 2300 	strex	r3, r2, [r1]
 8004ab4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1e3      	bne.n	8004a84 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7fd fdf6 	bl	80026b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f8b6 	bl	8004c48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004adc:	e099      	b.n	8004c12 <HAL_UART_IRQHandler+0x50e>
 8004ade:	bf00      	nop
 8004ae0:	08004e7f 	.word	0x08004e7f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f000 808b 	beq.w	8004c16 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004b00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f000 8086 	beq.w	8004c16 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	330c      	adds	r3, #12
 8004b10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b14:	e853 3f00 	ldrex	r3, [r3]
 8004b18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	330c      	adds	r3, #12
 8004b2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004b2e:	647a      	str	r2, [r7, #68]	; 0x44
 8004b30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b36:	e841 2300 	strex	r3, r2, [r1]
 8004b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1e3      	bne.n	8004b0a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	3314      	adds	r3, #20
 8004b48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	e853 3f00 	ldrex	r3, [r3]
 8004b50:	623b      	str	r3, [r7, #32]
   return(result);
 8004b52:	6a3b      	ldr	r3, [r7, #32]
 8004b54:	f023 0301 	bic.w	r3, r3, #1
 8004b58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	3314      	adds	r3, #20
 8004b62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004b66:	633a      	str	r2, [r7, #48]	; 0x30
 8004b68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b6e:	e841 2300 	strex	r3, r2, [r1]
 8004b72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1e3      	bne.n	8004b42 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	330c      	adds	r3, #12
 8004b8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	e853 3f00 	ldrex	r3, [r3]
 8004b96:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f023 0310 	bic.w	r3, r3, #16
 8004b9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	330c      	adds	r3, #12
 8004ba8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004bac:	61fa      	str	r2, [r7, #28]
 8004bae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb0:	69b9      	ldr	r1, [r7, #24]
 8004bb2:	69fa      	ldr	r2, [r7, #28]
 8004bb4:	e841 2300 	strex	r3, r2, [r1]
 8004bb8:	617b      	str	r3, [r7, #20]
   return(result);
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1e3      	bne.n	8004b88 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f83e 	bl	8004c48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004bcc:	e023      	b.n	8004c16 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d009      	beq.n	8004bee <HAL_UART_IRQHandler+0x4ea>
 8004bda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f95d 	bl	8004ea6 <UART_Transmit_IT>
    return;
 8004bec:	e014      	b.n	8004c18 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00e      	beq.n	8004c18 <HAL_UART_IRQHandler+0x514>
 8004bfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d008      	beq.n	8004c18 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f99d 	bl	8004f46 <UART_EndTransmit_IT>
    return;
 8004c0c:	e004      	b.n	8004c18 <HAL_UART_IRQHandler+0x514>
    return;
 8004c0e:	bf00      	nop
 8004c10:	e002      	b.n	8004c18 <HAL_UART_IRQHandler+0x514>
      return;
 8004c12:	bf00      	nop
 8004c14:	e000      	b.n	8004c18 <HAL_UART_IRQHandler+0x514>
      return;
 8004c16:	bf00      	nop
  }
}
 8004c18:	37e8      	adds	r7, #232	; 0xe8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop

08004c20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	460b      	mov	r3, r1
 8004c52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b090      	sub	sp, #64	; 0x40
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	603b      	str	r3, [r7, #0]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c70:	e050      	b.n	8004d14 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c78:	d04c      	beq.n	8004d14 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d007      	beq.n	8004c90 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c80:	f7fc fff4 	bl	8001c6c <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d241      	bcs.n	8004d14 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	330c      	adds	r3, #12
 8004c96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9a:	e853 3f00 	ldrex	r3, [r3]
 8004c9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	330c      	adds	r3, #12
 8004cae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004cb0:	637a      	str	r2, [r7, #52]	; 0x34
 8004cb2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cb8:	e841 2300 	strex	r3, r2, [r1]
 8004cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1e5      	bne.n	8004c90 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	3314      	adds	r3, #20
 8004cca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	e853 3f00 	ldrex	r3, [r3]
 8004cd2:	613b      	str	r3, [r7, #16]
   return(result);
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	f023 0301 	bic.w	r3, r3, #1
 8004cda:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	3314      	adds	r3, #20
 8004ce2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ce4:	623a      	str	r2, [r7, #32]
 8004ce6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce8:	69f9      	ldr	r1, [r7, #28]
 8004cea:	6a3a      	ldr	r2, [r7, #32]
 8004cec:	e841 2300 	strex	r3, r2, [r1]
 8004cf0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1e5      	bne.n	8004cc4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2220      	movs	r2, #32
 8004d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e00f      	b.n	8004d34 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	68ba      	ldr	r2, [r7, #8]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	bf0c      	ite	eq
 8004d24:	2301      	moveq	r3, #1
 8004d26:	2300      	movne	r3, #0
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	79fb      	ldrb	r3, [r7, #7]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d09f      	beq.n	8004c72 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3740      	adds	r7, #64	; 0x40
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	4613      	mov	r3, r2
 8004d48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	88fa      	ldrh	r2, [r7, #6]
 8004d54:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	88fa      	ldrh	r2, [r7, #6]
 8004d5a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2222      	movs	r2, #34	; 0x22
 8004d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d007      	beq.n	8004d8a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68da      	ldr	r2, [r3, #12]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d88:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	695a      	ldr	r2, [r3, #20]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f042 0201 	orr.w	r2, r2, #1
 8004d98:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68da      	ldr	r2, [r3, #12]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f042 0220 	orr.w	r2, r2, #32
 8004da8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3714      	adds	r7, #20
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b095      	sub	sp, #84	; 0x54
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	330c      	adds	r3, #12
 8004dc6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dca:	e853 3f00 	ldrex	r3, [r3]
 8004dce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	330c      	adds	r3, #12
 8004dde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004de0:	643a      	str	r2, [r7, #64]	; 0x40
 8004de2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004de6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004de8:	e841 2300 	strex	r3, r2, [r1]
 8004dec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1e5      	bne.n	8004dc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	3314      	adds	r3, #20
 8004dfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfc:	6a3b      	ldr	r3, [r7, #32]
 8004dfe:	e853 3f00 	ldrex	r3, [r3]
 8004e02:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	f023 0301 	bic.w	r3, r3, #1
 8004e0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	3314      	adds	r3, #20
 8004e12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e1c:	e841 2300 	strex	r3, r2, [r1]
 8004e20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1e5      	bne.n	8004df4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d119      	bne.n	8004e64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	330c      	adds	r3, #12
 8004e36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	e853 3f00 	ldrex	r3, [r3]
 8004e3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	f023 0310 	bic.w	r3, r3, #16
 8004e46:	647b      	str	r3, [r7, #68]	; 0x44
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	330c      	adds	r3, #12
 8004e4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e50:	61ba      	str	r2, [r7, #24]
 8004e52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e54:	6979      	ldr	r1, [r7, #20]
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	e841 2300 	strex	r3, r2, [r1]
 8004e5c:	613b      	str	r3, [r7, #16]
   return(result);
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1e5      	bne.n	8004e30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2220      	movs	r2, #32
 8004e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004e72:	bf00      	nop
 8004e74:	3754      	adds	r7, #84	; 0x54
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr

08004e7e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b084      	sub	sp, #16
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f7ff fecb 	bl	8004c34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e9e:	bf00      	nop
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b085      	sub	sp, #20
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b21      	cmp	r3, #33	; 0x21
 8004eb8:	d13e      	bne.n	8004f38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ec2:	d114      	bne.n	8004eee <UART_Transmit_IT+0x48>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d110      	bne.n	8004eee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a1b      	ldr	r3, [r3, #32]
 8004ed0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	881b      	ldrh	r3, [r3, #0]
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ee0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	1c9a      	adds	r2, r3, #2
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	621a      	str	r2, [r3, #32]
 8004eec:	e008      	b.n	8004f00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	1c59      	adds	r1, r3, #1
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6211      	str	r1, [r2, #32]
 8004ef8:	781a      	ldrb	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	3b01      	subs	r3, #1
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10f      	bne.n	8004f34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68da      	ldr	r2, [r3, #12]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68da      	ldr	r2, [r3, #12]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f34:	2300      	movs	r3, #0
 8004f36:	e000      	b.n	8004f3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f38:	2302      	movs	r3, #2
  }
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b082      	sub	sp, #8
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68da      	ldr	r2, [r3, #12]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2220      	movs	r2, #32
 8004f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7ff fe5a 	bl	8004c20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3708      	adds	r7, #8
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b08c      	sub	sp, #48	; 0x30
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b22      	cmp	r3, #34	; 0x22
 8004f88:	f040 80ab 	bne.w	80050e2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f94:	d117      	bne.n	8004fc6 <UART_Receive_IT+0x50>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d113      	bne.n	8004fc6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fbe:	1c9a      	adds	r2, r3, #2
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	629a      	str	r2, [r3, #40]	; 0x28
 8004fc4:	e026      	b.n	8005014 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fd8:	d007      	beq.n	8004fea <UART_Receive_IT+0x74>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10a      	bne.n	8004ff8 <UART_Receive_IT+0x82>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d106      	bne.n	8004ff8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff4:	701a      	strb	r2, [r3, #0]
 8004ff6:	e008      	b.n	800500a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005004:	b2da      	uxtb	r2, r3
 8005006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005008:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500e:	1c5a      	adds	r2, r3, #1
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005018:	b29b      	uxth	r3, r3
 800501a:	3b01      	subs	r3, #1
 800501c:	b29b      	uxth	r3, r3
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	4619      	mov	r1, r3
 8005022:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005024:	2b00      	cmp	r3, #0
 8005026:	d15a      	bne.n	80050de <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68da      	ldr	r2, [r3, #12]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f022 0220 	bic.w	r2, r2, #32
 8005036:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68da      	ldr	r2, [r3, #12]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005046:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	695a      	ldr	r2, [r3, #20]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f022 0201 	bic.w	r2, r2, #1
 8005056:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2220      	movs	r2, #32
 800505c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005064:	2b01      	cmp	r3, #1
 8005066:	d135      	bne.n	80050d4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	330c      	adds	r3, #12
 8005074:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	e853 3f00 	ldrex	r3, [r3]
 800507c:	613b      	str	r3, [r7, #16]
   return(result);
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	f023 0310 	bic.w	r3, r3, #16
 8005084:	627b      	str	r3, [r7, #36]	; 0x24
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	330c      	adds	r3, #12
 800508c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800508e:	623a      	str	r2, [r7, #32]
 8005090:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005092:	69f9      	ldr	r1, [r7, #28]
 8005094:	6a3a      	ldr	r2, [r7, #32]
 8005096:	e841 2300 	strex	r3, r2, [r1]
 800509a:	61bb      	str	r3, [r7, #24]
   return(result);
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1e5      	bne.n	800506e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0310 	and.w	r3, r3, #16
 80050ac:	2b10      	cmp	r3, #16
 80050ae:	d10a      	bne.n	80050c6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050b0:	2300      	movs	r3, #0
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	60fb      	str	r3, [r7, #12]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	60fb      	str	r3, [r7, #12]
 80050c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050ca:	4619      	mov	r1, r3
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f7ff fdbb 	bl	8004c48 <HAL_UARTEx_RxEventCallback>
 80050d2:	e002      	b.n	80050da <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f7fc f971 	bl	80013bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80050da:	2300      	movs	r3, #0
 80050dc:	e002      	b.n	80050e4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80050de:	2300      	movs	r3, #0
 80050e0:	e000      	b.n	80050e4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80050e2:	2302      	movs	r3, #2
  }
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3730      	adds	r7, #48	; 0x30
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050f0:	b0c0      	sub	sp, #256	; 0x100
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005108:	68d9      	ldr	r1, [r3, #12]
 800510a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	ea40 0301 	orr.w	r3, r0, r1
 8005114:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800511a:	689a      	ldr	r2, [r3, #8]
 800511c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	431a      	orrs	r2, r3
 8005124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	431a      	orrs	r2, r3
 800512c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	4313      	orrs	r3, r2
 8005134:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005144:	f021 010c 	bic.w	r1, r1, #12
 8005148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005152:	430b      	orrs	r3, r1
 8005154:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005166:	6999      	ldr	r1, [r3, #24]
 8005168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	ea40 0301 	orr.w	r3, r0, r1
 8005172:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	4b8f      	ldr	r3, [pc, #572]	; (80053b8 <UART_SetConfig+0x2cc>)
 800517c:	429a      	cmp	r2, r3
 800517e:	d005      	beq.n	800518c <UART_SetConfig+0xa0>
 8005180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	4b8d      	ldr	r3, [pc, #564]	; (80053bc <UART_SetConfig+0x2d0>)
 8005188:	429a      	cmp	r2, r3
 800518a:	d104      	bne.n	8005196 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800518c:	f7fe f978 	bl	8003480 <HAL_RCC_GetPCLK2Freq>
 8005190:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005194:	e003      	b.n	800519e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005196:	f7fe f95f 	bl	8003458 <HAL_RCC_GetPCLK1Freq>
 800519a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800519e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a2:	69db      	ldr	r3, [r3, #28]
 80051a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051a8:	f040 810c 	bne.w	80053c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051b0:	2200      	movs	r2, #0
 80051b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80051b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80051ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80051be:	4622      	mov	r2, r4
 80051c0:	462b      	mov	r3, r5
 80051c2:	1891      	adds	r1, r2, r2
 80051c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80051c6:	415b      	adcs	r3, r3
 80051c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80051ce:	4621      	mov	r1, r4
 80051d0:	eb12 0801 	adds.w	r8, r2, r1
 80051d4:	4629      	mov	r1, r5
 80051d6:	eb43 0901 	adc.w	r9, r3, r1
 80051da:	f04f 0200 	mov.w	r2, #0
 80051de:	f04f 0300 	mov.w	r3, #0
 80051e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051ee:	4690      	mov	r8, r2
 80051f0:	4699      	mov	r9, r3
 80051f2:	4623      	mov	r3, r4
 80051f4:	eb18 0303 	adds.w	r3, r8, r3
 80051f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80051fc:	462b      	mov	r3, r5
 80051fe:	eb49 0303 	adc.w	r3, r9, r3
 8005202:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005212:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005216:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800521a:	460b      	mov	r3, r1
 800521c:	18db      	adds	r3, r3, r3
 800521e:	653b      	str	r3, [r7, #80]	; 0x50
 8005220:	4613      	mov	r3, r2
 8005222:	eb42 0303 	adc.w	r3, r2, r3
 8005226:	657b      	str	r3, [r7, #84]	; 0x54
 8005228:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800522c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005230:	f7fb f82e 	bl	8000290 <__aeabi_uldivmod>
 8005234:	4602      	mov	r2, r0
 8005236:	460b      	mov	r3, r1
 8005238:	4b61      	ldr	r3, [pc, #388]	; (80053c0 <UART_SetConfig+0x2d4>)
 800523a:	fba3 2302 	umull	r2, r3, r3, r2
 800523e:	095b      	lsrs	r3, r3, #5
 8005240:	011c      	lsls	r4, r3, #4
 8005242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005246:	2200      	movs	r2, #0
 8005248:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800524c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005250:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005254:	4642      	mov	r2, r8
 8005256:	464b      	mov	r3, r9
 8005258:	1891      	adds	r1, r2, r2
 800525a:	64b9      	str	r1, [r7, #72]	; 0x48
 800525c:	415b      	adcs	r3, r3
 800525e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005260:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005264:	4641      	mov	r1, r8
 8005266:	eb12 0a01 	adds.w	sl, r2, r1
 800526a:	4649      	mov	r1, r9
 800526c:	eb43 0b01 	adc.w	fp, r3, r1
 8005270:	f04f 0200 	mov.w	r2, #0
 8005274:	f04f 0300 	mov.w	r3, #0
 8005278:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800527c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005280:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005284:	4692      	mov	sl, r2
 8005286:	469b      	mov	fp, r3
 8005288:	4643      	mov	r3, r8
 800528a:	eb1a 0303 	adds.w	r3, sl, r3
 800528e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005292:	464b      	mov	r3, r9
 8005294:	eb4b 0303 	adc.w	r3, fp, r3
 8005298:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800529c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80052ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80052b0:	460b      	mov	r3, r1
 80052b2:	18db      	adds	r3, r3, r3
 80052b4:	643b      	str	r3, [r7, #64]	; 0x40
 80052b6:	4613      	mov	r3, r2
 80052b8:	eb42 0303 	adc.w	r3, r2, r3
 80052bc:	647b      	str	r3, [r7, #68]	; 0x44
 80052be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80052c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80052c6:	f7fa ffe3 	bl	8000290 <__aeabi_uldivmod>
 80052ca:	4602      	mov	r2, r0
 80052cc:	460b      	mov	r3, r1
 80052ce:	4611      	mov	r1, r2
 80052d0:	4b3b      	ldr	r3, [pc, #236]	; (80053c0 <UART_SetConfig+0x2d4>)
 80052d2:	fba3 2301 	umull	r2, r3, r3, r1
 80052d6:	095b      	lsrs	r3, r3, #5
 80052d8:	2264      	movs	r2, #100	; 0x64
 80052da:	fb02 f303 	mul.w	r3, r2, r3
 80052de:	1acb      	subs	r3, r1, r3
 80052e0:	00db      	lsls	r3, r3, #3
 80052e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80052e6:	4b36      	ldr	r3, [pc, #216]	; (80053c0 <UART_SetConfig+0x2d4>)
 80052e8:	fba3 2302 	umull	r2, r3, r3, r2
 80052ec:	095b      	lsrs	r3, r3, #5
 80052ee:	005b      	lsls	r3, r3, #1
 80052f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80052f4:	441c      	add	r4, r3
 80052f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052fa:	2200      	movs	r2, #0
 80052fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005300:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005304:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005308:	4642      	mov	r2, r8
 800530a:	464b      	mov	r3, r9
 800530c:	1891      	adds	r1, r2, r2
 800530e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005310:	415b      	adcs	r3, r3
 8005312:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005314:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005318:	4641      	mov	r1, r8
 800531a:	1851      	adds	r1, r2, r1
 800531c:	6339      	str	r1, [r7, #48]	; 0x30
 800531e:	4649      	mov	r1, r9
 8005320:	414b      	adcs	r3, r1
 8005322:	637b      	str	r3, [r7, #52]	; 0x34
 8005324:	f04f 0200 	mov.w	r2, #0
 8005328:	f04f 0300 	mov.w	r3, #0
 800532c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005330:	4659      	mov	r1, fp
 8005332:	00cb      	lsls	r3, r1, #3
 8005334:	4651      	mov	r1, sl
 8005336:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800533a:	4651      	mov	r1, sl
 800533c:	00ca      	lsls	r2, r1, #3
 800533e:	4610      	mov	r0, r2
 8005340:	4619      	mov	r1, r3
 8005342:	4603      	mov	r3, r0
 8005344:	4642      	mov	r2, r8
 8005346:	189b      	adds	r3, r3, r2
 8005348:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800534c:	464b      	mov	r3, r9
 800534e:	460a      	mov	r2, r1
 8005350:	eb42 0303 	adc.w	r3, r2, r3
 8005354:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005364:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005368:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800536c:	460b      	mov	r3, r1
 800536e:	18db      	adds	r3, r3, r3
 8005370:	62bb      	str	r3, [r7, #40]	; 0x28
 8005372:	4613      	mov	r3, r2
 8005374:	eb42 0303 	adc.w	r3, r2, r3
 8005378:	62fb      	str	r3, [r7, #44]	; 0x2c
 800537a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800537e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005382:	f7fa ff85 	bl	8000290 <__aeabi_uldivmod>
 8005386:	4602      	mov	r2, r0
 8005388:	460b      	mov	r3, r1
 800538a:	4b0d      	ldr	r3, [pc, #52]	; (80053c0 <UART_SetConfig+0x2d4>)
 800538c:	fba3 1302 	umull	r1, r3, r3, r2
 8005390:	095b      	lsrs	r3, r3, #5
 8005392:	2164      	movs	r1, #100	; 0x64
 8005394:	fb01 f303 	mul.w	r3, r1, r3
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	3332      	adds	r3, #50	; 0x32
 800539e:	4a08      	ldr	r2, [pc, #32]	; (80053c0 <UART_SetConfig+0x2d4>)
 80053a0:	fba2 2303 	umull	r2, r3, r2, r3
 80053a4:	095b      	lsrs	r3, r3, #5
 80053a6:	f003 0207 	and.w	r2, r3, #7
 80053aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4422      	add	r2, r4
 80053b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053b4:	e106      	b.n	80055c4 <UART_SetConfig+0x4d8>
 80053b6:	bf00      	nop
 80053b8:	40011000 	.word	0x40011000
 80053bc:	40011400 	.word	0x40011400
 80053c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053c8:	2200      	movs	r2, #0
 80053ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80053ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80053d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80053d6:	4642      	mov	r2, r8
 80053d8:	464b      	mov	r3, r9
 80053da:	1891      	adds	r1, r2, r2
 80053dc:	6239      	str	r1, [r7, #32]
 80053de:	415b      	adcs	r3, r3
 80053e0:	627b      	str	r3, [r7, #36]	; 0x24
 80053e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053e6:	4641      	mov	r1, r8
 80053e8:	1854      	adds	r4, r2, r1
 80053ea:	4649      	mov	r1, r9
 80053ec:	eb43 0501 	adc.w	r5, r3, r1
 80053f0:	f04f 0200 	mov.w	r2, #0
 80053f4:	f04f 0300 	mov.w	r3, #0
 80053f8:	00eb      	lsls	r3, r5, #3
 80053fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053fe:	00e2      	lsls	r2, r4, #3
 8005400:	4614      	mov	r4, r2
 8005402:	461d      	mov	r5, r3
 8005404:	4643      	mov	r3, r8
 8005406:	18e3      	adds	r3, r4, r3
 8005408:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800540c:	464b      	mov	r3, r9
 800540e:	eb45 0303 	adc.w	r3, r5, r3
 8005412:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005422:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005426:	f04f 0200 	mov.w	r2, #0
 800542a:	f04f 0300 	mov.w	r3, #0
 800542e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005432:	4629      	mov	r1, r5
 8005434:	008b      	lsls	r3, r1, #2
 8005436:	4621      	mov	r1, r4
 8005438:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800543c:	4621      	mov	r1, r4
 800543e:	008a      	lsls	r2, r1, #2
 8005440:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005444:	f7fa ff24 	bl	8000290 <__aeabi_uldivmod>
 8005448:	4602      	mov	r2, r0
 800544a:	460b      	mov	r3, r1
 800544c:	4b60      	ldr	r3, [pc, #384]	; (80055d0 <UART_SetConfig+0x4e4>)
 800544e:	fba3 2302 	umull	r2, r3, r3, r2
 8005452:	095b      	lsrs	r3, r3, #5
 8005454:	011c      	lsls	r4, r3, #4
 8005456:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800545a:	2200      	movs	r2, #0
 800545c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005460:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005464:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005468:	4642      	mov	r2, r8
 800546a:	464b      	mov	r3, r9
 800546c:	1891      	adds	r1, r2, r2
 800546e:	61b9      	str	r1, [r7, #24]
 8005470:	415b      	adcs	r3, r3
 8005472:	61fb      	str	r3, [r7, #28]
 8005474:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005478:	4641      	mov	r1, r8
 800547a:	1851      	adds	r1, r2, r1
 800547c:	6139      	str	r1, [r7, #16]
 800547e:	4649      	mov	r1, r9
 8005480:	414b      	adcs	r3, r1
 8005482:	617b      	str	r3, [r7, #20]
 8005484:	f04f 0200 	mov.w	r2, #0
 8005488:	f04f 0300 	mov.w	r3, #0
 800548c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005490:	4659      	mov	r1, fp
 8005492:	00cb      	lsls	r3, r1, #3
 8005494:	4651      	mov	r1, sl
 8005496:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800549a:	4651      	mov	r1, sl
 800549c:	00ca      	lsls	r2, r1, #3
 800549e:	4610      	mov	r0, r2
 80054a0:	4619      	mov	r1, r3
 80054a2:	4603      	mov	r3, r0
 80054a4:	4642      	mov	r2, r8
 80054a6:	189b      	adds	r3, r3, r2
 80054a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80054ac:	464b      	mov	r3, r9
 80054ae:	460a      	mov	r2, r1
 80054b0:	eb42 0303 	adc.w	r3, r2, r3
 80054b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80054c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80054c4:	f04f 0200 	mov.w	r2, #0
 80054c8:	f04f 0300 	mov.w	r3, #0
 80054cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80054d0:	4649      	mov	r1, r9
 80054d2:	008b      	lsls	r3, r1, #2
 80054d4:	4641      	mov	r1, r8
 80054d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054da:	4641      	mov	r1, r8
 80054dc:	008a      	lsls	r2, r1, #2
 80054de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80054e2:	f7fa fed5 	bl	8000290 <__aeabi_uldivmod>
 80054e6:	4602      	mov	r2, r0
 80054e8:	460b      	mov	r3, r1
 80054ea:	4611      	mov	r1, r2
 80054ec:	4b38      	ldr	r3, [pc, #224]	; (80055d0 <UART_SetConfig+0x4e4>)
 80054ee:	fba3 2301 	umull	r2, r3, r3, r1
 80054f2:	095b      	lsrs	r3, r3, #5
 80054f4:	2264      	movs	r2, #100	; 0x64
 80054f6:	fb02 f303 	mul.w	r3, r2, r3
 80054fa:	1acb      	subs	r3, r1, r3
 80054fc:	011b      	lsls	r3, r3, #4
 80054fe:	3332      	adds	r3, #50	; 0x32
 8005500:	4a33      	ldr	r2, [pc, #204]	; (80055d0 <UART_SetConfig+0x4e4>)
 8005502:	fba2 2303 	umull	r2, r3, r2, r3
 8005506:	095b      	lsrs	r3, r3, #5
 8005508:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800550c:	441c      	add	r4, r3
 800550e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005512:	2200      	movs	r2, #0
 8005514:	673b      	str	r3, [r7, #112]	; 0x70
 8005516:	677a      	str	r2, [r7, #116]	; 0x74
 8005518:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800551c:	4642      	mov	r2, r8
 800551e:	464b      	mov	r3, r9
 8005520:	1891      	adds	r1, r2, r2
 8005522:	60b9      	str	r1, [r7, #8]
 8005524:	415b      	adcs	r3, r3
 8005526:	60fb      	str	r3, [r7, #12]
 8005528:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800552c:	4641      	mov	r1, r8
 800552e:	1851      	adds	r1, r2, r1
 8005530:	6039      	str	r1, [r7, #0]
 8005532:	4649      	mov	r1, r9
 8005534:	414b      	adcs	r3, r1
 8005536:	607b      	str	r3, [r7, #4]
 8005538:	f04f 0200 	mov.w	r2, #0
 800553c:	f04f 0300 	mov.w	r3, #0
 8005540:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005544:	4659      	mov	r1, fp
 8005546:	00cb      	lsls	r3, r1, #3
 8005548:	4651      	mov	r1, sl
 800554a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800554e:	4651      	mov	r1, sl
 8005550:	00ca      	lsls	r2, r1, #3
 8005552:	4610      	mov	r0, r2
 8005554:	4619      	mov	r1, r3
 8005556:	4603      	mov	r3, r0
 8005558:	4642      	mov	r2, r8
 800555a:	189b      	adds	r3, r3, r2
 800555c:	66bb      	str	r3, [r7, #104]	; 0x68
 800555e:	464b      	mov	r3, r9
 8005560:	460a      	mov	r2, r1
 8005562:	eb42 0303 	adc.w	r3, r2, r3
 8005566:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	663b      	str	r3, [r7, #96]	; 0x60
 8005572:	667a      	str	r2, [r7, #100]	; 0x64
 8005574:	f04f 0200 	mov.w	r2, #0
 8005578:	f04f 0300 	mov.w	r3, #0
 800557c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005580:	4649      	mov	r1, r9
 8005582:	008b      	lsls	r3, r1, #2
 8005584:	4641      	mov	r1, r8
 8005586:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800558a:	4641      	mov	r1, r8
 800558c:	008a      	lsls	r2, r1, #2
 800558e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005592:	f7fa fe7d 	bl	8000290 <__aeabi_uldivmod>
 8005596:	4602      	mov	r2, r0
 8005598:	460b      	mov	r3, r1
 800559a:	4b0d      	ldr	r3, [pc, #52]	; (80055d0 <UART_SetConfig+0x4e4>)
 800559c:	fba3 1302 	umull	r1, r3, r3, r2
 80055a0:	095b      	lsrs	r3, r3, #5
 80055a2:	2164      	movs	r1, #100	; 0x64
 80055a4:	fb01 f303 	mul.w	r3, r1, r3
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	011b      	lsls	r3, r3, #4
 80055ac:	3332      	adds	r3, #50	; 0x32
 80055ae:	4a08      	ldr	r2, [pc, #32]	; (80055d0 <UART_SetConfig+0x4e4>)
 80055b0:	fba2 2303 	umull	r2, r3, r2, r3
 80055b4:	095b      	lsrs	r3, r3, #5
 80055b6:	f003 020f 	and.w	r2, r3, #15
 80055ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4422      	add	r2, r4
 80055c2:	609a      	str	r2, [r3, #8]
}
 80055c4:	bf00      	nop
 80055c6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80055ca:	46bd      	mov	sp, r7
 80055cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055d0:	51eb851f 	.word	0x51eb851f

080055d4 <atoi>:
 80055d4:	220a      	movs	r2, #10
 80055d6:	2100      	movs	r1, #0
 80055d8:	f000 b882 	b.w	80056e0 <strtol>

080055dc <_strtol_l.constprop.0>:
 80055dc:	2b01      	cmp	r3, #1
 80055de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055e2:	d001      	beq.n	80055e8 <_strtol_l.constprop.0+0xc>
 80055e4:	2b24      	cmp	r3, #36	; 0x24
 80055e6:	d906      	bls.n	80055f6 <_strtol_l.constprop.0+0x1a>
 80055e8:	f000 f8ac 	bl	8005744 <__errno>
 80055ec:	2316      	movs	r3, #22
 80055ee:	6003      	str	r3, [r0, #0]
 80055f0:	2000      	movs	r0, #0
 80055f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055f6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80056dc <_strtol_l.constprop.0+0x100>
 80055fa:	460d      	mov	r5, r1
 80055fc:	462e      	mov	r6, r5
 80055fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005602:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8005606:	f017 0708 	ands.w	r7, r7, #8
 800560a:	d1f7      	bne.n	80055fc <_strtol_l.constprop.0+0x20>
 800560c:	2c2d      	cmp	r4, #45	; 0x2d
 800560e:	d132      	bne.n	8005676 <_strtol_l.constprop.0+0x9a>
 8005610:	782c      	ldrb	r4, [r5, #0]
 8005612:	2701      	movs	r7, #1
 8005614:	1cb5      	adds	r5, r6, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d05b      	beq.n	80056d2 <_strtol_l.constprop.0+0xf6>
 800561a:	2b10      	cmp	r3, #16
 800561c:	d109      	bne.n	8005632 <_strtol_l.constprop.0+0x56>
 800561e:	2c30      	cmp	r4, #48	; 0x30
 8005620:	d107      	bne.n	8005632 <_strtol_l.constprop.0+0x56>
 8005622:	782c      	ldrb	r4, [r5, #0]
 8005624:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005628:	2c58      	cmp	r4, #88	; 0x58
 800562a:	d14d      	bne.n	80056c8 <_strtol_l.constprop.0+0xec>
 800562c:	786c      	ldrb	r4, [r5, #1]
 800562e:	2310      	movs	r3, #16
 8005630:	3502      	adds	r5, #2
 8005632:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005636:	f108 38ff 	add.w	r8, r8, #4294967295
 800563a:	f04f 0e00 	mov.w	lr, #0
 800563e:	fbb8 f9f3 	udiv	r9, r8, r3
 8005642:	4676      	mov	r6, lr
 8005644:	fb03 8a19 	mls	sl, r3, r9, r8
 8005648:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800564c:	f1bc 0f09 	cmp.w	ip, #9
 8005650:	d816      	bhi.n	8005680 <_strtol_l.constprop.0+0xa4>
 8005652:	4664      	mov	r4, ip
 8005654:	42a3      	cmp	r3, r4
 8005656:	dd24      	ble.n	80056a2 <_strtol_l.constprop.0+0xc6>
 8005658:	f1be 3fff 	cmp.w	lr, #4294967295
 800565c:	d008      	beq.n	8005670 <_strtol_l.constprop.0+0x94>
 800565e:	45b1      	cmp	r9, r6
 8005660:	d31c      	bcc.n	800569c <_strtol_l.constprop.0+0xc0>
 8005662:	d101      	bne.n	8005668 <_strtol_l.constprop.0+0x8c>
 8005664:	45a2      	cmp	sl, r4
 8005666:	db19      	blt.n	800569c <_strtol_l.constprop.0+0xc0>
 8005668:	fb06 4603 	mla	r6, r6, r3, r4
 800566c:	f04f 0e01 	mov.w	lr, #1
 8005670:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005674:	e7e8      	b.n	8005648 <_strtol_l.constprop.0+0x6c>
 8005676:	2c2b      	cmp	r4, #43	; 0x2b
 8005678:	bf04      	itt	eq
 800567a:	782c      	ldrbeq	r4, [r5, #0]
 800567c:	1cb5      	addeq	r5, r6, #2
 800567e:	e7ca      	b.n	8005616 <_strtol_l.constprop.0+0x3a>
 8005680:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005684:	f1bc 0f19 	cmp.w	ip, #25
 8005688:	d801      	bhi.n	800568e <_strtol_l.constprop.0+0xb2>
 800568a:	3c37      	subs	r4, #55	; 0x37
 800568c:	e7e2      	b.n	8005654 <_strtol_l.constprop.0+0x78>
 800568e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005692:	f1bc 0f19 	cmp.w	ip, #25
 8005696:	d804      	bhi.n	80056a2 <_strtol_l.constprop.0+0xc6>
 8005698:	3c57      	subs	r4, #87	; 0x57
 800569a:	e7db      	b.n	8005654 <_strtol_l.constprop.0+0x78>
 800569c:	f04f 3eff 	mov.w	lr, #4294967295
 80056a0:	e7e6      	b.n	8005670 <_strtol_l.constprop.0+0x94>
 80056a2:	f1be 3fff 	cmp.w	lr, #4294967295
 80056a6:	d105      	bne.n	80056b4 <_strtol_l.constprop.0+0xd8>
 80056a8:	2322      	movs	r3, #34	; 0x22
 80056aa:	6003      	str	r3, [r0, #0]
 80056ac:	4646      	mov	r6, r8
 80056ae:	b942      	cbnz	r2, 80056c2 <_strtol_l.constprop.0+0xe6>
 80056b0:	4630      	mov	r0, r6
 80056b2:	e79e      	b.n	80055f2 <_strtol_l.constprop.0+0x16>
 80056b4:	b107      	cbz	r7, 80056b8 <_strtol_l.constprop.0+0xdc>
 80056b6:	4276      	negs	r6, r6
 80056b8:	2a00      	cmp	r2, #0
 80056ba:	d0f9      	beq.n	80056b0 <_strtol_l.constprop.0+0xd4>
 80056bc:	f1be 0f00 	cmp.w	lr, #0
 80056c0:	d000      	beq.n	80056c4 <_strtol_l.constprop.0+0xe8>
 80056c2:	1e69      	subs	r1, r5, #1
 80056c4:	6011      	str	r1, [r2, #0]
 80056c6:	e7f3      	b.n	80056b0 <_strtol_l.constprop.0+0xd4>
 80056c8:	2430      	movs	r4, #48	; 0x30
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1b1      	bne.n	8005632 <_strtol_l.constprop.0+0x56>
 80056ce:	2308      	movs	r3, #8
 80056d0:	e7af      	b.n	8005632 <_strtol_l.constprop.0+0x56>
 80056d2:	2c30      	cmp	r4, #48	; 0x30
 80056d4:	d0a5      	beq.n	8005622 <_strtol_l.constprop.0+0x46>
 80056d6:	230a      	movs	r3, #10
 80056d8:	e7ab      	b.n	8005632 <_strtol_l.constprop.0+0x56>
 80056da:	bf00      	nop
 80056dc:	08006371 	.word	0x08006371

080056e0 <strtol>:
 80056e0:	4613      	mov	r3, r2
 80056e2:	460a      	mov	r2, r1
 80056e4:	4601      	mov	r1, r0
 80056e6:	4802      	ldr	r0, [pc, #8]	; (80056f0 <strtol+0x10>)
 80056e8:	6800      	ldr	r0, [r0, #0]
 80056ea:	f7ff bf77 	b.w	80055dc <_strtol_l.constprop.0>
 80056ee:	bf00      	nop
 80056f0:	20000058 	.word	0x20000058

080056f4 <siprintf>:
 80056f4:	b40e      	push	{r1, r2, r3}
 80056f6:	b500      	push	{lr}
 80056f8:	b09c      	sub	sp, #112	; 0x70
 80056fa:	ab1d      	add	r3, sp, #116	; 0x74
 80056fc:	9002      	str	r0, [sp, #8]
 80056fe:	9006      	str	r0, [sp, #24]
 8005700:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005704:	4809      	ldr	r0, [pc, #36]	; (800572c <siprintf+0x38>)
 8005706:	9107      	str	r1, [sp, #28]
 8005708:	9104      	str	r1, [sp, #16]
 800570a:	4909      	ldr	r1, [pc, #36]	; (8005730 <siprintf+0x3c>)
 800570c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005710:	9105      	str	r1, [sp, #20]
 8005712:	6800      	ldr	r0, [r0, #0]
 8005714:	9301      	str	r3, [sp, #4]
 8005716:	a902      	add	r1, sp, #8
 8005718:	f000 f992 	bl	8005a40 <_svfiprintf_r>
 800571c:	9b02      	ldr	r3, [sp, #8]
 800571e:	2200      	movs	r2, #0
 8005720:	701a      	strb	r2, [r3, #0]
 8005722:	b01c      	add	sp, #112	; 0x70
 8005724:	f85d eb04 	ldr.w	lr, [sp], #4
 8005728:	b003      	add	sp, #12
 800572a:	4770      	bx	lr
 800572c:	20000058 	.word	0x20000058
 8005730:	ffff0208 	.word	0xffff0208

08005734 <memset>:
 8005734:	4402      	add	r2, r0
 8005736:	4603      	mov	r3, r0
 8005738:	4293      	cmp	r3, r2
 800573a:	d100      	bne.n	800573e <memset+0xa>
 800573c:	4770      	bx	lr
 800573e:	f803 1b01 	strb.w	r1, [r3], #1
 8005742:	e7f9      	b.n	8005738 <memset+0x4>

08005744 <__errno>:
 8005744:	4b01      	ldr	r3, [pc, #4]	; (800574c <__errno+0x8>)
 8005746:	6818      	ldr	r0, [r3, #0]
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	20000058 	.word	0x20000058

08005750 <__libc_init_array>:
 8005750:	b570      	push	{r4, r5, r6, lr}
 8005752:	4d0d      	ldr	r5, [pc, #52]	; (8005788 <__libc_init_array+0x38>)
 8005754:	4c0d      	ldr	r4, [pc, #52]	; (800578c <__libc_init_array+0x3c>)
 8005756:	1b64      	subs	r4, r4, r5
 8005758:	10a4      	asrs	r4, r4, #2
 800575a:	2600      	movs	r6, #0
 800575c:	42a6      	cmp	r6, r4
 800575e:	d109      	bne.n	8005774 <__libc_init_array+0x24>
 8005760:	4d0b      	ldr	r5, [pc, #44]	; (8005790 <__libc_init_array+0x40>)
 8005762:	4c0c      	ldr	r4, [pc, #48]	; (8005794 <__libc_init_array+0x44>)
 8005764:	f000 fc6a 	bl	800603c <_init>
 8005768:	1b64      	subs	r4, r4, r5
 800576a:	10a4      	asrs	r4, r4, #2
 800576c:	2600      	movs	r6, #0
 800576e:	42a6      	cmp	r6, r4
 8005770:	d105      	bne.n	800577e <__libc_init_array+0x2e>
 8005772:	bd70      	pop	{r4, r5, r6, pc}
 8005774:	f855 3b04 	ldr.w	r3, [r5], #4
 8005778:	4798      	blx	r3
 800577a:	3601      	adds	r6, #1
 800577c:	e7ee      	b.n	800575c <__libc_init_array+0xc>
 800577e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005782:	4798      	blx	r3
 8005784:	3601      	adds	r6, #1
 8005786:	e7f2      	b.n	800576e <__libc_init_array+0x1e>
 8005788:	080064ac 	.word	0x080064ac
 800578c:	080064ac 	.word	0x080064ac
 8005790:	080064ac 	.word	0x080064ac
 8005794:	080064b0 	.word	0x080064b0

08005798 <__retarget_lock_acquire_recursive>:
 8005798:	4770      	bx	lr

0800579a <__retarget_lock_release_recursive>:
 800579a:	4770      	bx	lr

0800579c <_free_r>:
 800579c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800579e:	2900      	cmp	r1, #0
 80057a0:	d044      	beq.n	800582c <_free_r+0x90>
 80057a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057a6:	9001      	str	r0, [sp, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f1a1 0404 	sub.w	r4, r1, #4
 80057ae:	bfb8      	it	lt
 80057b0:	18e4      	addlt	r4, r4, r3
 80057b2:	f000 f8df 	bl	8005974 <__malloc_lock>
 80057b6:	4a1e      	ldr	r2, [pc, #120]	; (8005830 <_free_r+0x94>)
 80057b8:	9801      	ldr	r0, [sp, #4]
 80057ba:	6813      	ldr	r3, [r2, #0]
 80057bc:	b933      	cbnz	r3, 80057cc <_free_r+0x30>
 80057be:	6063      	str	r3, [r4, #4]
 80057c0:	6014      	str	r4, [r2, #0]
 80057c2:	b003      	add	sp, #12
 80057c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057c8:	f000 b8da 	b.w	8005980 <__malloc_unlock>
 80057cc:	42a3      	cmp	r3, r4
 80057ce:	d908      	bls.n	80057e2 <_free_r+0x46>
 80057d0:	6825      	ldr	r5, [r4, #0]
 80057d2:	1961      	adds	r1, r4, r5
 80057d4:	428b      	cmp	r3, r1
 80057d6:	bf01      	itttt	eq
 80057d8:	6819      	ldreq	r1, [r3, #0]
 80057da:	685b      	ldreq	r3, [r3, #4]
 80057dc:	1949      	addeq	r1, r1, r5
 80057de:	6021      	streq	r1, [r4, #0]
 80057e0:	e7ed      	b.n	80057be <_free_r+0x22>
 80057e2:	461a      	mov	r2, r3
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	b10b      	cbz	r3, 80057ec <_free_r+0x50>
 80057e8:	42a3      	cmp	r3, r4
 80057ea:	d9fa      	bls.n	80057e2 <_free_r+0x46>
 80057ec:	6811      	ldr	r1, [r2, #0]
 80057ee:	1855      	adds	r5, r2, r1
 80057f0:	42a5      	cmp	r5, r4
 80057f2:	d10b      	bne.n	800580c <_free_r+0x70>
 80057f4:	6824      	ldr	r4, [r4, #0]
 80057f6:	4421      	add	r1, r4
 80057f8:	1854      	adds	r4, r2, r1
 80057fa:	42a3      	cmp	r3, r4
 80057fc:	6011      	str	r1, [r2, #0]
 80057fe:	d1e0      	bne.n	80057c2 <_free_r+0x26>
 8005800:	681c      	ldr	r4, [r3, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	6053      	str	r3, [r2, #4]
 8005806:	440c      	add	r4, r1
 8005808:	6014      	str	r4, [r2, #0]
 800580a:	e7da      	b.n	80057c2 <_free_r+0x26>
 800580c:	d902      	bls.n	8005814 <_free_r+0x78>
 800580e:	230c      	movs	r3, #12
 8005810:	6003      	str	r3, [r0, #0]
 8005812:	e7d6      	b.n	80057c2 <_free_r+0x26>
 8005814:	6825      	ldr	r5, [r4, #0]
 8005816:	1961      	adds	r1, r4, r5
 8005818:	428b      	cmp	r3, r1
 800581a:	bf04      	itt	eq
 800581c:	6819      	ldreq	r1, [r3, #0]
 800581e:	685b      	ldreq	r3, [r3, #4]
 8005820:	6063      	str	r3, [r4, #4]
 8005822:	bf04      	itt	eq
 8005824:	1949      	addeq	r1, r1, r5
 8005826:	6021      	streq	r1, [r4, #0]
 8005828:	6054      	str	r4, [r2, #4]
 800582a:	e7ca      	b.n	80057c2 <_free_r+0x26>
 800582c:	b003      	add	sp, #12
 800582e:	bd30      	pop	{r4, r5, pc}
 8005830:	200003e8 	.word	0x200003e8

08005834 <sbrk_aligned>:
 8005834:	b570      	push	{r4, r5, r6, lr}
 8005836:	4e0e      	ldr	r6, [pc, #56]	; (8005870 <sbrk_aligned+0x3c>)
 8005838:	460c      	mov	r4, r1
 800583a:	6831      	ldr	r1, [r6, #0]
 800583c:	4605      	mov	r5, r0
 800583e:	b911      	cbnz	r1, 8005846 <sbrk_aligned+0x12>
 8005840:	f000 fba6 	bl	8005f90 <_sbrk_r>
 8005844:	6030      	str	r0, [r6, #0]
 8005846:	4621      	mov	r1, r4
 8005848:	4628      	mov	r0, r5
 800584a:	f000 fba1 	bl	8005f90 <_sbrk_r>
 800584e:	1c43      	adds	r3, r0, #1
 8005850:	d00a      	beq.n	8005868 <sbrk_aligned+0x34>
 8005852:	1cc4      	adds	r4, r0, #3
 8005854:	f024 0403 	bic.w	r4, r4, #3
 8005858:	42a0      	cmp	r0, r4
 800585a:	d007      	beq.n	800586c <sbrk_aligned+0x38>
 800585c:	1a21      	subs	r1, r4, r0
 800585e:	4628      	mov	r0, r5
 8005860:	f000 fb96 	bl	8005f90 <_sbrk_r>
 8005864:	3001      	adds	r0, #1
 8005866:	d101      	bne.n	800586c <sbrk_aligned+0x38>
 8005868:	f04f 34ff 	mov.w	r4, #4294967295
 800586c:	4620      	mov	r0, r4
 800586e:	bd70      	pop	{r4, r5, r6, pc}
 8005870:	200003ec 	.word	0x200003ec

08005874 <_malloc_r>:
 8005874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005878:	1ccd      	adds	r5, r1, #3
 800587a:	f025 0503 	bic.w	r5, r5, #3
 800587e:	3508      	adds	r5, #8
 8005880:	2d0c      	cmp	r5, #12
 8005882:	bf38      	it	cc
 8005884:	250c      	movcc	r5, #12
 8005886:	2d00      	cmp	r5, #0
 8005888:	4607      	mov	r7, r0
 800588a:	db01      	blt.n	8005890 <_malloc_r+0x1c>
 800588c:	42a9      	cmp	r1, r5
 800588e:	d905      	bls.n	800589c <_malloc_r+0x28>
 8005890:	230c      	movs	r3, #12
 8005892:	603b      	str	r3, [r7, #0]
 8005894:	2600      	movs	r6, #0
 8005896:	4630      	mov	r0, r6
 8005898:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800589c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005970 <_malloc_r+0xfc>
 80058a0:	f000 f868 	bl	8005974 <__malloc_lock>
 80058a4:	f8d8 3000 	ldr.w	r3, [r8]
 80058a8:	461c      	mov	r4, r3
 80058aa:	bb5c      	cbnz	r4, 8005904 <_malloc_r+0x90>
 80058ac:	4629      	mov	r1, r5
 80058ae:	4638      	mov	r0, r7
 80058b0:	f7ff ffc0 	bl	8005834 <sbrk_aligned>
 80058b4:	1c43      	adds	r3, r0, #1
 80058b6:	4604      	mov	r4, r0
 80058b8:	d155      	bne.n	8005966 <_malloc_r+0xf2>
 80058ba:	f8d8 4000 	ldr.w	r4, [r8]
 80058be:	4626      	mov	r6, r4
 80058c0:	2e00      	cmp	r6, #0
 80058c2:	d145      	bne.n	8005950 <_malloc_r+0xdc>
 80058c4:	2c00      	cmp	r4, #0
 80058c6:	d048      	beq.n	800595a <_malloc_r+0xe6>
 80058c8:	6823      	ldr	r3, [r4, #0]
 80058ca:	4631      	mov	r1, r6
 80058cc:	4638      	mov	r0, r7
 80058ce:	eb04 0903 	add.w	r9, r4, r3
 80058d2:	f000 fb5d 	bl	8005f90 <_sbrk_r>
 80058d6:	4581      	cmp	r9, r0
 80058d8:	d13f      	bne.n	800595a <_malloc_r+0xe6>
 80058da:	6821      	ldr	r1, [r4, #0]
 80058dc:	1a6d      	subs	r5, r5, r1
 80058de:	4629      	mov	r1, r5
 80058e0:	4638      	mov	r0, r7
 80058e2:	f7ff ffa7 	bl	8005834 <sbrk_aligned>
 80058e6:	3001      	adds	r0, #1
 80058e8:	d037      	beq.n	800595a <_malloc_r+0xe6>
 80058ea:	6823      	ldr	r3, [r4, #0]
 80058ec:	442b      	add	r3, r5
 80058ee:	6023      	str	r3, [r4, #0]
 80058f0:	f8d8 3000 	ldr.w	r3, [r8]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d038      	beq.n	800596a <_malloc_r+0xf6>
 80058f8:	685a      	ldr	r2, [r3, #4]
 80058fa:	42a2      	cmp	r2, r4
 80058fc:	d12b      	bne.n	8005956 <_malloc_r+0xe2>
 80058fe:	2200      	movs	r2, #0
 8005900:	605a      	str	r2, [r3, #4]
 8005902:	e00f      	b.n	8005924 <_malloc_r+0xb0>
 8005904:	6822      	ldr	r2, [r4, #0]
 8005906:	1b52      	subs	r2, r2, r5
 8005908:	d41f      	bmi.n	800594a <_malloc_r+0xd6>
 800590a:	2a0b      	cmp	r2, #11
 800590c:	d917      	bls.n	800593e <_malloc_r+0xca>
 800590e:	1961      	adds	r1, r4, r5
 8005910:	42a3      	cmp	r3, r4
 8005912:	6025      	str	r5, [r4, #0]
 8005914:	bf18      	it	ne
 8005916:	6059      	strne	r1, [r3, #4]
 8005918:	6863      	ldr	r3, [r4, #4]
 800591a:	bf08      	it	eq
 800591c:	f8c8 1000 	streq.w	r1, [r8]
 8005920:	5162      	str	r2, [r4, r5]
 8005922:	604b      	str	r3, [r1, #4]
 8005924:	4638      	mov	r0, r7
 8005926:	f104 060b 	add.w	r6, r4, #11
 800592a:	f000 f829 	bl	8005980 <__malloc_unlock>
 800592e:	f026 0607 	bic.w	r6, r6, #7
 8005932:	1d23      	adds	r3, r4, #4
 8005934:	1af2      	subs	r2, r6, r3
 8005936:	d0ae      	beq.n	8005896 <_malloc_r+0x22>
 8005938:	1b9b      	subs	r3, r3, r6
 800593a:	50a3      	str	r3, [r4, r2]
 800593c:	e7ab      	b.n	8005896 <_malloc_r+0x22>
 800593e:	42a3      	cmp	r3, r4
 8005940:	6862      	ldr	r2, [r4, #4]
 8005942:	d1dd      	bne.n	8005900 <_malloc_r+0x8c>
 8005944:	f8c8 2000 	str.w	r2, [r8]
 8005948:	e7ec      	b.n	8005924 <_malloc_r+0xb0>
 800594a:	4623      	mov	r3, r4
 800594c:	6864      	ldr	r4, [r4, #4]
 800594e:	e7ac      	b.n	80058aa <_malloc_r+0x36>
 8005950:	4634      	mov	r4, r6
 8005952:	6876      	ldr	r6, [r6, #4]
 8005954:	e7b4      	b.n	80058c0 <_malloc_r+0x4c>
 8005956:	4613      	mov	r3, r2
 8005958:	e7cc      	b.n	80058f4 <_malloc_r+0x80>
 800595a:	230c      	movs	r3, #12
 800595c:	603b      	str	r3, [r7, #0]
 800595e:	4638      	mov	r0, r7
 8005960:	f000 f80e 	bl	8005980 <__malloc_unlock>
 8005964:	e797      	b.n	8005896 <_malloc_r+0x22>
 8005966:	6025      	str	r5, [r4, #0]
 8005968:	e7dc      	b.n	8005924 <_malloc_r+0xb0>
 800596a:	605b      	str	r3, [r3, #4]
 800596c:	deff      	udf	#255	; 0xff
 800596e:	bf00      	nop
 8005970:	200003e8 	.word	0x200003e8

08005974 <__malloc_lock>:
 8005974:	4801      	ldr	r0, [pc, #4]	; (800597c <__malloc_lock+0x8>)
 8005976:	f7ff bf0f 	b.w	8005798 <__retarget_lock_acquire_recursive>
 800597a:	bf00      	nop
 800597c:	200003e4 	.word	0x200003e4

08005980 <__malloc_unlock>:
 8005980:	4801      	ldr	r0, [pc, #4]	; (8005988 <__malloc_unlock+0x8>)
 8005982:	f7ff bf0a 	b.w	800579a <__retarget_lock_release_recursive>
 8005986:	bf00      	nop
 8005988:	200003e4 	.word	0x200003e4

0800598c <__ssputs_r>:
 800598c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005990:	688e      	ldr	r6, [r1, #8]
 8005992:	461f      	mov	r7, r3
 8005994:	42be      	cmp	r6, r7
 8005996:	680b      	ldr	r3, [r1, #0]
 8005998:	4682      	mov	sl, r0
 800599a:	460c      	mov	r4, r1
 800599c:	4690      	mov	r8, r2
 800599e:	d82c      	bhi.n	80059fa <__ssputs_r+0x6e>
 80059a0:	898a      	ldrh	r2, [r1, #12]
 80059a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80059a6:	d026      	beq.n	80059f6 <__ssputs_r+0x6a>
 80059a8:	6965      	ldr	r5, [r4, #20]
 80059aa:	6909      	ldr	r1, [r1, #16]
 80059ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80059b0:	eba3 0901 	sub.w	r9, r3, r1
 80059b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80059b8:	1c7b      	adds	r3, r7, #1
 80059ba:	444b      	add	r3, r9
 80059bc:	106d      	asrs	r5, r5, #1
 80059be:	429d      	cmp	r5, r3
 80059c0:	bf38      	it	cc
 80059c2:	461d      	movcc	r5, r3
 80059c4:	0553      	lsls	r3, r2, #21
 80059c6:	d527      	bpl.n	8005a18 <__ssputs_r+0x8c>
 80059c8:	4629      	mov	r1, r5
 80059ca:	f7ff ff53 	bl	8005874 <_malloc_r>
 80059ce:	4606      	mov	r6, r0
 80059d0:	b360      	cbz	r0, 8005a2c <__ssputs_r+0xa0>
 80059d2:	6921      	ldr	r1, [r4, #16]
 80059d4:	464a      	mov	r2, r9
 80059d6:	f000 faeb 	bl	8005fb0 <memcpy>
 80059da:	89a3      	ldrh	r3, [r4, #12]
 80059dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80059e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e4:	81a3      	strh	r3, [r4, #12]
 80059e6:	6126      	str	r6, [r4, #16]
 80059e8:	6165      	str	r5, [r4, #20]
 80059ea:	444e      	add	r6, r9
 80059ec:	eba5 0509 	sub.w	r5, r5, r9
 80059f0:	6026      	str	r6, [r4, #0]
 80059f2:	60a5      	str	r5, [r4, #8]
 80059f4:	463e      	mov	r6, r7
 80059f6:	42be      	cmp	r6, r7
 80059f8:	d900      	bls.n	80059fc <__ssputs_r+0x70>
 80059fa:	463e      	mov	r6, r7
 80059fc:	6820      	ldr	r0, [r4, #0]
 80059fe:	4632      	mov	r2, r6
 8005a00:	4641      	mov	r1, r8
 8005a02:	f000 faab 	bl	8005f5c <memmove>
 8005a06:	68a3      	ldr	r3, [r4, #8]
 8005a08:	1b9b      	subs	r3, r3, r6
 8005a0a:	60a3      	str	r3, [r4, #8]
 8005a0c:	6823      	ldr	r3, [r4, #0]
 8005a0e:	4433      	add	r3, r6
 8005a10:	6023      	str	r3, [r4, #0]
 8005a12:	2000      	movs	r0, #0
 8005a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a18:	462a      	mov	r2, r5
 8005a1a:	f000 fad7 	bl	8005fcc <_realloc_r>
 8005a1e:	4606      	mov	r6, r0
 8005a20:	2800      	cmp	r0, #0
 8005a22:	d1e0      	bne.n	80059e6 <__ssputs_r+0x5a>
 8005a24:	6921      	ldr	r1, [r4, #16]
 8005a26:	4650      	mov	r0, sl
 8005a28:	f7ff feb8 	bl	800579c <_free_r>
 8005a2c:	230c      	movs	r3, #12
 8005a2e:	f8ca 3000 	str.w	r3, [sl]
 8005a32:	89a3      	ldrh	r3, [r4, #12]
 8005a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a38:	81a3      	strh	r3, [r4, #12]
 8005a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a3e:	e7e9      	b.n	8005a14 <__ssputs_r+0x88>

08005a40 <_svfiprintf_r>:
 8005a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a44:	4698      	mov	r8, r3
 8005a46:	898b      	ldrh	r3, [r1, #12]
 8005a48:	061b      	lsls	r3, r3, #24
 8005a4a:	b09d      	sub	sp, #116	; 0x74
 8005a4c:	4607      	mov	r7, r0
 8005a4e:	460d      	mov	r5, r1
 8005a50:	4614      	mov	r4, r2
 8005a52:	d50e      	bpl.n	8005a72 <_svfiprintf_r+0x32>
 8005a54:	690b      	ldr	r3, [r1, #16]
 8005a56:	b963      	cbnz	r3, 8005a72 <_svfiprintf_r+0x32>
 8005a58:	2140      	movs	r1, #64	; 0x40
 8005a5a:	f7ff ff0b 	bl	8005874 <_malloc_r>
 8005a5e:	6028      	str	r0, [r5, #0]
 8005a60:	6128      	str	r0, [r5, #16]
 8005a62:	b920      	cbnz	r0, 8005a6e <_svfiprintf_r+0x2e>
 8005a64:	230c      	movs	r3, #12
 8005a66:	603b      	str	r3, [r7, #0]
 8005a68:	f04f 30ff 	mov.w	r0, #4294967295
 8005a6c:	e0d0      	b.n	8005c10 <_svfiprintf_r+0x1d0>
 8005a6e:	2340      	movs	r3, #64	; 0x40
 8005a70:	616b      	str	r3, [r5, #20]
 8005a72:	2300      	movs	r3, #0
 8005a74:	9309      	str	r3, [sp, #36]	; 0x24
 8005a76:	2320      	movs	r3, #32
 8005a78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a80:	2330      	movs	r3, #48	; 0x30
 8005a82:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005c28 <_svfiprintf_r+0x1e8>
 8005a86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a8a:	f04f 0901 	mov.w	r9, #1
 8005a8e:	4623      	mov	r3, r4
 8005a90:	469a      	mov	sl, r3
 8005a92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a96:	b10a      	cbz	r2, 8005a9c <_svfiprintf_r+0x5c>
 8005a98:	2a25      	cmp	r2, #37	; 0x25
 8005a9a:	d1f9      	bne.n	8005a90 <_svfiprintf_r+0x50>
 8005a9c:	ebba 0b04 	subs.w	fp, sl, r4
 8005aa0:	d00b      	beq.n	8005aba <_svfiprintf_r+0x7a>
 8005aa2:	465b      	mov	r3, fp
 8005aa4:	4622      	mov	r2, r4
 8005aa6:	4629      	mov	r1, r5
 8005aa8:	4638      	mov	r0, r7
 8005aaa:	f7ff ff6f 	bl	800598c <__ssputs_r>
 8005aae:	3001      	adds	r0, #1
 8005ab0:	f000 80a9 	beq.w	8005c06 <_svfiprintf_r+0x1c6>
 8005ab4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ab6:	445a      	add	r2, fp
 8005ab8:	9209      	str	r2, [sp, #36]	; 0x24
 8005aba:	f89a 3000 	ldrb.w	r3, [sl]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f000 80a1 	beq.w	8005c06 <_svfiprintf_r+0x1c6>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8005aca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ace:	f10a 0a01 	add.w	sl, sl, #1
 8005ad2:	9304      	str	r3, [sp, #16]
 8005ad4:	9307      	str	r3, [sp, #28]
 8005ad6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ada:	931a      	str	r3, [sp, #104]	; 0x68
 8005adc:	4654      	mov	r4, sl
 8005ade:	2205      	movs	r2, #5
 8005ae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ae4:	4850      	ldr	r0, [pc, #320]	; (8005c28 <_svfiprintf_r+0x1e8>)
 8005ae6:	f7fa fb83 	bl	80001f0 <memchr>
 8005aea:	9a04      	ldr	r2, [sp, #16]
 8005aec:	b9d8      	cbnz	r0, 8005b26 <_svfiprintf_r+0xe6>
 8005aee:	06d0      	lsls	r0, r2, #27
 8005af0:	bf44      	itt	mi
 8005af2:	2320      	movmi	r3, #32
 8005af4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005af8:	0711      	lsls	r1, r2, #28
 8005afa:	bf44      	itt	mi
 8005afc:	232b      	movmi	r3, #43	; 0x2b
 8005afe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b02:	f89a 3000 	ldrb.w	r3, [sl]
 8005b06:	2b2a      	cmp	r3, #42	; 0x2a
 8005b08:	d015      	beq.n	8005b36 <_svfiprintf_r+0xf6>
 8005b0a:	9a07      	ldr	r2, [sp, #28]
 8005b0c:	4654      	mov	r4, sl
 8005b0e:	2000      	movs	r0, #0
 8005b10:	f04f 0c0a 	mov.w	ip, #10
 8005b14:	4621      	mov	r1, r4
 8005b16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b1a:	3b30      	subs	r3, #48	; 0x30
 8005b1c:	2b09      	cmp	r3, #9
 8005b1e:	d94d      	bls.n	8005bbc <_svfiprintf_r+0x17c>
 8005b20:	b1b0      	cbz	r0, 8005b50 <_svfiprintf_r+0x110>
 8005b22:	9207      	str	r2, [sp, #28]
 8005b24:	e014      	b.n	8005b50 <_svfiprintf_r+0x110>
 8005b26:	eba0 0308 	sub.w	r3, r0, r8
 8005b2a:	fa09 f303 	lsl.w	r3, r9, r3
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	9304      	str	r3, [sp, #16]
 8005b32:	46a2      	mov	sl, r4
 8005b34:	e7d2      	b.n	8005adc <_svfiprintf_r+0x9c>
 8005b36:	9b03      	ldr	r3, [sp, #12]
 8005b38:	1d19      	adds	r1, r3, #4
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	9103      	str	r1, [sp, #12]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	bfbb      	ittet	lt
 8005b42:	425b      	neglt	r3, r3
 8005b44:	f042 0202 	orrlt.w	r2, r2, #2
 8005b48:	9307      	strge	r3, [sp, #28]
 8005b4a:	9307      	strlt	r3, [sp, #28]
 8005b4c:	bfb8      	it	lt
 8005b4e:	9204      	strlt	r2, [sp, #16]
 8005b50:	7823      	ldrb	r3, [r4, #0]
 8005b52:	2b2e      	cmp	r3, #46	; 0x2e
 8005b54:	d10c      	bne.n	8005b70 <_svfiprintf_r+0x130>
 8005b56:	7863      	ldrb	r3, [r4, #1]
 8005b58:	2b2a      	cmp	r3, #42	; 0x2a
 8005b5a:	d134      	bne.n	8005bc6 <_svfiprintf_r+0x186>
 8005b5c:	9b03      	ldr	r3, [sp, #12]
 8005b5e:	1d1a      	adds	r2, r3, #4
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	9203      	str	r2, [sp, #12]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	bfb8      	it	lt
 8005b68:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b6c:	3402      	adds	r4, #2
 8005b6e:	9305      	str	r3, [sp, #20]
 8005b70:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005c38 <_svfiprintf_r+0x1f8>
 8005b74:	7821      	ldrb	r1, [r4, #0]
 8005b76:	2203      	movs	r2, #3
 8005b78:	4650      	mov	r0, sl
 8005b7a:	f7fa fb39 	bl	80001f0 <memchr>
 8005b7e:	b138      	cbz	r0, 8005b90 <_svfiprintf_r+0x150>
 8005b80:	9b04      	ldr	r3, [sp, #16]
 8005b82:	eba0 000a 	sub.w	r0, r0, sl
 8005b86:	2240      	movs	r2, #64	; 0x40
 8005b88:	4082      	lsls	r2, r0
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	3401      	adds	r4, #1
 8005b8e:	9304      	str	r3, [sp, #16]
 8005b90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b94:	4825      	ldr	r0, [pc, #148]	; (8005c2c <_svfiprintf_r+0x1ec>)
 8005b96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b9a:	2206      	movs	r2, #6
 8005b9c:	f7fa fb28 	bl	80001f0 <memchr>
 8005ba0:	2800      	cmp	r0, #0
 8005ba2:	d038      	beq.n	8005c16 <_svfiprintf_r+0x1d6>
 8005ba4:	4b22      	ldr	r3, [pc, #136]	; (8005c30 <_svfiprintf_r+0x1f0>)
 8005ba6:	bb1b      	cbnz	r3, 8005bf0 <_svfiprintf_r+0x1b0>
 8005ba8:	9b03      	ldr	r3, [sp, #12]
 8005baa:	3307      	adds	r3, #7
 8005bac:	f023 0307 	bic.w	r3, r3, #7
 8005bb0:	3308      	adds	r3, #8
 8005bb2:	9303      	str	r3, [sp, #12]
 8005bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bb6:	4433      	add	r3, r6
 8005bb8:	9309      	str	r3, [sp, #36]	; 0x24
 8005bba:	e768      	b.n	8005a8e <_svfiprintf_r+0x4e>
 8005bbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bc0:	460c      	mov	r4, r1
 8005bc2:	2001      	movs	r0, #1
 8005bc4:	e7a6      	b.n	8005b14 <_svfiprintf_r+0xd4>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	3401      	adds	r4, #1
 8005bca:	9305      	str	r3, [sp, #20]
 8005bcc:	4619      	mov	r1, r3
 8005bce:	f04f 0c0a 	mov.w	ip, #10
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bd8:	3a30      	subs	r2, #48	; 0x30
 8005bda:	2a09      	cmp	r2, #9
 8005bdc:	d903      	bls.n	8005be6 <_svfiprintf_r+0x1a6>
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d0c6      	beq.n	8005b70 <_svfiprintf_r+0x130>
 8005be2:	9105      	str	r1, [sp, #20]
 8005be4:	e7c4      	b.n	8005b70 <_svfiprintf_r+0x130>
 8005be6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bea:	4604      	mov	r4, r0
 8005bec:	2301      	movs	r3, #1
 8005bee:	e7f0      	b.n	8005bd2 <_svfiprintf_r+0x192>
 8005bf0:	ab03      	add	r3, sp, #12
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	462a      	mov	r2, r5
 8005bf6:	4b0f      	ldr	r3, [pc, #60]	; (8005c34 <_svfiprintf_r+0x1f4>)
 8005bf8:	a904      	add	r1, sp, #16
 8005bfa:	4638      	mov	r0, r7
 8005bfc:	f3af 8000 	nop.w
 8005c00:	1c42      	adds	r2, r0, #1
 8005c02:	4606      	mov	r6, r0
 8005c04:	d1d6      	bne.n	8005bb4 <_svfiprintf_r+0x174>
 8005c06:	89ab      	ldrh	r3, [r5, #12]
 8005c08:	065b      	lsls	r3, r3, #25
 8005c0a:	f53f af2d 	bmi.w	8005a68 <_svfiprintf_r+0x28>
 8005c0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c10:	b01d      	add	sp, #116	; 0x74
 8005c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c16:	ab03      	add	r3, sp, #12
 8005c18:	9300      	str	r3, [sp, #0]
 8005c1a:	462a      	mov	r2, r5
 8005c1c:	4b05      	ldr	r3, [pc, #20]	; (8005c34 <_svfiprintf_r+0x1f4>)
 8005c1e:	a904      	add	r1, sp, #16
 8005c20:	4638      	mov	r0, r7
 8005c22:	f000 f879 	bl	8005d18 <_printf_i>
 8005c26:	e7eb      	b.n	8005c00 <_svfiprintf_r+0x1c0>
 8005c28:	08006471 	.word	0x08006471
 8005c2c:	0800647b 	.word	0x0800647b
 8005c30:	00000000 	.word	0x00000000
 8005c34:	0800598d 	.word	0x0800598d
 8005c38:	08006477 	.word	0x08006477

08005c3c <_printf_common>:
 8005c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c40:	4616      	mov	r6, r2
 8005c42:	4699      	mov	r9, r3
 8005c44:	688a      	ldr	r2, [r1, #8]
 8005c46:	690b      	ldr	r3, [r1, #16]
 8005c48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	bfb8      	it	lt
 8005c50:	4613      	movlt	r3, r2
 8005c52:	6033      	str	r3, [r6, #0]
 8005c54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c58:	4607      	mov	r7, r0
 8005c5a:	460c      	mov	r4, r1
 8005c5c:	b10a      	cbz	r2, 8005c62 <_printf_common+0x26>
 8005c5e:	3301      	adds	r3, #1
 8005c60:	6033      	str	r3, [r6, #0]
 8005c62:	6823      	ldr	r3, [r4, #0]
 8005c64:	0699      	lsls	r1, r3, #26
 8005c66:	bf42      	ittt	mi
 8005c68:	6833      	ldrmi	r3, [r6, #0]
 8005c6a:	3302      	addmi	r3, #2
 8005c6c:	6033      	strmi	r3, [r6, #0]
 8005c6e:	6825      	ldr	r5, [r4, #0]
 8005c70:	f015 0506 	ands.w	r5, r5, #6
 8005c74:	d106      	bne.n	8005c84 <_printf_common+0x48>
 8005c76:	f104 0a19 	add.w	sl, r4, #25
 8005c7a:	68e3      	ldr	r3, [r4, #12]
 8005c7c:	6832      	ldr	r2, [r6, #0]
 8005c7e:	1a9b      	subs	r3, r3, r2
 8005c80:	42ab      	cmp	r3, r5
 8005c82:	dc26      	bgt.n	8005cd2 <_printf_common+0x96>
 8005c84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c88:	1e13      	subs	r3, r2, #0
 8005c8a:	6822      	ldr	r2, [r4, #0]
 8005c8c:	bf18      	it	ne
 8005c8e:	2301      	movne	r3, #1
 8005c90:	0692      	lsls	r2, r2, #26
 8005c92:	d42b      	bmi.n	8005cec <_printf_common+0xb0>
 8005c94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c98:	4649      	mov	r1, r9
 8005c9a:	4638      	mov	r0, r7
 8005c9c:	47c0      	blx	r8
 8005c9e:	3001      	adds	r0, #1
 8005ca0:	d01e      	beq.n	8005ce0 <_printf_common+0xa4>
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	6922      	ldr	r2, [r4, #16]
 8005ca6:	f003 0306 	and.w	r3, r3, #6
 8005caa:	2b04      	cmp	r3, #4
 8005cac:	bf02      	ittt	eq
 8005cae:	68e5      	ldreq	r5, [r4, #12]
 8005cb0:	6833      	ldreq	r3, [r6, #0]
 8005cb2:	1aed      	subeq	r5, r5, r3
 8005cb4:	68a3      	ldr	r3, [r4, #8]
 8005cb6:	bf0c      	ite	eq
 8005cb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cbc:	2500      	movne	r5, #0
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	bfc4      	itt	gt
 8005cc2:	1a9b      	subgt	r3, r3, r2
 8005cc4:	18ed      	addgt	r5, r5, r3
 8005cc6:	2600      	movs	r6, #0
 8005cc8:	341a      	adds	r4, #26
 8005cca:	42b5      	cmp	r5, r6
 8005ccc:	d11a      	bne.n	8005d04 <_printf_common+0xc8>
 8005cce:	2000      	movs	r0, #0
 8005cd0:	e008      	b.n	8005ce4 <_printf_common+0xa8>
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	4652      	mov	r2, sl
 8005cd6:	4649      	mov	r1, r9
 8005cd8:	4638      	mov	r0, r7
 8005cda:	47c0      	blx	r8
 8005cdc:	3001      	adds	r0, #1
 8005cde:	d103      	bne.n	8005ce8 <_printf_common+0xac>
 8005ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ce8:	3501      	adds	r5, #1
 8005cea:	e7c6      	b.n	8005c7a <_printf_common+0x3e>
 8005cec:	18e1      	adds	r1, r4, r3
 8005cee:	1c5a      	adds	r2, r3, #1
 8005cf0:	2030      	movs	r0, #48	; 0x30
 8005cf2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cf6:	4422      	add	r2, r4
 8005cf8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d00:	3302      	adds	r3, #2
 8005d02:	e7c7      	b.n	8005c94 <_printf_common+0x58>
 8005d04:	2301      	movs	r3, #1
 8005d06:	4622      	mov	r2, r4
 8005d08:	4649      	mov	r1, r9
 8005d0a:	4638      	mov	r0, r7
 8005d0c:	47c0      	blx	r8
 8005d0e:	3001      	adds	r0, #1
 8005d10:	d0e6      	beq.n	8005ce0 <_printf_common+0xa4>
 8005d12:	3601      	adds	r6, #1
 8005d14:	e7d9      	b.n	8005cca <_printf_common+0x8e>
	...

08005d18 <_printf_i>:
 8005d18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d1c:	7e0f      	ldrb	r7, [r1, #24]
 8005d1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d20:	2f78      	cmp	r7, #120	; 0x78
 8005d22:	4691      	mov	r9, r2
 8005d24:	4680      	mov	r8, r0
 8005d26:	460c      	mov	r4, r1
 8005d28:	469a      	mov	sl, r3
 8005d2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d2e:	d807      	bhi.n	8005d40 <_printf_i+0x28>
 8005d30:	2f62      	cmp	r7, #98	; 0x62
 8005d32:	d80a      	bhi.n	8005d4a <_printf_i+0x32>
 8005d34:	2f00      	cmp	r7, #0
 8005d36:	f000 80d4 	beq.w	8005ee2 <_printf_i+0x1ca>
 8005d3a:	2f58      	cmp	r7, #88	; 0x58
 8005d3c:	f000 80c0 	beq.w	8005ec0 <_printf_i+0x1a8>
 8005d40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d48:	e03a      	b.n	8005dc0 <_printf_i+0xa8>
 8005d4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d4e:	2b15      	cmp	r3, #21
 8005d50:	d8f6      	bhi.n	8005d40 <_printf_i+0x28>
 8005d52:	a101      	add	r1, pc, #4	; (adr r1, 8005d58 <_printf_i+0x40>)
 8005d54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d58:	08005db1 	.word	0x08005db1
 8005d5c:	08005dc5 	.word	0x08005dc5
 8005d60:	08005d41 	.word	0x08005d41
 8005d64:	08005d41 	.word	0x08005d41
 8005d68:	08005d41 	.word	0x08005d41
 8005d6c:	08005d41 	.word	0x08005d41
 8005d70:	08005dc5 	.word	0x08005dc5
 8005d74:	08005d41 	.word	0x08005d41
 8005d78:	08005d41 	.word	0x08005d41
 8005d7c:	08005d41 	.word	0x08005d41
 8005d80:	08005d41 	.word	0x08005d41
 8005d84:	08005ec9 	.word	0x08005ec9
 8005d88:	08005df1 	.word	0x08005df1
 8005d8c:	08005e83 	.word	0x08005e83
 8005d90:	08005d41 	.word	0x08005d41
 8005d94:	08005d41 	.word	0x08005d41
 8005d98:	08005eeb 	.word	0x08005eeb
 8005d9c:	08005d41 	.word	0x08005d41
 8005da0:	08005df1 	.word	0x08005df1
 8005da4:	08005d41 	.word	0x08005d41
 8005da8:	08005d41 	.word	0x08005d41
 8005dac:	08005e8b 	.word	0x08005e8b
 8005db0:	682b      	ldr	r3, [r5, #0]
 8005db2:	1d1a      	adds	r2, r3, #4
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	602a      	str	r2, [r5, #0]
 8005db8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e09f      	b.n	8005f04 <_printf_i+0x1ec>
 8005dc4:	6820      	ldr	r0, [r4, #0]
 8005dc6:	682b      	ldr	r3, [r5, #0]
 8005dc8:	0607      	lsls	r7, r0, #24
 8005dca:	f103 0104 	add.w	r1, r3, #4
 8005dce:	6029      	str	r1, [r5, #0]
 8005dd0:	d501      	bpl.n	8005dd6 <_printf_i+0xbe>
 8005dd2:	681e      	ldr	r6, [r3, #0]
 8005dd4:	e003      	b.n	8005dde <_printf_i+0xc6>
 8005dd6:	0646      	lsls	r6, r0, #25
 8005dd8:	d5fb      	bpl.n	8005dd2 <_printf_i+0xba>
 8005dda:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005dde:	2e00      	cmp	r6, #0
 8005de0:	da03      	bge.n	8005dea <_printf_i+0xd2>
 8005de2:	232d      	movs	r3, #45	; 0x2d
 8005de4:	4276      	negs	r6, r6
 8005de6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dea:	485a      	ldr	r0, [pc, #360]	; (8005f54 <_printf_i+0x23c>)
 8005dec:	230a      	movs	r3, #10
 8005dee:	e012      	b.n	8005e16 <_printf_i+0xfe>
 8005df0:	682b      	ldr	r3, [r5, #0]
 8005df2:	6820      	ldr	r0, [r4, #0]
 8005df4:	1d19      	adds	r1, r3, #4
 8005df6:	6029      	str	r1, [r5, #0]
 8005df8:	0605      	lsls	r5, r0, #24
 8005dfa:	d501      	bpl.n	8005e00 <_printf_i+0xe8>
 8005dfc:	681e      	ldr	r6, [r3, #0]
 8005dfe:	e002      	b.n	8005e06 <_printf_i+0xee>
 8005e00:	0641      	lsls	r1, r0, #25
 8005e02:	d5fb      	bpl.n	8005dfc <_printf_i+0xe4>
 8005e04:	881e      	ldrh	r6, [r3, #0]
 8005e06:	4853      	ldr	r0, [pc, #332]	; (8005f54 <_printf_i+0x23c>)
 8005e08:	2f6f      	cmp	r7, #111	; 0x6f
 8005e0a:	bf0c      	ite	eq
 8005e0c:	2308      	moveq	r3, #8
 8005e0e:	230a      	movne	r3, #10
 8005e10:	2100      	movs	r1, #0
 8005e12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e16:	6865      	ldr	r5, [r4, #4]
 8005e18:	60a5      	str	r5, [r4, #8]
 8005e1a:	2d00      	cmp	r5, #0
 8005e1c:	bfa2      	ittt	ge
 8005e1e:	6821      	ldrge	r1, [r4, #0]
 8005e20:	f021 0104 	bicge.w	r1, r1, #4
 8005e24:	6021      	strge	r1, [r4, #0]
 8005e26:	b90e      	cbnz	r6, 8005e2c <_printf_i+0x114>
 8005e28:	2d00      	cmp	r5, #0
 8005e2a:	d04b      	beq.n	8005ec4 <_printf_i+0x1ac>
 8005e2c:	4615      	mov	r5, r2
 8005e2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e32:	fb03 6711 	mls	r7, r3, r1, r6
 8005e36:	5dc7      	ldrb	r7, [r0, r7]
 8005e38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e3c:	4637      	mov	r7, r6
 8005e3e:	42bb      	cmp	r3, r7
 8005e40:	460e      	mov	r6, r1
 8005e42:	d9f4      	bls.n	8005e2e <_printf_i+0x116>
 8005e44:	2b08      	cmp	r3, #8
 8005e46:	d10b      	bne.n	8005e60 <_printf_i+0x148>
 8005e48:	6823      	ldr	r3, [r4, #0]
 8005e4a:	07de      	lsls	r6, r3, #31
 8005e4c:	d508      	bpl.n	8005e60 <_printf_i+0x148>
 8005e4e:	6923      	ldr	r3, [r4, #16]
 8005e50:	6861      	ldr	r1, [r4, #4]
 8005e52:	4299      	cmp	r1, r3
 8005e54:	bfde      	ittt	le
 8005e56:	2330      	movle	r3, #48	; 0x30
 8005e58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e60:	1b52      	subs	r2, r2, r5
 8005e62:	6122      	str	r2, [r4, #16]
 8005e64:	f8cd a000 	str.w	sl, [sp]
 8005e68:	464b      	mov	r3, r9
 8005e6a:	aa03      	add	r2, sp, #12
 8005e6c:	4621      	mov	r1, r4
 8005e6e:	4640      	mov	r0, r8
 8005e70:	f7ff fee4 	bl	8005c3c <_printf_common>
 8005e74:	3001      	adds	r0, #1
 8005e76:	d14a      	bne.n	8005f0e <_printf_i+0x1f6>
 8005e78:	f04f 30ff 	mov.w	r0, #4294967295
 8005e7c:	b004      	add	sp, #16
 8005e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e82:	6823      	ldr	r3, [r4, #0]
 8005e84:	f043 0320 	orr.w	r3, r3, #32
 8005e88:	6023      	str	r3, [r4, #0]
 8005e8a:	4833      	ldr	r0, [pc, #204]	; (8005f58 <_printf_i+0x240>)
 8005e8c:	2778      	movs	r7, #120	; 0x78
 8005e8e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005e92:	6823      	ldr	r3, [r4, #0]
 8005e94:	6829      	ldr	r1, [r5, #0]
 8005e96:	061f      	lsls	r7, r3, #24
 8005e98:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e9c:	d402      	bmi.n	8005ea4 <_printf_i+0x18c>
 8005e9e:	065f      	lsls	r7, r3, #25
 8005ea0:	bf48      	it	mi
 8005ea2:	b2b6      	uxthmi	r6, r6
 8005ea4:	07df      	lsls	r7, r3, #31
 8005ea6:	bf48      	it	mi
 8005ea8:	f043 0320 	orrmi.w	r3, r3, #32
 8005eac:	6029      	str	r1, [r5, #0]
 8005eae:	bf48      	it	mi
 8005eb0:	6023      	strmi	r3, [r4, #0]
 8005eb2:	b91e      	cbnz	r6, 8005ebc <_printf_i+0x1a4>
 8005eb4:	6823      	ldr	r3, [r4, #0]
 8005eb6:	f023 0320 	bic.w	r3, r3, #32
 8005eba:	6023      	str	r3, [r4, #0]
 8005ebc:	2310      	movs	r3, #16
 8005ebe:	e7a7      	b.n	8005e10 <_printf_i+0xf8>
 8005ec0:	4824      	ldr	r0, [pc, #144]	; (8005f54 <_printf_i+0x23c>)
 8005ec2:	e7e4      	b.n	8005e8e <_printf_i+0x176>
 8005ec4:	4615      	mov	r5, r2
 8005ec6:	e7bd      	b.n	8005e44 <_printf_i+0x12c>
 8005ec8:	682b      	ldr	r3, [r5, #0]
 8005eca:	6826      	ldr	r6, [r4, #0]
 8005ecc:	6961      	ldr	r1, [r4, #20]
 8005ece:	1d18      	adds	r0, r3, #4
 8005ed0:	6028      	str	r0, [r5, #0]
 8005ed2:	0635      	lsls	r5, r6, #24
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	d501      	bpl.n	8005edc <_printf_i+0x1c4>
 8005ed8:	6019      	str	r1, [r3, #0]
 8005eda:	e002      	b.n	8005ee2 <_printf_i+0x1ca>
 8005edc:	0670      	lsls	r0, r6, #25
 8005ede:	d5fb      	bpl.n	8005ed8 <_printf_i+0x1c0>
 8005ee0:	8019      	strh	r1, [r3, #0]
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	6123      	str	r3, [r4, #16]
 8005ee6:	4615      	mov	r5, r2
 8005ee8:	e7bc      	b.n	8005e64 <_printf_i+0x14c>
 8005eea:	682b      	ldr	r3, [r5, #0]
 8005eec:	1d1a      	adds	r2, r3, #4
 8005eee:	602a      	str	r2, [r5, #0]
 8005ef0:	681d      	ldr	r5, [r3, #0]
 8005ef2:	6862      	ldr	r2, [r4, #4]
 8005ef4:	2100      	movs	r1, #0
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	f7fa f97a 	bl	80001f0 <memchr>
 8005efc:	b108      	cbz	r0, 8005f02 <_printf_i+0x1ea>
 8005efe:	1b40      	subs	r0, r0, r5
 8005f00:	6060      	str	r0, [r4, #4]
 8005f02:	6863      	ldr	r3, [r4, #4]
 8005f04:	6123      	str	r3, [r4, #16]
 8005f06:	2300      	movs	r3, #0
 8005f08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f0c:	e7aa      	b.n	8005e64 <_printf_i+0x14c>
 8005f0e:	6923      	ldr	r3, [r4, #16]
 8005f10:	462a      	mov	r2, r5
 8005f12:	4649      	mov	r1, r9
 8005f14:	4640      	mov	r0, r8
 8005f16:	47d0      	blx	sl
 8005f18:	3001      	adds	r0, #1
 8005f1a:	d0ad      	beq.n	8005e78 <_printf_i+0x160>
 8005f1c:	6823      	ldr	r3, [r4, #0]
 8005f1e:	079b      	lsls	r3, r3, #30
 8005f20:	d413      	bmi.n	8005f4a <_printf_i+0x232>
 8005f22:	68e0      	ldr	r0, [r4, #12]
 8005f24:	9b03      	ldr	r3, [sp, #12]
 8005f26:	4298      	cmp	r0, r3
 8005f28:	bfb8      	it	lt
 8005f2a:	4618      	movlt	r0, r3
 8005f2c:	e7a6      	b.n	8005e7c <_printf_i+0x164>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	4632      	mov	r2, r6
 8005f32:	4649      	mov	r1, r9
 8005f34:	4640      	mov	r0, r8
 8005f36:	47d0      	blx	sl
 8005f38:	3001      	adds	r0, #1
 8005f3a:	d09d      	beq.n	8005e78 <_printf_i+0x160>
 8005f3c:	3501      	adds	r5, #1
 8005f3e:	68e3      	ldr	r3, [r4, #12]
 8005f40:	9903      	ldr	r1, [sp, #12]
 8005f42:	1a5b      	subs	r3, r3, r1
 8005f44:	42ab      	cmp	r3, r5
 8005f46:	dcf2      	bgt.n	8005f2e <_printf_i+0x216>
 8005f48:	e7eb      	b.n	8005f22 <_printf_i+0x20a>
 8005f4a:	2500      	movs	r5, #0
 8005f4c:	f104 0619 	add.w	r6, r4, #25
 8005f50:	e7f5      	b.n	8005f3e <_printf_i+0x226>
 8005f52:	bf00      	nop
 8005f54:	08006482 	.word	0x08006482
 8005f58:	08006493 	.word	0x08006493

08005f5c <memmove>:
 8005f5c:	4288      	cmp	r0, r1
 8005f5e:	b510      	push	{r4, lr}
 8005f60:	eb01 0402 	add.w	r4, r1, r2
 8005f64:	d902      	bls.n	8005f6c <memmove+0x10>
 8005f66:	4284      	cmp	r4, r0
 8005f68:	4623      	mov	r3, r4
 8005f6a:	d807      	bhi.n	8005f7c <memmove+0x20>
 8005f6c:	1e43      	subs	r3, r0, #1
 8005f6e:	42a1      	cmp	r1, r4
 8005f70:	d008      	beq.n	8005f84 <memmove+0x28>
 8005f72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f7a:	e7f8      	b.n	8005f6e <memmove+0x12>
 8005f7c:	4402      	add	r2, r0
 8005f7e:	4601      	mov	r1, r0
 8005f80:	428a      	cmp	r2, r1
 8005f82:	d100      	bne.n	8005f86 <memmove+0x2a>
 8005f84:	bd10      	pop	{r4, pc}
 8005f86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f8e:	e7f7      	b.n	8005f80 <memmove+0x24>

08005f90 <_sbrk_r>:
 8005f90:	b538      	push	{r3, r4, r5, lr}
 8005f92:	4d06      	ldr	r5, [pc, #24]	; (8005fac <_sbrk_r+0x1c>)
 8005f94:	2300      	movs	r3, #0
 8005f96:	4604      	mov	r4, r0
 8005f98:	4608      	mov	r0, r1
 8005f9a:	602b      	str	r3, [r5, #0]
 8005f9c:	f7fb fd8e 	bl	8001abc <_sbrk>
 8005fa0:	1c43      	adds	r3, r0, #1
 8005fa2:	d102      	bne.n	8005faa <_sbrk_r+0x1a>
 8005fa4:	682b      	ldr	r3, [r5, #0]
 8005fa6:	b103      	cbz	r3, 8005faa <_sbrk_r+0x1a>
 8005fa8:	6023      	str	r3, [r4, #0]
 8005faa:	bd38      	pop	{r3, r4, r5, pc}
 8005fac:	200003e0 	.word	0x200003e0

08005fb0 <memcpy>:
 8005fb0:	440a      	add	r2, r1
 8005fb2:	4291      	cmp	r1, r2
 8005fb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fb8:	d100      	bne.n	8005fbc <memcpy+0xc>
 8005fba:	4770      	bx	lr
 8005fbc:	b510      	push	{r4, lr}
 8005fbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fc6:	4291      	cmp	r1, r2
 8005fc8:	d1f9      	bne.n	8005fbe <memcpy+0xe>
 8005fca:	bd10      	pop	{r4, pc}

08005fcc <_realloc_r>:
 8005fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fd0:	4680      	mov	r8, r0
 8005fd2:	4614      	mov	r4, r2
 8005fd4:	460e      	mov	r6, r1
 8005fd6:	b921      	cbnz	r1, 8005fe2 <_realloc_r+0x16>
 8005fd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fdc:	4611      	mov	r1, r2
 8005fde:	f7ff bc49 	b.w	8005874 <_malloc_r>
 8005fe2:	b92a      	cbnz	r2, 8005ff0 <_realloc_r+0x24>
 8005fe4:	f7ff fbda 	bl	800579c <_free_r>
 8005fe8:	4625      	mov	r5, r4
 8005fea:	4628      	mov	r0, r5
 8005fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ff0:	f000 f81b 	bl	800602a <_malloc_usable_size_r>
 8005ff4:	4284      	cmp	r4, r0
 8005ff6:	4607      	mov	r7, r0
 8005ff8:	d802      	bhi.n	8006000 <_realloc_r+0x34>
 8005ffa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005ffe:	d812      	bhi.n	8006026 <_realloc_r+0x5a>
 8006000:	4621      	mov	r1, r4
 8006002:	4640      	mov	r0, r8
 8006004:	f7ff fc36 	bl	8005874 <_malloc_r>
 8006008:	4605      	mov	r5, r0
 800600a:	2800      	cmp	r0, #0
 800600c:	d0ed      	beq.n	8005fea <_realloc_r+0x1e>
 800600e:	42bc      	cmp	r4, r7
 8006010:	4622      	mov	r2, r4
 8006012:	4631      	mov	r1, r6
 8006014:	bf28      	it	cs
 8006016:	463a      	movcs	r2, r7
 8006018:	f7ff ffca 	bl	8005fb0 <memcpy>
 800601c:	4631      	mov	r1, r6
 800601e:	4640      	mov	r0, r8
 8006020:	f7ff fbbc 	bl	800579c <_free_r>
 8006024:	e7e1      	b.n	8005fea <_realloc_r+0x1e>
 8006026:	4635      	mov	r5, r6
 8006028:	e7df      	b.n	8005fea <_realloc_r+0x1e>

0800602a <_malloc_usable_size_r>:
 800602a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800602e:	1f18      	subs	r0, r3, #4
 8006030:	2b00      	cmp	r3, #0
 8006032:	bfbc      	itt	lt
 8006034:	580b      	ldrlt	r3, [r1, r0]
 8006036:	18c0      	addlt	r0, r0, r3
 8006038:	4770      	bx	lr
	...

0800603c <_init>:
 800603c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800603e:	bf00      	nop
 8006040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006042:	bc08      	pop	{r3}
 8006044:	469e      	mov	lr, r3
 8006046:	4770      	bx	lr

08006048 <_fini>:
 8006048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800604a:	bf00      	nop
 800604c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800604e:	bc08      	pop	{r3}
 8006050:	469e      	mov	lr, r3
 8006052:	4770      	bx	lr
